!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
A1	src/pgen/cpaw.cpp	/^static Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A1	src/pgen/field_loop_poles.cpp	/^static Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A1	src/pgen/linear_wave.cpp	/^static Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A2	src/pgen/cpaw.cpp	/^static Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A2	src/pgen/field_loop_poles.cpp	/^static Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A2	src/pgen/linear_wave.cpp	/^static Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A3	src/pgen/cpaw.cpp	/^static Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A3	src/pgen/field_loop_poles.cpp	/^static Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
A3	src/pgen/linear_wave.cpp	/^static Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	typeref:typename:Real	file:
ADD_ADFLX	src/task_list/task_list.hpp	/^  const uint64_t ADD_ADFLX=1LL<<9;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
ADD_HALLFLX	src/task_list/task_list.hpp	/^  const uint64_t ADD_HALLFLX=1LL<<10;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
ADD_HEATFLX	src/task_list/task_list.hpp	/^  const uint64_t ADD_HEATFLX=1LL<<7;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
ADD_OHMFLX	src/task_list/task_list.hpp	/^  const uint64_t ADD_OHMFLX=1LL<<8;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
ADD_VISCFLX	src/task_list/task_list.hpp	/^  const uint64_t ADD_VISCFLX=1LL<<6;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
AM	src/utils/ran2.cpp	/^#define AM /;"	d	file:
AMRFlagFunc_t	src/athena.hpp	/^typedef int (*AMRFlagFunc_t)(MeshBlock *pmb);$/;"	t	typeref:typename:int (*)(MeshBlock * pmb)
AMRFlag_	src/mesh/mesh.hpp	/^  AMRFlagFunc_t AMRFlag_;$/;"	m	class:Mesh	typeref:typename:AMRFlagFunc_t
AMRFlag_	src/mesh/mesh_refinement.hpp	/^  AMRFlagFunc_t AMRFlag_;$/;"	m	class:MeshRefinement	typeref:typename:AMRFlagFunc_t
AMR_FLAG	src/task_list/task_list.hpp	/^  const uint64_t AMR_FLAG=1LL<<40;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
ANI	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^enum {ISO=0, ANI=1};$/;"	e	enum:__anon31ce70ee0103
ATHDF5Output	src/outputs/athena_hdf5.cpp	/^ATHDF5Output::ATHDF5Output(OutputParameters oparams)$/;"	f	class:ATHDF5Output
ATHDF5Output	src/outputs/outputs.hpp	/^class ATHDF5Output : public OutputType {$/;"	c
ATHENA_ARRAYS_HPP_	src/athena_arrays.hpp	/^#define ATHENA_ARRAYS_HPP_$/;"	d
ATHENA_HPP_	src/athena.hpp	/^#define ATHENA_HPP_$/;"	d
AdaptiveMeshRefinement	src/mesh/mesh.cpp	/^void Mesh::AdaptiveMeshRefinement(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
AddEMF	src/field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::AddEMF(const EdgeField &e_src, EdgeField &e_des) {$/;"	f	class:FieldDiffusion	typeref:typename:void
AddFluxDivergenceToAverage	src/hydro/add_flux_divergence.cpp	/^void Hydro::AddFluxDivergenceToAverage(AthenaArray<Real> &w, AthenaArray<Real> &bcc,$/;"	f	class:Hydro	typeref:typename:void
AddGravityFlux	src/hydro/gravity_fluxes.cpp	/^void Hydro::AddGravityFlux(void) {$/;"	f	class:Hydro	typeref:typename:void
AddGravityFluxWithGflx	src/hydro/gravity_fluxes.cpp	/^void Hydro::AddGravityFluxWithGflx(void) {$/;"	f	class:Hydro	typeref:typename:void
AddGravitySolverTask	src/task_list/grav_task_list.cpp	/^void GravitySolverTaskList::AddGravitySolverTask(uint64_t id, uint64_t dep) {$/;"	f	class:GravitySolverTaskList	typeref:typename:void
AddHydroDiffusionEnergyFlux	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::AddHydroDiffusionEnergyFlux(AthenaArray<Real> *flux_src,$/;"	f	class:HydroDiffusion	typeref:typename:void
AddHydroDiffusionFlux	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::AddHydroDiffusionFlux(AthenaArray<Real> *flux_src,$/;"	f	class:HydroDiffusion	typeref:typename:void
AddHydroSourceTerms	src/hydro/srcterms/hydro_srcterms.cpp	/^void HydroSourceTerms::AddHydroSourceTerms(const Real time, const Real dt,$/;"	f	class:HydroSourceTerms	typeref:typename:void
AddMeshBlock	src/mesh/meshblock_tree.cpp	/^void MeshBlockTree::AddMeshBlock(MeshBlockTree& root, LogicalLocation rloc, int dim,$/;"	f	class:MeshBlockTree	typeref:typename:void
AddMeshBlockWithoutRefine	src/mesh/meshblock_tree.cpp	/^void MeshBlockTree::AddMeshBlockWithoutRefine(LogicalLocation rloc,$/;"	f	class:MeshBlockTree	typeref:typename:void
AddMultigrid	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::AddMultigrid(Multigrid *nmg) {$/;"	f	class:MultigridDriver	typeref:typename:void
AddMultigridTask	src/task_list/mg_task_list.cpp	/^void MultigridTaskList::AddMultigridTask(uint64_t id, uint64_t dep) {$/;"	f	class:MultigridTaskList	typeref:typename:void
AddParameter	src/parameter_input.cpp	/^void ParameterInput::AddParameter(InputBlock *pb, std::string name,$/;"	f	class:ParameterInput	typeref:typename:void
AddPoyntingFlux	src/field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::AddPoyntingFlux(FaceField &p_src) {$/;"	f	class:FieldDiffusion	typeref:typename:void
AddTimeIntegratorTask	src/task_list/time_integrator.cpp	/^void TimeIntegratorTaskList::AddTimeIntegratorTask(uint64_t id, uint64_t dep) {$/;"	f	class:TimeIntegratorTaskList	typeref:typename:void
AllocateIntUserMeshBlockDataField	src/mesh/meshblock.cpp	/^void MeshBlock::AllocateIntUserMeshBlockDataField(int n) {$/;"	f	class:MeshBlock	typeref:typename:void
AllocateIntUserMeshDataField	src/mesh/mesh.cpp	/^void Mesh::AllocateIntUserMeshDataField(int n) {$/;"	f	class:Mesh	typeref:typename:void
AllocateRealUserMeshBlockDataField	src/mesh/meshblock.cpp	/^void MeshBlock::AllocateRealUserMeshBlockDataField(int n) {$/;"	f	class:MeshBlock	typeref:typename:void
AllocateRealUserMeshDataField	src/mesh/mesh.cpp	/^void Mesh::AllocateRealUserMeshDataField(int n) {$/;"	f	class:Mesh	typeref:typename:void
AllocateUserHistoryOutput	src/mesh/mesh.cpp	/^void Mesh::AllocateUserHistoryOutput(int n) {$/;"	f	class:Mesh	typeref:typename:void
AllocateUserOutputVariables	src/mesh/meshblock.cpp	/^void MeshBlock::AllocateUserOutputVariables(int n) {$/;"	f	class:MeshBlock	typeref:typename:void
AmbipolarEMF	src/field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::AmbipolarEMF(const FaceField &b, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion	typeref:typename:void
AppendOutputDataNode	src/outputs/outputs.cpp	/^void OutputType::AppendOutputDataNode(OutputData *pnew_data) {$/;"	f	class:OutputType	typeref:typename:void
ApplyKernel	src/fft/athena_fft.cpp	/^void FFTBlock::ApplyKernel(int mode) {$/;"	f	class:FFTBlock	typeref:typename:void
ApplyKernel	src/gravity/fftgravity.cpp	/^void FFTGravity::ApplyKernel(int mode) {$/;"	f	class:FFTGravity	typeref:typename:void
ApplyPhysicalBoundaries	src/bvals/bvals.cpp	/^void BoundaryValues::ApplyPhysicalBoundaries(AthenaArray<Real> &pdst,$/;"	f	class:BoundaryValues	typeref:typename:void
ApplyPhysicalBoundaries	src/bvals/bvals_grav.cpp	/^void GravityBoundaryValues::ApplyPhysicalBoundaries(void) {$/;"	f	class:GravityBoundaryValues	typeref:typename:void
ApplyPhysicalBoundaries	src/bvals/bvals_mg.cpp	/^void MGBoundaryValues::ApplyPhysicalBoundaries(void) {$/;"	f	class:MGBoundaryValues	typeref:typename:void
ApplyPrimitiveFloors	src/eos/adiabatic_hydro.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyPrimitiveFloors	src/eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyPrimitiveFloors	src/eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyPrimitiveFloors	src/eos/adiabatic_mhd.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyPrimitiveFloors	src/eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyPrimitiveFloors	src/eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyPrimitiveFloors	src/eos/isothermal_hydro.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyPrimitiveFloors	src/eos/isothermal_mhd.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState	typeref:typename:void
ApplyUserWorkBeforeOutput	src/mesh/mesh.cpp	/^void Mesh::ApplyUserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
AthenaArray	src/athena_arrays.hpp	/^AthenaArray<T>::AthenaArray()$/;"	f	class:AthenaArray
AthenaArray	src/athena_arrays.hpp	/^__attribute__((nothrow)) AthenaArray<T>::AthenaArray(const AthenaArray<T>& src) {$/;"	f	class:AthenaArray
AthenaArray	src/athena_arrays.hpp	/^class AthenaArray {$/;"	c
AthenaFFTBackward	src/fft/athena_fft.hpp	/^enum AthenaFFTDirection { AthenaFFTForward = -1, AthenaFFTBackward = 1 };$/;"	e	enum:AthenaFFTDirection
AthenaFFTComplex	src/fft/athena_fft.hpp	/^typedef Real AthenaFFTComplex[2];$/;"	t	typeref:typename:Real[2]
AthenaFFTComplex	src/fft/athena_fft.hpp	/^typedef fftw_complex AthenaFFTComplex;$/;"	t	typeref:typename:fftw_complex
AthenaFFTDirection	src/fft/athena_fft.hpp	/^enum AthenaFFTDirection { AthenaFFTForward = -1, AthenaFFTBackward = 1 };$/;"	g
AthenaFFTForward	src/fft/athena_fft.hpp	/^enum AthenaFFTDirection { AthenaFFTForward = -1, AthenaFFTBackward = 1 };$/;"	e	enum:AthenaFFTDirection
AthenaFFTIndex	src/fft/athena_fft.cpp	/^AthenaFFTIndex::AthenaFFTIndex(const AthenaFFTIndex *psrc) {$/;"	f	class:AthenaFFTIndex
AthenaFFTIndex	src/fft/athena_fft.cpp	/^AthenaFFTIndex::AthenaFFTIndex(int dim, LogicalLocation loc, RegionSize msize,$/;"	f	class:AthenaFFTIndex
AthenaFFTIndex	src/fft/athena_fft.hpp	/^class AthenaFFTIndex{$/;"	c
AthenaFFTPlan	src/fft/athena_fft.hpp	/^typedef struct AthenaFFTPlan {$/;"	s
AthenaFFTPlan	src/fft/athena_fft.hpp	/^} AthenaFFTPlan;$/;"	t	typeref:struct:AthenaFFTPlan
Athena_MPI_Tag	src/athena.hpp	/^enum Athena_MPI_Tag {TAG_HYDRO=0, TAG_FIELD=1, TAG_RAD=2, TAG_CHEM=3, TAG_HYDFLX=4,$/;"	g
AverageEMFBoundary	src/bvals/flux_correction_fc.cpp	/^void BoundaryValues::AverageEMFBoundary(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
B0	src/pgen/hb3.cpp	/^static Real beta,B0,pres;$/;"	v	typeref:typename:Real	file:
BLOCK	src/gravity/obcgravity.hpp	/^enum CylBndryDcmp {BLOCK=0, FFT_LONG=1, FFT_SHORT=2, PSI=3, SIGv=4, SIGr=5};$/;"	e	enum:CylBndryDcmp
BLOCK_BNDRY	src/bvals/bvals.hpp	/^enum BoundaryFlag {BLOCK_BNDRY=-1, BNDRY_UNDEF=0, REFLECTING_BNDRY=1, OUTFLOW_BNDRY=2,$/;"	e	enum:BoundaryFlag
BNDRY_ARRIVED	src/bvals/bvals.hpp	/^enum BoundaryStatus {BNDRY_WAITING, BNDRY_ARRIVED, BNDRY_COMPLETED};$/;"	e	enum:BoundaryStatus
BNDRY_COMPLETED	src/bvals/bvals.hpp	/^enum BoundaryStatus {BNDRY_WAITING, BNDRY_ARRIVED, BNDRY_COMPLETED};$/;"	e	enum:BoundaryStatus
BNDRY_EMFCOR	src/athena.hpp	/^                   BNDRY_MGGRAVF=4, BNDRY_FLCOR=5, BNDRY_EMFCOR=6};$/;"	e	enum:BoundaryType
BNDRY_FIELD	src/athena.hpp	/^enum BoundaryType {BNDRY_HYDRO=0, BNDRY_FIELD=1, BNDRY_GRAVITY=2, BNDRY_MGGRAV=3,$/;"	e	enum:BoundaryType
BNDRY_FLCOR	src/athena.hpp	/^                   BNDRY_MGGRAVF=4, BNDRY_FLCOR=5, BNDRY_EMFCOR=6};$/;"	e	enum:BoundaryType
BNDRY_GRAVITY	src/athena.hpp	/^enum BoundaryType {BNDRY_HYDRO=0, BNDRY_FIELD=1, BNDRY_GRAVITY=2, BNDRY_MGGRAV=3,$/;"	e	enum:BoundaryType
BNDRY_HYDRO	src/athena.hpp	/^enum BoundaryType {BNDRY_HYDRO=0, BNDRY_FIELD=1, BNDRY_GRAVITY=2, BNDRY_MGGRAV=3,$/;"	e	enum:BoundaryType
BNDRY_MGGRAV	src/athena.hpp	/^enum BoundaryType {BNDRY_HYDRO=0, BNDRY_FIELD=1, BNDRY_GRAVITY=2, BNDRY_MGGRAV=3,$/;"	e	enum:BoundaryType
BNDRY_MGGRAVF	src/athena.hpp	/^                   BNDRY_MGGRAVF=4, BNDRY_FLCOR=5, BNDRY_EMFCOR=6};$/;"	e	enum:BoundaryType
BNDRY_UNDEF	src/bvals/bvals.hpp	/^enum BoundaryFlag {BLOCK_BNDRY=-1, BNDRY_UNDEF=0, REFLECTING_BNDRY=1, OUTFLOW_BNDRY=2,$/;"	e	enum:BoundaryFlag
BNDRY_WAITING	src/bvals/bvals.hpp	/^enum BoundaryStatus {BNDRY_WAITING, BNDRY_ARRIVED, BNDRY_COMPLETED};$/;"	e	enum:BoundaryStatus
BOT	src/gravity/obcgravity.hpp	/^enum CylBoundaryFace {TOP=0, BOT=1, INN=2, OUT=3};$/;"	e	enum:CylBoundaryFace
BVALS_BVALS_GRAV_HPP_	src/bvals/bvals_grav.hpp	/^#define BVALS_BVALS_GRAV_HPP_$/;"	d
BVALS_BVALS_HPP_	src/bvals/bvals.hpp	/^#define BVALS_BVALS_HPP_$/;"	d
BVALS_BVALS_MG_HPP_	src/bvals/bvals_mg.hpp	/^#define BVALS_BVALS_MG_HPP_$/;"	d
BValFunc_t	src/athena.hpp	/^typedef void (*BValFunc_t)(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	t	typeref:typename:void (*)(MeshBlock * pmb,Coordinates * pco,AthenaArray<Real> & prim,FaceField & b,Real time,Real dt,int is,int ie,int js,int je,int ks,int ke,int ngh)
BndFFTBackward	src/gravity/obcgravity.cpp	/^void OBCGravityCar::BndFFTBackward(int first_nslow, int first_nfast, int second_nslow, int secon/;"	f	class:OBCGravityCar	typeref:typename:void
BndFFTForward	src/gravity/obcgravity.cpp	/^void OBCGravityCar::BndFFTForward(int first_nslow, int first_nfast, int second_nslow, int second/;"	f	class:OBCGravityCar	typeref:typename:void
BndryRmpPlan	src/gravity/obcgravity.hpp	/^  struct remap_plan_2d *BndryRmpPlan[4][6][6];$/;"	m	class:OBCGravityCyl	typeref:struct:remap_plan_2d * [4][6][6]
BndryRmpPlan	src/gravity/obcgravity.hpp	/^  struct remap_plan_2d *BndryRmpPlan[6][3][3];$/;"	m	class:OBCGravityCar	typeref:struct:remap_plan_2d * [6][3][3]
BoundaryBase	src/bvals/bvals.hpp	/^class BoundaryBase {$/;"	c
BoundaryBase	src/bvals/bvals_base.cpp	/^BoundaryBase::BoundaryBase(Mesh *pm, LogicalLocation iloc, RegionSize isize,$/;"	f	class:BoundaryBase
BoundaryData	src/bvals/bvals.hpp	/^typedef struct BoundaryData {$/;"	s
BoundaryData	src/bvals/bvals.hpp	/^} BoundaryData;$/;"	t	typeref:struct:BoundaryData
BoundaryFace	src/bvals/bvals.hpp	/^enum BoundaryFace {FACE_UNDEF=-1, INNER_X1=0, OUTER_X1=1, INNER_X2=2, OUTER_X2=3,$/;"	g
BoundaryFlag	src/bvals/bvals.hpp	/^enum BoundaryFlag {BLOCK_BNDRY=-1, BNDRY_UNDEF=0, REFLECTING_BNDRY=1, OUTFLOW_BNDRY=2,$/;"	g
BoundaryFunction_	src/bvals/bvals.hpp	/^  BValFunc_t BoundaryFunction_[6];$/;"	m	class:BoundaryValues	typeref:typename:BValFunc_t[6]
BoundaryFunction_	src/mesh/mesh.hpp	/^  BValFunc_t BoundaryFunction_[6];$/;"	m	class:Mesh	typeref:typename:BValFunc_t[6]
BoundaryStatus	src/bvals/bvals.hpp	/^enum BoundaryStatus {BNDRY_WAITING, BNDRY_ARRIVED, BNDRY_COMPLETED};$/;"	g
BoundaryType	src/athena.hpp	/^enum BoundaryType {BNDRY_HYDRO=0, BNDRY_FIELD=1, BNDRY_GRAVITY=2, BNDRY_MGGRAV=3,$/;"	g
BoundaryValues	src/bvals/bvals.cpp	/^BoundaryValues::BoundaryValues(MeshBlock *pmb, enum BoundaryFlag *input_bcs,$/;"	f	class:BoundaryValues
BoundaryValues	src/bvals/bvals.hpp	/^class BoundaryValues : public BoundaryBase {$/;"	c
BufferID	src/bvals/bvals_base.cpp	/^int BoundaryBase::BufferID(int dim, bool multilevel) {$/;"	f	class:BoundaryBase	typeref:typename:int
BufferUtility	src/utils/buffer_utils.cpp	/^namespace BufferUtility {$/;"	n	file:
BufferUtility	src/utils/buffer_utils.hpp	/^namespace BufferUtility {$/;"	n
C	src/gravity/obcgravity.hpp	/^enum James {C=0, S=1};$/;"	e	enum:James
CACHELINE_BYTES	src/athena.hpp	/^#define CACHELINE_BYTES /;"	d
CALC_CHMFLX	src/task_list/task_list.hpp	/^  const uint64_t CALC_CHMFLX=1LL<<5;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
CALC_DIFFUSIVITY	src/task_list/task_list.hpp	/^  const uint64_t CALC_DIFFUSIVITY=1LL<<55;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
CALC_FLDFLX	src/task_list/task_list.hpp	/^  const uint64_t CALC_FLDFLX=1LL<<3;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
CALC_HYDFLX	src/task_list/task_list.hpp	/^  const uint64_t CALC_HYDFLX=1LL<<2;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
CALC_RADFLX	src/task_list/task_list.hpp	/^  const uint64_t CALC_RADFLX=1LL<<4;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
CBLOCK	src/gravity/obcgravity.hpp	/^enum CarBndryDcmp {CBLOCK=0, FFT_FIRST=1, FFT_SECOND=2};$/;"	e	enum:CarBndryDcmp
CBOT	src/gravity/obcgravity.hpp	/^enum CarBoundaryFace {STH=0, NTH=1, WST=2, EST=3, CBOT=4, CTOP=5};$/;"	e	enum:CarBoundaryFace
CCBoundaryType	src/athena.hpp	/^enum CCBoundaryType {HYDRO_CONS=0, HYDRO_PRIM=1};$/;"	g
CE1P	src/gravity/obcgravity.hpp	/^                   CEB=8, CE1P=9, CE2P=10, CE3P=11};$/;"	e	enum:CarDecompNames
CE2P	src/gravity/obcgravity.hpp	/^                   CEB=8, CE1P=9, CE2P=10, CE3P=11};$/;"	e	enum:CarDecompNames
CE3P	src/gravity/obcgravity.hpp	/^                   CEB=8, CE1P=9, CE2P=10, CE3P=11};$/;"	e	enum:CarDecompNames
CEB	src/gravity/obcgravity.hpp	/^                   CEB=8, CE1P=9, CE2P=10, CE3P=11};$/;"	e	enum:CarDecompNames
CLEAR_ALLBND	src/task_list/task_list.hpp	/^  const uint64_t CLEAR_ALLBND=1LL<<1;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
CLEAR_GRAV	src/task_list/grav_task_list.hpp	/^  const uint64_t CLEAR_GRAV=1LL<<1;$/;"	v	namespace:GravitySolverTaskNames	typeref:typename:const uint64_t
COMPILED_WITH	src/defs.hpp	/^#define COMPILED_WITH /;"	d
COMPILED_WITH	src/defs.hpp.in	/^#define COMPILED_WITH /;"	d	file:
COMPILED_WITH_OPTIONS	src/defs.hpp	/^#define COMPILED_WITH_OPTIONS /;"	d
COMPILED_WITH_OPTIONS	src/defs.hpp.in	/^#define COMPILED_WITH_OPTIONS /;"	d	file:
COMPILER_COMMAND	src/defs.hpp	/^#define COMPILER_COMMAND /;"	d
COMPILER_COMMAND	src/defs.hpp.in	/^#define COMPILER_COMMAND /;"	d	file:
CON2PRIM	src/task_list/task_list.hpp	/^  const uint64_t CON2PRIM=1LL<<36;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
COORDINATES_COORDINATES_HPP_	src/coordinates/coordinates.hpp	/^#define COORDINATES_COORDINATES_HPP_$/;"	d
COORDINATE_SYSTEM	src/defs.hpp	/^#define COORDINATE_SYSTEM /;"	d
COORDINATE_SYSTEM	src/defs.hpp.in	/^#define COORDINATE_SYSTEM /;"	d	file:
CORR_GFLX	src/task_list/task_list.hpp	/^  const uint64_t CORR_GFLX=1LL<<44;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
CT	src/field/ct.cpp	/^void Field::CT(const Real wght, FaceField &b_out) {$/;"	f	class:Field	typeref:typename:void
CTOP	src/gravity/obcgravity.hpp	/^enum CarBoundaryFace {STH=0, NTH=1, WST=2, EST=3, CBOT=4, CTOP=5};$/;"	e	enum:CarBoundaryFace
CX1P	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
CX2P	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
CX3P	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
CXB	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
CalcBndCharge	src/gravity/obcgravity.cpp	/^void OBCGravityCar::CalcBndCharge()$/;"	f	class:OBCGravityCar	typeref:typename:void
CalcBndCharge	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::CalcBndCharge()$/;"	f	class:OBCGravityCyl	typeref:typename:void
CalcBndPot	src/gravity/obcgravity.cpp	/^void OBCGravityCar::CalcBndPot()$/;"	f	class:OBCGravityCar	typeref:typename:void
CalcBndPot	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::CalcBndPot()$/;"	f	class:OBCGravityCyl	typeref:typename:void
CalcCondCoeff_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  ConductionCoeff_t CalcCondCoeff_;$/;"	m	class:HydroDiffusion	typeref:typename:ConductionCoeff_t
CalcCurrent	src/field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::CalcCurrent(FaceField &b) {$/;"	f	class:FieldDiffusion	typeref:typename:void
CalcFieldDiffusionEMF	src/field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::CalcFieldDiffusionEMF(FaceField &bi,$/;"	f	class:FieldDiffusion	typeref:typename:void
CalcGrf	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::CalcGrf(int gip, int gkp)$/;"	f	class:OBCGravityCyl	typeref:typename:void
CalcHydroDiffusionFlux	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::CalcHydroDiffusionFlux(const AthenaArray<Real> &prim,$/;"	f	class:HydroDiffusion	typeref:typename:void
CalcMagDiffCoeff_	src/field/field_diffusion/field_diffusion.hpp	/^  FieldDiffusionCoeff_t CalcMagDiffCoeff_; \/\/ calculate magnetic diffusivities$/;"	m	class:FieldDiffusion	typeref:typename:FieldDiffusionCoeff_t
CalcViscCoeff_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  ViscosityCoeff_t CalcViscCoeff_;$/;"	m	class:HydroDiffusion	typeref:typename:ViscosityCoeff_t
CalculateBeta	src/pgen/gr_torus.cpp	/^static bool CalculateBeta(Real r_m, Real r_c, Real r_p, Real theta_m, Real theta_c,$/;"	f	typeref:typename:bool	file:
CalculateBetaFromA	src/pgen/gr_torus.cpp	/^static bool CalculateBetaFromA(Real r_m, Real r_c, Real r_p, Real theta_m, Real theta_c,$/;"	f	typeref:typename:bool	file:
CalculateBetaMin	src/pgen/gr_torus.cpp	/^static Real CalculateBetaMin() {$/;"	f	typeref:typename:Real	file:
CalculateCartesianVector	src/outputs/outputs.cpp	/^void OutputType::CalculateCartesianVector(AthenaArray<Real> &src, AthenaArray<Real> &dst,$/;"	f	class:OutputType	typeref:typename:void
CalculateCellCenteredField	src/field/field.cpp	/^void Field::CalculateCellCenteredField(const FaceField &bf, AthenaArray<Real> &bc,$/;"	f	class:Field	typeref:typename:void
CalculateDefect	src/gravity/mggravity.cpp	/^void MGGravity::CalculateDefect(void) {$/;"	f	class:MGGravity	typeref:typename:void
CalculateDefectNorm	src/multigrid/multigrid.cpp	/^Real Multigrid::CalculateDefectNorm(int n, int nrm) {$/;"	f	class:Multigrid	typeref:typename:Real
CalculateDefectNorm	src/multigrid/multigrid_driver.cpp	/^Real MultigridDriver::CalculateDefectNorm(int n, int nrm) {$/;"	f	class:MultigridDriver	typeref:typename:Real
CalculateEMF	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::CalculateEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
CalculateFluxes	src/hydro/calculate_fluxes.cpp	/^void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,$/;"	f	class:Hydro	typeref:typename:void
CalculateFluxes	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::CalculateFluxes(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
CalculateFromTable	src/pgen/gr_mhd_inflow.cpp	/^static void CalculateFromTable(Real r, Real theta, Real *prho, Real *put, Real *pur,$/;"	f	typeref:typename:void	file:
CalculateGravityFlux	src/hydro/gravity_fluxes.cpp	/^void Hydro::CalculateGravityFlux(AthenaArray<Real> &phi_in) {$/;"	f	class:Hydro	typeref:typename:void
CalculateLFromRPeak	src/pgen/gr_torus.cpp	/^static Real CalculateLFromRPeak(Real r) {$/;"	f	typeref:typename:Real	file:
CalculateMagneticPressure	src/pgen/gr_torus.cpp	/^static Real CalculateMagneticPressure(Real bb1, Real bb2, Real bb3, Real r, Real theta,$/;"	f	typeref:typename:Real	file:
CalculateNormalConserved	src/eos/adiabatic_mhd_gr.cpp	/^static void CalculateNormalConserved(const AthenaArray<Real> &cons,$/;"	f	typeref:typename:void	file:
CalculatePrimitives	src/pgen/gr_bondi.cpp	/^static void CalculatePrimitives(Real r, Real temp_min, Real temp_max, Real *prho,$/;"	f	typeref:typename:void	file:
CalculateRPeakFromL	src/pgen/gr_torus.cpp	/^static Real CalculateRPeakFromL(Real l_target) {$/;"	f	typeref:typename:Real	file:
CalculateTotal	src/multigrid/multigrid.cpp	/^Real Multigrid::CalculateTotal(int type, int n) {$/;"	f	class:Multigrid	typeref:typename:Real
CalculateTransformation	src/coordinates/gr_user.cpp	/^static void CalculateTransformation(const AthenaArray<Real> &g,$/;"	f	typeref:typename:void	file:
CalculateVelocityInTiltedTorus	src/pgen/gr_torus.cpp	/^static void CalculateVelocityInTiltedTorus(Real r, Real theta, Real phi, Real *pu0,$/;"	f	typeref:typename:void	file:
CalculateVelocityInTorus	src/pgen/gr_torus.cpp	/^static void CalculateVelocityInTorus(Real r, Real sin_theta, Real *pu0, Real *pu3) {$/;"	f	typeref:typename:void	file:
CancelWallTimeAlarm	src/utils/signal_handler.cpp	/^void CancelWallTimeAlarm(void) {$/;"	f	namespace:SignalHandler	typeref:typename:void
CarBndryDcmp	src/gravity/obcgravity.hpp	/^enum CarBndryDcmp {CBLOCK=0, FFT_FIRST=1, FFT_SECOND=2};$/;"	g
CarBoundaryFace	src/gravity/obcgravity.hpp	/^enum CarBoundaryFace {STH=0, NTH=1, WST=2, EST=3, CBOT=4, CTOP=5};$/;"	g
CarDecompNames	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	g
Cartesian	src/coordinates/cartesian.cpp	/^Cartesian::Cartesian(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Cartesian
Cartesian	src/coordinates/coordinates.hpp	/^class Cartesian : public Coordinates {$/;"	c
CellMetric	src/coordinates/coordinates.hpp	/^  virtual void CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
CellMetric	src/coordinates/gr_user.cpp	/^void GRUser::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
CellMetric	src/coordinates/kerr-schild.cpp	/^void KerrSchild::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
CellMetric	src/coordinates/minkowski.cpp	/^void Minkowski::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
CellMetric	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
CellVolume	src/coordinates/coordinates.cpp	/^void Coordinates::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
CellVolume	src/coordinates/cylindrical.cpp	/^void Cylindrical::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
CellVolume	src/coordinates/gr_user.cpp	/^void GRUser::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
CellVolume	src/coordinates/kerr-schild.cpp	/^void KerrSchild::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
CellVolume	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
CellVolume	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
CenterWidth1	src/coordinates/coordinates.cpp	/^void Coordinates::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
CenterWidth1	src/coordinates/gr_user.cpp	/^void GRUser::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
CenterWidth1	src/coordinates/kerr-schild.cpp	/^void KerrSchild::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
CenterWidth1	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
CenterWidth2	src/coordinates/coordinates.cpp	/^void Coordinates::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
CenterWidth2	src/coordinates/cylindrical.cpp	/^void Cylindrical::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
CenterWidth2	src/coordinates/gr_user.cpp	/^void GRUser::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
CenterWidth2	src/coordinates/kerr-schild.cpp	/^void KerrSchild::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
CenterWidth2	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
CenterWidth2	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
CenterWidth3	src/coordinates/coordinates.cpp	/^void Coordinates::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
CenterWidth3	src/coordinates/gr_user.cpp	/^void GRUser::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
CenterWidth3	src/coordinates/kerr-schild.cpp	/^void KerrSchild::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
CenterWidth3	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
CenterWidth3	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
ChangeRunDir	src/utils/change_rundir.cpp	/^void ChangeRunDir(const char *pdir) {$/;"	f	typeref:typename:void
CheckBoundary	src/bvals/bvals.cpp	/^void BoundaryValues::CheckBoundary(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
CheckRefinement	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::CheckRefinement(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
CheckRefinementCondition	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::CheckRefinementCondition(void) {$/;"	f	class:MeshRefinement	typeref:typename:void
CheckSignalFlags	src/utils/signal_handler.cpp	/^int CheckSignalFlags(void) {$/;"	f	namespace:SignalHandler	typeref:typename:int
ClearAllBoundary	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::ClearAllBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
ClearBoundary	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::ClearBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
ClearBoundaryAll	src/bvals/bvals.cpp	/^void BoundaryValues::ClearBoundaryAll(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
ClearBoundaryFace	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::ClearBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
ClearBoundaryForInit	src/bvals/bvals.cpp	/^void BoundaryValues::ClearBoundaryForInit(bool cons_and_field) {$/;"	f	class:BoundaryValues	typeref:typename:void
ClearBoundaryGravity	src/bvals/bvals_grav.cpp	/^void GravityBoundaryValues::ClearBoundaryGravity(void) {$/;"	f	class:GravityBoundaryValues	typeref:typename:void
ClearBoundaryMultigrid	src/bvals/bvals_mg.cpp	/^void MGBoundaryValues::ClearBoundaryMultigrid(enum BoundaryType type) {$/;"	f	class:MGBoundaryValues	typeref:typename:void
ClearCoarseEMFBoundary	src/bvals/flux_correction_fc.cpp	/^void BoundaryValues::ClearCoarseEMFBoundary(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
ClearEMF	src/field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::ClearEMF(EdgeField &e) {$/;"	f	class:FieldDiffusion	typeref:typename:void
ClearEMFShearing	src/bvals/bvals_emf.cpp	/^void BoundaryValues::ClearEMFShearing(EdgeField &work) {$/;"	f	class:BoundaryValues	typeref:typename:void
ClearGravityBoundary	src/task_list/grav_task_list.cpp	/^enum TaskStatus GravitySolverTaskList::ClearGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:GravitySolverTaskList	typeref:enum:TaskStatus
ClearHydroFlux	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::ClearHydroFlux(AthenaArray<Real> *flux) {$/;"	f	class:HydroDiffusion	typeref:typename:void
ClearOutputData	src/outputs/outputs.cpp	/^void OutputType::ClearOutputData() {$/;"	f	class:OutputType	typeref:typename:void
ClearTaskList	src/task_list/mg_task_list.hpp	/^  void ClearTaskList(void) {ntasks=0;}$/;"	f	class:MultigridTaskList	typeref:typename:void
Close	src/outputs/io_wrapper.cpp	/^int IOWrapper::Close(void) {$/;"	f	class:IOWrapper	typeref:typename:int
ComputeCornerE	src/field/calculate_corner_e.cpp	/^void Field::ComputeCornerE(AthenaArray<Real> &w, AthenaArray<Real> &bcc) {$/;"	f	class:Field	typeref:typename:void
ComputeMeshGeneratorX	src/mesh/mesh.hpp	/^inline Real ComputeMeshGeneratorX(int64_t index, int64_t nrange, bool sym_interval) {$/;"	f	typeref:typename:Real
ConductionCoeff_	src/mesh/mesh.hpp	/^  ConductionCoeff_t ConductionCoeff_;$/;"	m	class:Mesh	typeref:typename:ConductionCoeff_t
ConductionCoeff_t	src/athena.hpp	/^typedef void (*ConductionCoeff_t)(HydroDiffusion *phdif, MeshBlock *pmb,$/;"	t	typeref:typename:void (*)(HydroDiffusion * phdif,MeshBlock * pmb,const AthenaArray<Real> & w,const AthenaArray<Real> & bc,int is,int ie,int js,int je,int ks,int ke)
Cons1D	src/hydro/rsolvers/mhd/hlld.cpp	/^typedef struct Cons1D {$/;"	s	file:
Cons1D	src/hydro/rsolvers/mhd/hlld.cpp	/^} Cons1D;$/;"	t	typeref:struct:Cons1D	file:
Cons1D	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^typedef struct Cons1D {$/;"	s	file:
Cons1D	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^} Cons1D;$/;"	t	typeref:struct:Cons1D	file:
ConservedToPrimitive	src/eos/adiabatic_hydro.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitive	src/eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitive	src/eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitive	src/eos/adiabatic_mhd.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitive	src/eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitive	src/eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitive	src/eos/isothermal_hydro.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitive	src/eos/isothermal_mhd.cpp	/^void EquationOfState::ConservedToPrimitive(AthenaArray<Real> &cons,$/;"	f	class:EquationOfState	typeref:typename:void
ConservedToPrimitiveNormal	src/eos/adiabatic_mhd_gr.cpp	/^static bool ConservedToPrimitiveNormal(const AthenaArray<Real> &dd_vals,$/;"	f	typeref:typename:bool	file:
ConstConduction	src/hydro/hydro_diffusion/conduction.cpp	/^void ConstConduction(HydroDiffusion *phdif, MeshBlock *pmb, const AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ConstDiffusivity	src/field/field_diffusion/diffusivity.cpp	/^void ConstDiffusivity(FieldDiffusion *pfdif, MeshBlock *pmb, const AthenaArray<Real> &w,$/;"	f	typeref:typename:void
ConstViscosity	src/hydro/hydro_diffusion/viscosity.cpp	/^void ConstViscosity(HydroDiffusion *phdif, MeshBlock *pmb, const AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ConstantAcceleration	src/hydro/srcterms/constant_acc.cpp	/^void HydroSourceTerms::ConstantAcceleration(const Real dt,const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms	typeref:typename:void
CoordSrcTerms	src/coordinates/coordinates.cpp	/^void Coordinates::CoordSrcTerms(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:Coordinates	typeref:typename:void
CoordSrcTerms	src/coordinates/cylindrical.cpp	/^void Cylindrical::CoordSrcTerms(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:Cylindrical	typeref:typename:void
CoordSrcTerms	src/coordinates/gr_user.cpp	/^void GRUser::CoordSrcTerms(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:GRUser	typeref:typename:void
CoordSrcTerms	src/coordinates/kerr-schild.cpp	/^void KerrSchild::CoordSrcTerms(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:KerrSchild	typeref:typename:void
CoordSrcTerms	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::CoordSrcTerms(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:Schwarzschild	typeref:typename:void
CoordSrcTerms	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::CoordSrcTerms(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:SphericalPolar	typeref:typename:void
CoordinateDirection	src/athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	g
Coordinates	src/coordinates/coordinates.cpp	/^Coordinates::Coordinates(MeshBlock *pmb, ParameterInput *pin, bool flag) {$/;"	f	class:Coordinates
Coordinates	src/coordinates/coordinates.hpp	/^class Coordinates {$/;"	c
CorrectGravityFlux	src/hydro/gravity_fluxes.cpp	/^void Hydro::CorrectGravityFlux(void) {$/;"	f	class:Hydro	typeref:typename:void
CountMeshBlock	src/mesh/meshblock_tree.cpp	/^void MeshBlockTree::CountMeshBlock(int& count) {$/;"	f	class:MeshBlockTree	typeref:typename:void
CreateAMRMPITag	src/mesh/mesh.cpp	/^unsigned int Mesh::CreateAMRMPITag(int lid, int ox1, int ox2, int ox3) {$/;"	f	class:Mesh	typeref:typename:unsigned int
CreateBufferID	src/bvals/bvals_base.cpp	/^unsigned int BoundaryBase::CreateBufferID(int ox1, int ox2, int ox3,$/;"	f	class:BoundaryBase	typeref:typename:unsigned int
CreateBvalsMPITag	src/bvals/bvals_base.cpp	/^unsigned int BoundaryBase::CreateBvalsMPITag(int lid, int phys, int bufid) {$/;"	f	class:BoundaryBase	typeref:typename:unsigned int
CreatePlan	src/fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::CreatePlan(int nfast, AthenaFFTComplex *data,$/;"	f	class:FFTBlock	typeref:typename:AthenaFFTPlan *
CreatePlan	src/fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::CreatePlan(int nfast, int nmid, int nslow,$/;"	f	class:FFTBlock	typeref:typename:AthenaFFTPlan *
CreatePlan	src/fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::CreatePlan(int nfast, int nslow,$/;"	f	class:FFTBlock	typeref:typename:AthenaFFTPlan *
CreateRootGrid	src/mesh/meshblock_tree.cpp	/^void MeshBlockTree::CreateRootGrid(int64_t nx, int64_t ny, int64_t nz, int nl) {$/;"	f	class:MeshBlockTree	typeref:typename:void
CubicRootReal	src/pgen/gr_linear_wave.cpp	/^static Real CubicRootReal(Real a2, Real a1, Real a0) {$/;"	f	typeref:typename:Real	file:
CylBndryDcmp	src/gravity/obcgravity.hpp	/^enum CylBndryDcmp {BLOCK=0, FFT_LONG=1, FFT_SHORT=2, PSI=3, SIGv=4, SIGr=5};$/;"	g
CylBoundaryFace	src/gravity/obcgravity.hpp	/^enum CylBoundaryFace {TOP=0, BOT=1, INN=2, OUT=3};$/;"	g
CylDecompNames	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	g
Cylindrical	src/coordinates/coordinates.hpp	/^class Cylindrical : public Coordinates {$/;"	c
Cylindrical	src/coordinates/cylindrical.cpp	/^Cylindrical::Cylindrical(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Cylindrical
DEFS_HPP_	src/defs.hpp	/^#define DEFS_HPP_$/;"	d
DEFS_HPP_	src/defs.hpp.in	/^#define DEFS_HPP_$/;"	d	file:
DIFFUSE_FLD	src/task_list/task_list.hpp	/^  const uint64_t DIFFUSE_FLD=1LL<<54;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
DIFFUSE_HYD	src/task_list/task_list.hpp	/^  const uint64_t DIFFUSE_HYD=1LL<<53;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
DMRInnerX1	src/pgen/dmr.cpp	/^void DMRInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DMRInnerX2	src/pgen/dmr.cpp	/^void DMRInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DMROuterX2	src/pgen/dmr.cpp	/^void DMROuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DecompositionNames	src/fft/athena_fft.hpp	/^namespace DecompositionNames{$/;"	n
DefaultMeshGeneratorX1	src/mesh/mesh.hpp	/^inline Real DefaultMeshGeneratorX1(Real x, RegionSize rs) {$/;"	f	typeref:typename:Real
DefaultMeshGeneratorX2	src/mesh/mesh.hpp	/^inline Real DefaultMeshGeneratorX2(Real x, RegionSize rs) {$/;"	f	typeref:typename:Real
DefaultMeshGeneratorX3	src/mesh/mesh.hpp	/^inline Real DefaultMeshGeneratorX3(Real x, RegionSize rs) {$/;"	f	typeref:typename:Real
DeleteAthenaArray	src/athena_arrays.hpp	/^void AthenaArray<T>::DeleteAthenaArray() {$/;"	f	class:AthenaArray	typeref:typename:void
DenProfileCyl	src/pgen/disk.cpp	/^static Real DenProfileCyl(const Real rad, const Real phi, const Real z) {$/;"	f	typeref:typename:Real	file:
Derefine	src/mesh/meshblock_tree.cpp	/^void MeshBlockTree::Derefine(MeshBlockTree& root, int dim, enum BoundaryFlag* mesh_bcs,$/;"	f	class:MeshBlockTree	typeref:typename:void
DestroyBoundaryData	src/bvals/bvals.cpp	/^void BoundaryValues::DestroyBoundaryData(BoundaryData &bd) {$/;"	f	class:BoundaryValues	typeref:typename:void
DestroyBoundaryData	src/bvals/bvals_grav.cpp	/^void GravityBoundaryValues::DestroyBoundaryData(GravityBoundaryData &bd) {$/;"	f	class:GravityBoundaryValues	typeref:typename:void
DestroyBoundaryData	src/bvals/bvals_mg.cpp	/^void MGBoundaryValues::DestroyBoundaryData(MGBoundaryData &bd) {$/;"	f	class:MGBoundaryValues	typeref:typename:void
DestroyPlan	src/fft/athena_fft.cpp	/^void FFTBlock::DestroyPlan(AthenaFFTPlan *plan) {$/;"	f	class:FFTBlock	typeref:typename:void
Determinant	src/coordinates/gr_user.cpp	/^static Real Determinant(Real a11, Real a12, Real a13, Real a21, Real a22, Real a23,$/;"	f	typeref:typename:Real	file:
Determinant	src/coordinates/gr_user.cpp	/^static Real Determinant(Real a11, Real a12, Real a21, Real a22) {$/;"	f	typeref:typename:Real	file:
Determinant	src/coordinates/gr_user.cpp	/^static Real Determinant(const AthenaArray<Real> &g) {$/;"	f	typeref:typename:Real	file:
DiskInnerX1	src/pgen/disk.cpp	/^void DiskInnerX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskInnerX1	src/pgen/torus.cpp	/^void DiskInnerX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskInnerX2	src/pgen/disk.cpp	/^void DiskInnerX2(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskInnerX3	src/pgen/disk.cpp	/^void DiskInnerX3(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskInnerX3	src/pgen/torus.cpp	/^void DiskInnerX3(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskOuterX1	src/pgen/disk.cpp	/^void DiskOuterX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskOuterX1	src/pgen/torus.cpp	/^void DiskOuterX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskOuterX2	src/pgen/disk.cpp	/^void DiskOuterX2(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskOuterX3	src/pgen/disk.cpp	/^void DiskOuterX3(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DiskOuterX3	src/pgen/torus.cpp	/^void DiskOuterX3(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
DistanceBetweenPoints	src/pgen/gr_blast.cpp	/^static Real DistanceBetweenPoints(Real x1, Real x2, Real x3, Real y1, Real y2, Real y3) {$/;"	f	typeref:typename:Real	file:
Divv	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::Divv(const AthenaArray<Real> &prim, AthenaArray<Real> &divv) {$/;"	f	class:HydroDiffusion	typeref:typename:void
DoAllAvailableTasks	src/task_list/mg_task_list.cpp	/^enum TaskListStatus MultigridTaskList::DoAllAvailableTasks(Multigrid *pmg,$/;"	f	class:MultigridTaskList	typeref:enum:TaskListStatus
DoAllAvailableTasks	src/task_list/task_list.cpp	/^enum TaskListStatus TaskList::DoAllAvailableTasks(MeshBlock *pmb, int stage,$/;"	f	class:TaskList	typeref:enum:TaskListStatus
DoTaskListOneStage	src/task_list/mg_task_list.cpp	/^void MultigridTaskList::DoTaskListOneStage(MultigridDriver *pmd) {$/;"	f	class:MultigridTaskList	typeref:typename:void
DoTaskListOneStage	src/task_list/task_list.cpp	/^void TaskList::DoTaskListOneStage(Mesh *pmesh, int stage) {$/;"	f	class:TaskList	typeref:typename:void
DoesParameterExist	src/parameter_input.cpp	/^int ParameterInput::DoesParameterExist(std::string block, std::string name) {$/;"	f	class:ParameterInput	typeref:typename:int
DomainDecomp	src/gravity/obcgravity.hpp	/^typedef struct DomainDecomp {$/;"	s
DomainDecomp	src/gravity/obcgravity.hpp	/^} DomainDecomp;$/;"	t	typeref:struct:DomainDecomp
DonorCellX1	src/reconstruct/dc.cpp	/^void Reconstruction::DonorCellX1(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
DonorCellX2	src/reconstruct/dc.cpp	/^void Reconstruction::DonorCellX2(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
DonorCellX3	src/reconstruct/dc.cpp	/^void Reconstruction::DonorCellX3(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
Driving	src/fft/turbulence.cpp	/^void TurbulenceDriver::Driving(void) {$/;"	f	class:TurbulenceDriver	typeref:typename:void
E1P	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
E2P	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
E2P0	src/gravity/obcgravity.hpp	/^                   E2P0=8, Gii=9, Gik=10, Gki=11, Gkk=12, EB=13, Gii2P=14,$/;"	e	enum:CylDecompNames
E3P	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
EB	src/gravity/obcgravity.hpp	/^                   E2P0=8, Gii=9, Gik=10, Gki=11, Gkk=12, EB=13, Gii2P=14,$/;"	e	enum:CylDecompNames
EMFCorrectReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::EMFCorrectReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
EMFCorrectSend	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::EMFCorrectSend(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
EMFShearReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::EMFShearReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
EMFShearRemap	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::EMFShearRemap(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
EMFShearSend	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::EMFShearSend(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
EOS_EOS_HPP_	src/eos/eos.hpp	/^#define EOS_EOS_HPP_$/;"	d
EResidual	src/eos/adiabatic_mhd_sr.cpp	/^static Real EResidual(Real w_guess, Real dd, Real ee, Real m_sq, Real bb_sq, Real ss_sq,$/;"	f	typeref:typename:Real	file:
EResidual	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^static Real EResidual(Real w_guess, Real dd, Real ee, Real m_sq, Real bb_sq, Real ss_sq,$/;"	f	typeref:typename:Real	file:
EResidualPrime	src/eos/adiabatic_mhd_sr.cpp	/^static Real EResidualPrime(Real w_guess, Real dd, Real m_sq, Real bb_sq, Real ss_sq,$/;"	f	typeref:typename:Real	file:
EResidualPrime	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^static Real EResidualPrime(Real w_guess, Real dd, Real m_sq, Real bb_sq, Real ss_sq,$/;"	f	typeref:typename:Real	file:
EST	src/gravity/obcgravity.hpp	/^enum CarBoundaryFace {STH=0, NTH=1, WST=2, EST=3, CBOT=4, CTOP=5};$/;"	e	enum:CarBoundaryFace
Edge1Length	src/coordinates/coordinates.cpp	/^void Coordinates::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Edge1Length	src/coordinates/gr_user.cpp	/^void GRUser::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Edge1Length	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Edge1Length	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Edge2Length	src/coordinates/coordinates.cpp	/^void Coordinates::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Edge2Length	src/coordinates/cylindrical.cpp	/^void Cylindrical::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
Edge2Length	src/coordinates/gr_user.cpp	/^void GRUser::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Edge2Length	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Edge2Length	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Edge2Length	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
Edge3Length	src/coordinates/coordinates.cpp	/^void Coordinates::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Edge3Length	src/coordinates/gr_user.cpp	/^void GRUser::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Edge3Length	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Edge3Length	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Edge3Length	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
EdgeField	src/athena.hpp	/^typedef struct EdgeField {$/;"	s
EdgeField	src/athena.hpp	/^} EdgeField;$/;"	t	typeref:struct:EdgeField
Eigensystem	src/pgen/linear_wave.cpp	/^static void Eigensystem(const Real d, const Real v1, const Real v2, const Real v3,$/;"	f	typeref:typename:void	file:
EndReading	src/parameter_input.cpp	/^void ParameterInput::EndReading(void) {$/;"	f	class:ParameterInput	typeref:typename:void
EndWriting	src/parameter_input.cpp	/^void ParameterInput::EndWriting(void) {$/;"	f	class:ParameterInput	typeref:typename:void
EnrollConductionCoefficient	src/mesh/mesh.cpp	/^void Mesh::EnrollConductionCoefficient(ConductionCoeff_t my_func) {$/;"	f	class:Mesh	typeref:typename:void
EnrollFieldDiffusivity	src/mesh/mesh.cpp	/^void Mesh::EnrollFieldDiffusivity(FieldDiffusionCoeff_t my_func) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserBoundaryFunction	src/mesh/mesh.cpp	/^void Mesh::EnrollUserBoundaryFunction(enum BoundaryFace dir, BValFunc_t my_bc) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserExplicitSourceFunction	src/mesh/mesh.cpp	/^void Mesh::EnrollUserExplicitSourceFunction(SrcTermFunc_t my_func) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserHistoryOutput	src/mesh/mesh.cpp	/^void Mesh::EnrollUserHistoryOutput(int i, HistoryOutputFunc_t my_func, const char *name) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserMGBoundaryFunction	src/mesh/mesh.cpp	/^void Mesh::EnrollUserMGBoundaryFunction(enum BoundaryFace dir, MGBoundaryFunc_t my_bc) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserMeshGenerator	src/mesh/mesh.cpp	/^void Mesh::EnrollUserMeshGenerator(enum CoordinateDirection dir, MeshGenFunc_t my_mg) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserMetric	src/mesh/mesh.cpp	/^void Mesh::EnrollUserMetric(MetricFunc_t my_func) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserRefinementCondition	src/mesh/mesh.cpp	/^void Mesh::EnrollUserRefinementCondition(AMRFlagFunc_t amrflag) {$/;"	f	class:Mesh	typeref:typename:void
EnrollUserTimeStepFunction	src/mesh/mesh.cpp	/^void Mesh::EnrollUserTimeStepFunction(TimeStepFunc_t my_func) {$/;"	f	class:Mesh	typeref:typename:void
EnrollViscosityCoefficient	src/mesh/mesh.cpp	/^void Mesh::EnrollViscosityCoefficient(ViscosityCoeff_t my_func) {$/;"	f	class:Mesh	typeref:typename:void
EquationOfState	src/eos/adiabatic_hydro.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
EquationOfState	src/eos/adiabatic_hydro_gr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
EquationOfState	src/eos/adiabatic_hydro_sr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
EquationOfState	src/eos/adiabatic_mhd.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
EquationOfState	src/eos/adiabatic_mhd_gr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
EquationOfState	src/eos/adiabatic_mhd_sr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
EquationOfState	src/eos/eos.hpp	/^class EquationOfState {$/;"	c
EquationOfState	src/eos/isothermal_hydro.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
EquationOfState	src/eos/isothermal_mhd.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:EquationOfState
Execute	src/fft/athena_fft.cpp	/^void FFTBlock::Execute(AthenaFFTPlan *plan) {$/;"	f	class:FFTBlock	typeref:typename:void
Execute	src/fft/athena_fft.cpp	/^void FFTBlock::Execute(AthenaFFTPlan *plan, AthenaFFTComplex *data) {$/;"	f	class:FFTBlock	typeref:typename:void
Execute	src/fft/athena_fft.cpp	/^void FFTBlock::Execute(AthenaFFTPlan *plan, AthenaFFTComplex *in_data,$/;"	f	class:FFTBlock	typeref:typename:void
ExecuteBackward	src/fft/athena_fft.hpp	/^  void ExecuteBackward(void) {Execute(bplan_);}$/;"	f	class:FFTBlock	typeref:typename:void
ExecuteForward	src/fft/athena_fft.hpp	/^  void ExecuteForward(void) {Execute(fplan_);}$/;"	f	class:FFTBlock	typeref:typename:void
ExternalGravity	src/pgen/torus.cpp	/^void ExternalGravity(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	typeref:typename:void
FACE_UNDEF	src/bvals/bvals.hpp	/^enum BoundaryFace {FACE_UNDEF=-1, INNER_X1=0, OUTER_X1=1, INNER_X2=2, OUTER_X2=3,$/;"	e	enum:BoundaryFace
FFT	src/defs.hpp	/^#define FFT$/;"	d
FFTBlock	src/fft/athena_fft.cpp	/^FFTBlock::FFTBlock(FFTDriver *pfd, LogicalLocation iloc, int igid,$/;"	f	class:FFTBlock
FFTBlock	src/fft/athena_fft.hpp	/^class FFTBlock {$/;"	c
FFTDriver	src/fft/athena_fft.hpp	/^class FFTDriver {$/;"	c
FFTDriver	src/fft/fft_driver.cpp	/^FFTDriver::FFTDriver(Mesh *pm, ParameterInput *pin) {$/;"	f	class:FFTDriver
FFTGravity	src/gravity/fftgravity.hpp	/^  FFTGravity(FFTDriver *pfd, LogicalLocation iloc, int igid,$/;"	f	class:FFTGravity
FFTGravity	src/gravity/fftgravity.hpp	/^class FFTGravity : public FFTBlock {$/;"	c
FFTGravityDriver	src/gravity/fftgravity.cpp	/^FFTGravityDriver::FFTGravityDriver(Mesh *pm, ParameterInput *pin)$/;"	f	class:FFTGravityDriver
FFTGravityDriver	src/gravity/fftgravity.hpp	/^class FFTGravityDriver : public FFTDriver{$/;"	c
FFT_ATHENA_FFT_HPP_	src/fft/athena_fft.hpp	/^#define FFT_ATHENA_FFT_HPP_$/;"	d
FFT_DATA	src/fft/plimpton/fft_2d.h	/^typedef fftw_complex FFT_DATA;$/;"	t	typeref:typename:fftw_complex
FFT_DATA	src/fft/plimpton/fft_3d.h	/^typedef fftw_complex FFT_DATA;$/;"	t	typeref:typename:fftw_complex
FFT_ENABLED	src/defs.hpp	/^#define FFT_ENABLED /;"	d
FFT_ENABLED	src/defs.hpp.in	/^#define FFT_ENABLED /;"	d	file:
FFT_FIRST	src/gravity/obcgravity.hpp	/^enum CarBndryDcmp {CBLOCK=0, FFT_FIRST=1, FFT_SECOND=2};$/;"	e	enum:CarBndryDcmp
FFT_LONG	src/gravity/obcgravity.hpp	/^enum CylBndryDcmp {BLOCK=0, FFT_LONG=1, FFT_SHORT=2, PSI=3, SIGv=4, SIGr=5};$/;"	e	enum:CylBndryDcmp
FFT_PRECISION	src/fft/plimpton/fft_2d.h	/^#define FFT_PRECISION /;"	d
FFT_PRECISION	src/fft/plimpton/fft_3d.h	/^#define FFT_PRECISION /;"	d
FFT_SECOND	src/gravity/obcgravity.hpp	/^enum CarBndryDcmp {CBLOCK=0, FFT_FIRST=1, FFT_SECOND=2};$/;"	e	enum:CarBndryDcmp
FFT_SHORT	src/gravity/obcgravity.hpp	/^enum CylBndryDcmp {BLOCK=0, FFT_LONG=1, FFT_SHORT=2, PSI=3, SIGv=4, SIGr=5};$/;"	e	enum:CylBndryDcmp
FFT_TURBULENCE_HPP_	src/fft/turbulence.hpp	/^#define FFT_TURBULENCE_HPP_$/;"	d
FIELD_FIELD_DIFFUSION_FIELD_DIFFUSION_HPP_	src/field/field_diffusion/field_diffusion.hpp	/^#define FIELD_FIELD_DIFFUSION_FIELD_DIFFUSION_HPP_$/;"	d
FIELD_FIELD_HPP_	src/field/field.hpp	/^#define FIELD_FIELD_HPP_$/;"	d
FLUX_HYDRO	src/athena.hpp	/^enum FluxCorrectionType {FLUX_HYDRO=0};$/;"	e	enum:FluxCorrectionType
FMGProlongate	src/multigrid/multigrid.cpp	/^void Multigrid::FMGProlongate(void) {$/;"	f	class:Multigrid	typeref:typename:void
FMGProlongate	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::FMGProlongate(void) {$/;"	f	class:MultigridDriver	typeref:typename:void
FMGProlongate	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::FMGProlongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
FRAME_TRANSFORMATIONS	src/defs.hpp	/^#define FRAME_TRANSFORMATIONS /;"	d
FRAME_TRANSFORMATIONS	src/defs.hpp.in	/^#define FRAME_TRANSFORMATIONS /;"	d	file:
Face1Area	src/coordinates/coordinates.cpp	/^void Coordinates::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Face1Area	src/coordinates/cylindrical.cpp	/^void Cylindrical::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
Face1Area	src/coordinates/gr_user.cpp	/^void GRUser::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Face1Area	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Face1Area	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Face1Area	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
Face1Metric	src/coordinates/coordinates.hpp	/^  virtual void Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Face1Metric	src/coordinates/gr_user.cpp	/^void GRUser::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Face1Metric	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Face1Metric	src/coordinates/minkowski.cpp	/^void Minkowski::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
Face1Metric	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Face2Area	src/coordinates/coordinates.cpp	/^void Coordinates::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Face2Area	src/coordinates/gr_user.cpp	/^void GRUser::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Face2Area	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Face2Area	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Face2Area	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
Face2Metric	src/coordinates/coordinates.hpp	/^  virtual void Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Face2Metric	src/coordinates/gr_user.cpp	/^void GRUser::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Face2Metric	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Face2Metric	src/coordinates/minkowski.cpp	/^void Minkowski::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
Face2Metric	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Face3Area	src/coordinates/coordinates.cpp	/^void Coordinates::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Face3Area	src/coordinates/cylindrical.cpp	/^void Cylindrical::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
Face3Area	src/coordinates/gr_user.cpp	/^void GRUser::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Face3Area	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Face3Area	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
Face3Area	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar	typeref:typename:void
Face3Metric	src/coordinates/coordinates.hpp	/^  virtual void Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
Face3Metric	src/coordinates/gr_user.cpp	/^void GRUser::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
Face3Metric	src/coordinates/kerr-schild.cpp	/^void KerrSchild::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
Face3Metric	src/coordinates/minkowski.cpp	/^void Minkowski::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
Face3Metric	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
FaceField	src/athena.hpp	/^typedef struct FaceField {$/;"	s
FaceField	src/athena.hpp	/^} FaceField;$/;"	t	typeref:struct:FaceField
FaceXdx	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceXdx(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceXdy	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceXdy(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceXdz	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceXdz(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceYdx	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceYdx(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceYdy	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceYdy(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceYdz	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceYdz(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceZdx	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceZdx(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceZdy	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceZdy(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FaceZdz	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceZdz(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion	typeref:typename:void
FastMagnetosonicSpeed	src/eos/adiabatic_mhd.cpp	/^Real EquationOfState::FastMagnetosonicSpeed(const Real prim[(NWAVE)], const Real bx) {$/;"	f	class:EquationOfState	typeref:typename:Real
FastMagnetosonicSpeed	src/eos/eos.hpp	/^      Real FastMagnetosonicSpeed(const Real[], const Real) {return 0.0;}$/;"	f	class:EquationOfState	typeref:typename:Real
FastMagnetosonicSpeed	src/eos/eos.hpp	/^    Real FastMagnetosonicSpeed(const Real[], const Real) {return 0.0;}$/;"	f	class:EquationOfState	typeref:typename:Real
FastMagnetosonicSpeed	src/eos/isothermal_mhd.cpp	/^Real EquationOfState::FastMagnetosonicSpeed(const Real prim[(NWAVE)], const Real bx) {$/;"	f	class:EquationOfState	typeref:typename:Real
FastMagnetosonicSpeedsGR	src/eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::FastMagnetosonicSpeedsGR(Real rho_h, Real pgas, Real u0, Real u1,$/;"	f	class:EquationOfState	typeref:typename:void
FastMagnetosonicSpeedsGR	src/eos/eos.hpp	/^      void FastMagnetosonicSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real,$/;"	f	class:EquationOfState	typeref:typename:void
FastMagnetosonicSpeedsGR	src/eos/eos.hpp	/^    void FastMagnetosonicSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real, Real *,$/;"	f	class:EquationOfState	typeref:typename:void
FastMagnetosonicSpeedsGR	src/eos/eos.hpp	/^    void FastMagnetosonicSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real,$/;"	f	class:EquationOfState	typeref:typename:void
FastMagnetosonicSpeedsSR	src/eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::FastMagnetosonicSpeedsSR(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
FastMagnetosonicSpeedsSR	src/eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::FastMagnetosonicSpeedsSR(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
FastMagnetosonicSpeedsSR	src/eos/eos.hpp	/^      void FastMagnetosonicSpeedsSR(const AthenaArray<Real> &,$/;"	f	class:EquationOfState	typeref:typename:void
FastMagnetosonicSpeedsSR	src/eos/eos.hpp	/^    void FastMagnetosonicSpeedsSR(const AthenaArray<Real> &,$/;"	f	class:EquationOfState	typeref:typename:void
Field	src/field/field.cpp	/^Field::Field(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:Field
Field	src/field/field.hpp	/^class Field {$/;"	c
FieldDiffusion	src/field/field_diffusion/field_diffusion.cpp	/^FieldDiffusion::FieldDiffusion(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:FieldDiffusion
FieldDiffusion	src/field/field_diffusion/field_diffusion.hpp	/^class FieldDiffusion {$/;"	c
FieldDiffusion	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FieldDiffusion(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FieldDiffusionCoeff_t	src/athena.hpp	/^typedef void (*FieldDiffusionCoeff_t)(FieldDiffusion *pfdif, MeshBlock *pmb,$/;"	t	typeref:typename:void (*)(FieldDiffusion * pfdif,MeshBlock * pmb,const AthenaArray<Real> & w,const AthenaArray<Real> & bmag,int is,int ie,int js,int je,int ks,int ke)
FieldDiffusivity_	src/mesh/mesh.hpp	/^  FieldDiffusionCoeff_t FieldDiffusivity_;$/;"	m	class:Mesh	typeref:typename:FieldDiffusionCoeff_t
FieldIntegrate	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FieldIntegrate(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FieldReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FieldReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FieldSend	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FieldSend(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FieldShearReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FieldShearReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FieldShearSend	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FieldShearSend(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FillCntGrf	src/gravity/obcgravity.cpp	/^void OBCGravityCar::FillCntGrf()$/;"	f	class:OBCGravityCar	typeref:typename:void
FillCntGrf	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::FillCntGrf()$/;"	f	class:OBCGravityCyl	typeref:typename:void
FillDscGrf	src/gravity/obcgravity.cpp	/^void OBCGravityCar::FillDscGrf()$/;"	f	class:OBCGravityCar	typeref:typename:void
FillDscGrf	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::FillDscGrf()$/;"	f	class:OBCGravityCyl	typeref:typename:void
FillRootGridSource	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::FillRootGridSource(void) {$/;"	f	class:MultigridDriver	typeref:typename:void
FindBufferID	src/bvals/bvals_base.cpp	/^int BoundaryBase::FindBufferID(int ox1, int ox2, int ox3, int fi1, int fi2) {$/;"	f	class:BoundaryBase	typeref:typename:int
FindMeshBlock	src/mesh/mesh.cpp	/^MeshBlock* Mesh::FindMeshBlock(int tgid) {$/;"	f	class:Mesh	typeref:typename:MeshBlock *
FindMeshBlock	src/mesh/meshblock_tree.cpp	/^MeshBlockTree* MeshBlockTree::FindMeshBlock(LogicalLocation tloc) {$/;"	f	class:MeshBlockTree	typeref:typename:MeshBlockTree *
FindMultigrid	src/multigrid/multigrid_driver.cpp	/^Multigrid* MultigridDriver::FindMultigrid(int tgid) {$/;"	f	class:MultigridDriver	typeref:typename:Multigrid *
FindNeighbor	src/mesh/meshblock_tree.cpp	/^MeshBlockTree* MeshBlockTree::FindNeighbor(LogicalLocation myloc, int ox1, int ox2,$/;"	f	class:MeshBlockTree	typeref:typename:MeshBlockTree *
FindOrAddBlock	src/parameter_input.cpp	/^InputBlock* ParameterInput::FindOrAddBlock(std::string name) {$/;"	f	class:ParameterInput	typeref:typename:InputBlock *
FindShearBlock	src/bvals/bvals_shear.cpp	/^void BoundaryValues::FindShearBlock(const Real time) {$/;"	f	class:BoundaryValues	typeref:typename:void
FixedBoundary	src/pgen/gr_bondi.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
FixedBoundary	src/pgen/gr_geodesic_infall.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
FixedBoundary	src/pgen/gr_mhd_inflow.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
FixedBoundary	src/pgen/gr_torus.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
FluxCorrectReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FluxCorrectReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FluxCorrectSend	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::FluxCorrectSend(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
FluxCorrectionType	src/athena.hpp	/^enum FluxCorrectionType {FLUX_HYDRO=0};$/;"	g
FluxToGlobal1	src/coordinates/coordinates.hpp	/^  virtual void FluxToGlobal1(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
FluxToGlobal1	src/coordinates/gr_user.cpp	/^void GRUser::FluxToGlobal1(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
FluxToGlobal1	src/coordinates/kerr-schild.cpp	/^void KerrSchild::FluxToGlobal1(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
FluxToGlobal1	src/coordinates/minkowski.cpp	/^void Minkowski::FluxToGlobal1(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
FluxToGlobal1	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::FluxToGlobal1(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
FluxToGlobal2	src/coordinates/coordinates.hpp	/^  virtual void FluxToGlobal2(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
FluxToGlobal2	src/coordinates/gr_user.cpp	/^void GRUser::FluxToGlobal2(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
FluxToGlobal2	src/coordinates/kerr-schild.cpp	/^void KerrSchild::FluxToGlobal2(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
FluxToGlobal2	src/coordinates/minkowski.cpp	/^void Minkowski::FluxToGlobal2(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
FluxToGlobal2	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::FluxToGlobal2(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
FluxToGlobal3	src/coordinates/coordinates.hpp	/^  virtual void FluxToGlobal3(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
FluxToGlobal3	src/coordinates/gr_user.cpp	/^void GRUser::FluxToGlobal3(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
FluxToGlobal3	src/coordinates/kerr-schild.cpp	/^void KerrSchild::FluxToGlobal3(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
FluxToGlobal3	src/coordinates/minkowski.cpp	/^void Minkowski::FluxToGlobal3(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
FluxToGlobal3	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::FluxToGlobal3(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
FormattedTableOutput	src/outputs/formatted_table.cpp	/^FormattedTableOutput::FormattedTableOutput(OutputParameters oparams)$/;"	f	class:FormattedTableOutput
FormattedTableOutput	src/outputs/outputs.hpp	/^class FormattedTableOutput : public OutputType {$/;"	c
ForwardNextTime	src/parameter_input.cpp	/^void ParameterInput::ForwardNextTime(Real mesh_time) {$/;"	f	class:ParameterInput	typeref:typename:void
Fparams	src/pgen/cylgrav_test.cpp	/^typedef struct Fparams {$/;"	s	file:
Fparams	src/pgen/cylgrav_test.cpp	/^} Fparams;$/;"	t	typeref:struct:Fparams	file:
GENERAL_RELATIVITY	src/defs.hpp	/^#define GENERAL_RELATIVITY /;"	d
GENERAL_RELATIVITY	src/defs.hpp.in	/^#define GENERAL_RELATIVITY /;"	d	file:
GLOBALS_HPP_	src/globals.hpp	/^#define GLOBALS_HPP_$/;"	d
GRAVITY_FFTGRAVITY_HPP_	src/gravity/fftgravity.hpp	/^#define GRAVITY_FFTGRAVITY_HPP_$/;"	d
GRAVITY_GRAVITY_HPP_	src/gravity/gravity.hpp	/^#define GRAVITY_GRAVITY_HPP_$/;"	d
GRAVITY_MGGRAVITY_HPP_	src/gravity/mggravity.hpp	/^#define GRAVITY_MGGRAVITY_HPP_$/;"	d
GRAVITY_OBCGRAVITY_HPP_	src/gravity/obcgravity.hpp	/^#define GRAVITY_OBCGRAVITY_HPP_$/;"	d
GRAV_PHYS_BND	src/task_list/grav_task_list.hpp	/^  const uint64_t GRAV_PHYS_BND=1LL<<4;$/;"	v	namespace:GravitySolverTaskNames	typeref:typename:const uint64_t
GRUser	src/coordinates/coordinates.hpp	/^class GRUser : public Coordinates {$/;"	c
GRUser	src/coordinates/gr_user.cpp	/^GRUser::GRUser(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:GRUser
GSL_INCLUDED	src/defs.hpp	/^#define GSL_INCLUDED /;"	d
GSL_INCLUDED	src/defs.hpp.in	/^#define GSL_INCLUDED /;"	d	file:
Generate	src/fft/turbulence.cpp	/^void TurbulenceDriver::Generate(void) {$/;"	f	class:TurbulenceDriver	typeref:typename:void
GetBlockSizeInBytes	src/mesh/meshblock.cpp	/^size_t MeshBlock::GetBlockSizeInBytes(void) {$/;"	f	class:MeshBlock	typeref:typename:size_t
GetBoolean	src/parameter_input.cpp	/^bool ParameterInput::GetBoolean(std::string block, std::string name) {$/;"	f	class:ParameterInput	typeref:typename:bool
GetBoundaryFlag	src/bvals/get_boundary_flag.cpp	/^enum BoundaryFlag GetBoundaryFlag(std::string input_string) {$/;"	f	typeref:enum:BoundaryFlag
GetBoyerLindquistCoordinates	src/pgen/gr_bondi.cpp	/^static void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	typeref:typename:void	file:
GetBoyerLindquistCoordinates	src/pgen/gr_geodesic_infall.cpp	/^static void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	typeref:typename:void	file:
GetBoyerLindquistCoordinates	src/pgen/gr_mhd_inflow.cpp	/^static void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	typeref:typename:void	file:
GetBoyerLindquistCoordinates	src/pgen/gr_torus.cpp	/^static void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	typeref:typename:void	file:
GetCellVolume	src/coordinates/coordinates.cpp	/^Real Coordinates::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:Coordinates	typeref:typename:Real
GetCellVolume	src/coordinates/cylindrical.cpp	/^Real Cylindrical::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:Cylindrical	typeref:typename:Real
GetCellVolume	src/coordinates/gr_user.cpp	/^Real GRUser::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:GRUser	typeref:typename:Real
GetCellVolume	src/coordinates/kerr-schild.cpp	/^Real KerrSchild::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:KerrSchild	typeref:typename:Real
GetCellVolume	src/coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild	typeref:typename:Real
GetCellVolume	src/coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar	typeref:typename:Real
GetCurrentData	src/multigrid/multigrid.hpp	/^  AthenaArray<Real>& GetCurrentData(void) { return u_[current_level_]; }$/;"	f	class:Multigrid	typeref:typename:AthenaArray<Real> &
GetCurrentLevel	src/multigrid/multigrid.hpp	/^  int GetCurrentLevel(void) { return current_level_; }$/;"	f	class:Multigrid	typeref:typename:int
GetCurrentNumberOfCells	src/multigrid/multigrid.hpp	/^  int GetCurrentNumberOfCells(void) { return 1<<current_level_; }$/;"	f	class:Multigrid	typeref:typename:int
GetCurrentSource	src/multigrid/multigrid.hpp	/^  AthenaArray<Real>& GetCurrentSource(void) { return src_[current_level_]; }$/;"	f	class:Multigrid	typeref:typename:AthenaArray<Real> &
GetCylCoord	src/pgen/disk.cpp	/^static void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	typeref:typename:void	file:
GetDensityFloor	src/eos/eos.hpp	/^  Real GetDensityFloor() const {return density_floor_;}$/;"	f	class:EquationOfState	typeref:typename:Real
GetDim1	src/athena_arrays.hpp	/^  int GetDim1() const { return nx1_; }$/;"	f	class:AthenaArray	typeref:typename:int
GetDim2	src/athena_arrays.hpp	/^  int GetDim2() const { return nx2_; }$/;"	f	class:AthenaArray	typeref:typename:int
GetDim3	src/athena_arrays.hpp	/^  int GetDim3() const { return nx3_; }$/;"	f	class:AthenaArray	typeref:typename:int
GetDim4	src/athena_arrays.hpp	/^  int GetDim4() const { return nx4_; }$/;"	f	class:AthenaArray	typeref:typename:int
GetDim5	src/athena_arrays.hpp	/^  int GetDim5() const { return nx5_; }$/;"	f	class:AthenaArray	typeref:typename:int
GetEdge1Length	src/coordinates/coordinates.cpp	/^Real Coordinates::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:Coordinates	typeref:typename:Real
GetEdge1Length	src/coordinates/gr_user.cpp	/^Real GRUser::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:GRUser	typeref:typename:Real
GetEdge1Length	src/coordinates/kerr-schild.cpp	/^Real KerrSchild::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:KerrSchild	typeref:typename:Real
GetEdge1Length	src/coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild	typeref:typename:Real
GetEdge2Length	src/coordinates/coordinates.cpp	/^Real Coordinates::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:Coordinates	typeref:typename:Real
GetEdge2Length	src/coordinates/cylindrical.cpp	/^Real Cylindrical::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:Cylindrical	typeref:typename:Real
GetEdge2Length	src/coordinates/gr_user.cpp	/^Real GRUser::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:GRUser	typeref:typename:Real
GetEdge2Length	src/coordinates/kerr-schild.cpp	/^Real KerrSchild::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:KerrSchild	typeref:typename:Real
GetEdge2Length	src/coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild	typeref:typename:Real
GetEdge2Length	src/coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar	typeref:typename:Real
GetEdge3Length	src/coordinates/coordinates.cpp	/^Real Coordinates::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:Coordinates	typeref:typename:Real
GetEdge3Length	src/coordinates/gr_user.cpp	/^Real GRUser::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:GRUser	typeref:typename:Real
GetEdge3Length	src/coordinates/kerr-schild.cpp	/^Real KerrSchild::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:KerrSchild	typeref:typename:Real
GetEdge3Length	src/coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild	typeref:typename:Real
GetEdge3Length	src/coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar	typeref:typename:Real
GetFace1Area	src/coordinates/coordinates.cpp	/^Real Coordinates::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:Coordinates	typeref:typename:Real
GetFace1Area	src/coordinates/cylindrical.cpp	/^Real Cylindrical::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:Cylindrical	typeref:typename:Real
GetFace1Area	src/coordinates/gr_user.cpp	/^Real GRUser::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:GRUser	typeref:typename:Real
GetFace1Area	src/coordinates/kerr-schild.cpp	/^Real KerrSchild::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:KerrSchild	typeref:typename:Real
GetFace1Area	src/coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild	typeref:typename:Real
GetFace1Area	src/coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar	typeref:typename:Real
GetFace2Area	src/coordinates/coordinates.cpp	/^Real Coordinates::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:Coordinates	typeref:typename:Real
GetFace2Area	src/coordinates/gr_user.cpp	/^Real GRUser::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:GRUser	typeref:typename:Real
GetFace2Area	src/coordinates/kerr-schild.cpp	/^Real KerrSchild::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:KerrSchild	typeref:typename:Real
GetFace2Area	src/coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild	typeref:typename:Real
GetFace2Area	src/coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar	typeref:typename:Real
GetFace3Area	src/coordinates/coordinates.cpp	/^Real Coordinates::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:Coordinates	typeref:typename:Real
GetFace3Area	src/coordinates/cylindrical.cpp	/^Real Cylindrical::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:Cylindrical	typeref:typename:Real
GetFace3Area	src/coordinates/gr_user.cpp	/^Real GRUser::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:GRUser	typeref:typename:Real
GetFace3Area	src/coordinates/kerr-schild.cpp	/^Real KerrSchild::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:KerrSchild	typeref:typename:Real
GetFace3Area	src/coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild	typeref:typename:Real
GetFace3Area	src/coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar	typeref:typename:Real
GetG1	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real GetG1() const {return g1_;}$/;"	f	class:HydroSourceTerms	typeref:typename:Real
GetG2	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real GetG2() const {return g2_;}$/;"	f	class:HydroSourceTerms	typeref:typename:Real
GetG3	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real GetG3() const {return g3_;}$/;"	f	class:HydroSourceTerms	typeref:typename:Real
GetGM	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real GetGM() const {return gm_;}$/;"	f	class:HydroSourceTerms	typeref:typename:Real
GetGamma	src/eos/eos.hpp	/^  Real GetGamma() const {return gamma_;}$/;"	f	class:EquationOfState	typeref:typename:Real
GetGlobalIndex	src/fft/athena_fft.cpp	/^int64_t FFTBlock::GetGlobalIndex(const int i, const int j, const int k) {$/;"	f	class:FFTBlock	typeref:typename:int64_t
GetIndex	src/fft/athena_fft.cpp	/^int64_t FFTBlock::GetIndex(const int i, const int j, const int k) {$/;"	f	class:FFTBlock	typeref:typename:int64_t
GetIndex	src/fft/athena_fft.cpp	/^int64_t FFTBlock::GetIndex(const int i, const int j, const int k, AthenaFFTIndex *pidx) {$/;"	f	class:FFTBlock	typeref:typename:int64_t
GetInteger	src/parameter_input.cpp	/^int ParameterInput::GetInteger(std::string block, std::string name) {$/;"	f	class:ParameterInput	typeref:typename:int
GetIsoSoundSpeed	src/eos/eos.hpp	/^  Real GetIsoSoundSpeed() const {return iso_sound_speed_;}$/;"	f	class:EquationOfState	typeref:typename:Real
GetKcomp	src/fft/turbulence.cpp	/^int64_t TurbulenceDriver::GetKcomp(int idx, int disp, int Nx) {$/;"	f	class:TurbulenceDriver	typeref:typename:int64_t
GetLeaf	src/mesh/meshblock_tree.hpp	/^  MeshBlockTree* GetLeaf(int ox, int oy, int oz) {return pleaf[oz][oy][ox];}$/;"	f	class:MeshBlockTree	typeref:typename:MeshBlockTree *
GetMass	src/coordinates/coordinates.hpp	/^  Real GetMass() const {return bh_mass_;}$/;"	f	class:Coordinates	typeref:typename:Real
GetMeshBlockList	src/mesh/meshblock_tree.cpp	/^void MeshBlockTree::GetMeshBlockList(LogicalLocation *list, int *pglist, int& count) {$/;"	f	class:MeshBlockTree	typeref:typename:void
GetMinkowskiCoordinates	src/pgen/gr_blast.cpp	/^static void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	typeref:typename:void	file:
GetMinkowskiCoordinates	src/pgen/gr_linear_wave.cpp	/^static void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	typeref:typename:void	file:
GetMinkowskiCoordinates	src/pgen/gr_shock_tube.cpp	/^static void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	typeref:typename:void	file:
GetNumFFTBlocks	src/fft/athena_fft.hpp	/^  int GetNumFFTBlocks(void) { return nblist_[Globals::my_rank]; }$/;"	f	class:FFTDriver	typeref:typename:int
GetNumMeshBlocksThisRank	src/mesh/mesh.hpp	/^  int GetNumMeshBlocksThisRank(int my_rank) {return nblist[my_rank];}$/;"	f	class:Mesh	typeref:typename:int
GetNumMeshThreads	src/mesh/mesh.hpp	/^  int GetNumMeshThreads() const {return num_mesh_threads_;}$/;"	f	class:Mesh	typeref:typename:int
GetNumMultigrids	src/multigrid/multigrid.hpp	/^  int GetNumMultigrids(void) { return nblist_[Globals::my_rank]; }$/;"	f	class:MultigridDriver	typeref:typename:int
GetNumberOfLevels	src/multigrid/multigrid.hpp	/^  int GetNumberOfLevels(void) { return nlevel_; }$/;"	f	class:Multigrid	typeref:typename:int
GetOrAddBoolean	src/parameter_input.cpp	/^bool ParameterInput::GetOrAddBoolean(std::string block,std::string name, bool def_value) {$/;"	f	class:ParameterInput	typeref:typename:bool
GetOrAddInteger	src/parameter_input.cpp	/^int ParameterInput::GetOrAddInteger(std::string block, std::string name, int def_value) {$/;"	f	class:ParameterInput	typeref:typename:int
GetOrAddReal	src/parameter_input.cpp	/^Real ParameterInput::GetOrAddReal(std::string block, std::string name, Real def_value) {$/;"	f	class:ParameterInput	typeref:typename:Real
GetOrAddString	src/parameter_input.cpp	/^std::string ParameterInput::GetOrAddString(std::string block, std::string name,$/;"	f	class:ParameterInput	typeref:typename:std::string
GetPosition	src/outputs/io_wrapper.cpp	/^IOWrapperSize_t IOWrapper::GetPosition(void) {$/;"	f	class:IOWrapper	typeref:typename:IOWrapperSize_t
GetPressureFloor	src/eos/eos.hpp	/^  Real GetPressureFloor() const {return pressure_floor_;}$/;"	f	class:EquationOfState	typeref:typename:Real
GetPtrToBlock	src/parameter_input.cpp	/^InputBlock* ParameterInput::GetPtrToBlock(std::string name) {$/;"	f	class:ParameterInput	typeref:typename:InputBlock *
GetPtrToLine	src/parameter_input.cpp	/^InputLine* InputBlock::GetPtrToLine(std::string name) {$/;"	f	class:InputBlock	typeref:typename:InputLine *
GetReal	src/parameter_input.cpp	/^Real ParameterInput::GetReal(std::string block, std::string name) {$/;"	f	class:ParameterInput	typeref:typename:Real
GetRootSource	src/multigrid/multigrid.hpp	/^  Real GetRootSource(int n) { return src_[0](n,ngh_,ngh_,ngh_); }$/;"	f	class:Multigrid	typeref:typename:Real
GetSignalFlag	src/utils/signal_handler.cpp	/^int GetSignalFlag(int s) {$/;"	f	namespace:SignalHandler	typeref:typename:int
GetSize	src/athena_arrays.hpp	/^  int GetSize() const { return nx1_*nx2_*nx3_*nx4_*nx5_; }$/;"	f	class:AthenaArray	typeref:typename:int
GetSizeInBytes	src/athena_arrays.hpp	/^  size_t GetSizeInBytes() const {return nx1_*nx2_*nx3_*nx4_*nx5_*sizeof(T); }$/;"	f	class:AthenaArray	typeref:typename:size_t
GetSpin	src/coordinates/coordinates.hpp	/^  Real GetSpin() const {return bh_spin_;}$/;"	f	class:Coordinates	typeref:typename:Real
GetString	src/parameter_input.cpp	/^std::string ParameterInput::GetString(std::string block, std::string name) {$/;"	f	class:ParameterInput	typeref:typename:std::string
GetTotalCells	src/mesh/mesh.hpp	/^  int64_t GetTotalCells() {return static_cast<int64_t> (nbtotal)*$/;"	f	class:Mesh	typeref:typename:int64_t
Gii	src/gravity/obcgravity.hpp	/^                   E2P0=8, Gii=9, Gik=10, Gki=11, Gkk=12, EB=13, Gii2P=14,$/;"	e	enum:CylDecompNames
Gii2P	src/gravity/obcgravity.hpp	/^                   E2P0=8, Gii=9, Gik=10, Gki=11, Gkk=12, EB=13, Gii2P=14,$/;"	e	enum:CylDecompNames
Gii2P0	src/gravity/obcgravity.hpp	/^                   Gik2P=15, Gki2P=16, Gkk2P=17, Gii2P0=18, Gik2P0=19,$/;"	e	enum:CylDecompNames
Gii_BLOCK	src/gravity/obcgravity.hpp	/^                   Gki2P0=20, Gkk2P0=21, Gii_BLOCK=22, Gik_BLOCK=23,$/;"	e	enum:CylDecompNames
Gik	src/gravity/obcgravity.hpp	/^                   E2P0=8, Gii=9, Gik=10, Gki=11, Gkk=12, EB=13, Gii2P=14,$/;"	e	enum:CylDecompNames
Gik2P	src/gravity/obcgravity.hpp	/^                   Gik2P=15, Gki2P=16, Gkk2P=17, Gii2P0=18, Gik2P0=19,$/;"	e	enum:CylDecompNames
Gik2P0	src/gravity/obcgravity.hpp	/^                   Gik2P=15, Gki2P=16, Gkk2P=17, Gii2P0=18, Gik2P0=19,$/;"	e	enum:CylDecompNames
Gik_BLOCK	src/gravity/obcgravity.hpp	/^                   Gki2P0=20, Gkk2P0=21, Gii_BLOCK=22, Gik_BLOCK=23,$/;"	e	enum:CylDecompNames
Gki	src/gravity/obcgravity.hpp	/^                   E2P0=8, Gii=9, Gik=10, Gki=11, Gkk=12, EB=13, Gii2P=14,$/;"	e	enum:CylDecompNames
Gki2P	src/gravity/obcgravity.hpp	/^                   Gik2P=15, Gki2P=16, Gkk2P=17, Gii2P0=18, Gik2P0=19,$/;"	e	enum:CylDecompNames
Gki2P0	src/gravity/obcgravity.hpp	/^                   Gki2P0=20, Gkk2P0=21, Gii_BLOCK=22, Gik_BLOCK=23,$/;"	e	enum:CylDecompNames
Gki_BLOCK	src/gravity/obcgravity.hpp	/^                   Gki_BLOCK=24, Gkk_BLOCK=25};$/;"	e	enum:CylDecompNames
Gkk	src/gravity/obcgravity.hpp	/^                   E2P0=8, Gii=9, Gik=10, Gki=11, Gkk=12, EB=13, Gii2P=14,$/;"	e	enum:CylDecompNames
Gkk2P	src/gravity/obcgravity.hpp	/^                   Gik2P=15, Gki2P=16, Gkk2P=17, Gii2P0=18, Gik2P0=19,$/;"	e	enum:CylDecompNames
Gkk2P0	src/gravity/obcgravity.hpp	/^                   Gki2P0=20, Gkk2P0=21, Gii_BLOCK=22, Gik_BLOCK=23,$/;"	e	enum:CylDecompNames
Gkk_BLOCK	src/gravity/obcgravity.hpp	/^                   Gki_BLOCK=24, Gkk_BLOCK=25};$/;"	e	enum:CylDecompNames
Globals	src/globals.cpp	/^namespace Globals {$/;"	n	file:
Globals	src/globals.hpp	/^namespace Globals {$/;"	n
GravFluxCorrection	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::GravFluxCorrection(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
Gravity	src/gravity/gravity.cpp	/^Gravity::Gravity(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:Gravity
Gravity	src/gravity/gravity.hpp	/^class Gravity {$/;"	c
GravityBoundaryData	src/bvals/bvals_grav.hpp	/^typedef struct GravityBoundaryData {$/;"	s
GravityBoundaryData	src/bvals/bvals_grav.hpp	/^} GravityBoundaryData;$/;"	t	typeref:struct:GravityBoundaryData
GravityBoundaryFunc_t	src/athena.hpp	/^typedef void (*GravityBoundaryFunc_t)(MeshBlock *pmb, Coordinates *pco,$/;"	t	typeref:typename:void (*)(MeshBlock * pmb,Coordinates * pco,AthenaArray<Real> & dst,Real time,Real dt,int is,int ie,int js,int je,int ks,int ke)
GravityBoundaryFunction_	src/bvals/bvals_grav.hpp	/^  GravityBoundaryFunc_t GravityBoundaryFunction_[6];$/;"	m	class:GravityBoundaryValues	typeref:typename:GravityBoundaryFunc_t[6]
GravityBoundaryValues	src/bvals/bvals_grav.cpp	/^GravityBoundaryValues::GravityBoundaryValues(MeshBlock *pmb, enum BoundaryFlag *input_bcs)$/;"	f	class:GravityBoundaryValues
GravityBoundaryValues	src/bvals/bvals_grav.hpp	/^class GravityBoundaryValues : public BoundaryBase {$/;"	c
GravitySolverTaskList	src/task_list/grav_task_list.cpp	/^GravitySolverTaskList::GravitySolverTaskList(ParameterInput *pin, Mesh *pm)$/;"	f	class:GravitySolverTaskList
GravitySolverTaskList	src/task_list/grav_task_list.hpp	/^class GravitySolverTaskList : public TaskList {$/;"	c
GravitySolverTaskNames	src/task_list/grav_task_list.hpp	/^namespace GravitySolverTaskNames {$/;"	n
Greater	src/athena.hpp	/^  static bool Greater(const LogicalLocation & left, const LogicalLocation &right)$/;"	f	struct:LogicalLocation	typeref:typename:bool
H5Real	src/outputs/athena_hdf5.cpp	/^  typedef double H5Real;$/;"	t	typeref:typename:double	file:
H5Real	src/outputs/athena_hdf5.cpp	/^  typedef float H5Real;$/;"	t	typeref:typename:float	file:
H5T_NATIVE_REAL	src/outputs/athena_hdf5.cpp	/^#define H5T_NATIVE_REAL /;"	d	file:
H5_DOUBLE_PRECISION_ENABLED	src/defs.hpp	/^#define H5_DOUBLE_PRECISION_ENABLED /;"	d
H5_DOUBLE_PRECISION_ENABLED	src/defs.hpp.in	/^#define H5_DOUBLE_PRECISION_ENABLED /;"	d	file:
HDF5OUTPUT	src/defs.hpp	/^#define HDF5OUTPUT$/;"	d
HLLCTransforming	src/hydro/rsolvers/hydro/hllc_rel.cpp	/^static void HLLCTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HLLDTransforming	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^static void HLLDTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HLLENonTransforming	src/hydro/rsolvers/hydro/hllc_rel.cpp	/^static void HLLENonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HLLENonTransforming	src/hydro/rsolvers/hydro/hlle_rel.cpp	/^static void HLLENonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HLLENonTransforming	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^static void HLLENonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HLLENonTransforming	src/hydro/rsolvers/mhd/hlle_mhd_rel.cpp	/^static void HLLENonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HLLETransforming	src/hydro/rsolvers/hydro/hlle_rel.cpp	/^static void HLLETransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HLLETransforming	src/hydro/rsolvers/mhd/hlle_mhd_rel.cpp	/^static void HLLETransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
HUGE_NUMBER	src/defs.hpp	/^#define HUGE_NUMBER /;"	d
HUGE_NUMBER	src/defs.hpp.in	/^#define HUGE_NUMBER /;"	d	file:
HYDRO_CONS	src/athena.hpp	/^enum CCBoundaryType {HYDRO_CONS=0, HYDRO_PRIM=1};$/;"	e	enum:CCBoundaryType
HYDRO_HYDRO_DIFFUSION_HYDRO_DIFFUSION_HPP_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^#define HYDRO_HYDRO_DIFFUSION_HYDRO_DIFFUSION_HPP_$/;"	d
HYDRO_HYDRO_HPP_	src/hydro/hydro.hpp	/^#define HYDRO_HYDRO_HPP_$/;"	d
HYDRO_PRIM	src/athena.hpp	/^enum CCBoundaryType {HYDRO_CONS=0, HYDRO_PRIM=1};$/;"	e	enum:CCBoundaryType
HYDRO_SRCTERMS_HYDRO_SRCTERMS_HPP_	src/hydro/srcterms/hydro_srcterms.hpp	/^#define HYDRO_SRCTERMS_HYDRO_SRCTERMS_HPP_$/;"	d
HistoryOutput	src/outputs/history.cpp	/^HistoryOutput::HistoryOutput(OutputParameters oparams)$/;"	f	class:HistoryOutput
HistoryOutput	src/outputs/outputs.hpp	/^class HistoryOutput : public OutputType {$/;"	c
HistoryOutputFunc_t	src/athena.hpp	/^typedef Real (*HistoryOutputFunc_t)(MeshBlock *pmb, int iout);$/;"	t	typeref:typename:Real (*)(MeshBlock * pmb,int iout)
Hure	src/pgen/cylgrav_test.cpp	/^Hure::Hure(double a1, double a2, double t1, double t2, double z1, double z2)$/;"	f	class:Hure
Hure	src/pgen/cylgrav_test.cpp	/^class Hure {$/;"	c	file:
Hydro	src/hydro/hydro.cpp	/^Hydro::Hydro(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:Hydro
Hydro	src/hydro/hydro.hpp	/^class Hydro {$/;"	c
HydroDiffusion	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^HydroDiffusion::HydroDiffusion(Hydro *phyd, ParameterInput *pin) {$/;"	f	class:HydroDiffusion
HydroDiffusion	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^class HydroDiffusion {$/;"	c
HydroDiffusion	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::HydroDiffusion(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
HydroIntegrate	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::HydroIntegrate(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
HydroIntegratorTaskNames	src/task_list/task_list.hpp	/^namespace HydroIntegratorTaskNames {$/;"	n
HydroReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::HydroReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
HydroSend	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::HydroSend(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
HydroShearReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::HydroShearReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
HydroShearSend	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::HydroShearSend(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
HydroSourceTerms	src/hydro/srcterms/hydro_srcterms.cpp	/^HydroSourceTerms::HydroSourceTerms(Hydro *phyd, ParameterInput *pin) {$/;"	f	class:HydroSourceTerms
HydroSourceTerms	src/hydro/srcterms/hydro_srcterms.hpp	/^class HydroSourceTerms {$/;"	c
HydroSourceTerms	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::HydroSourceTerms(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
I00	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I01	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I02	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I03	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I11	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I12	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I13	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I22	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I23	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
I33	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
IA1	src/utils/ran2.cpp	/^#define IA1 /;"	d	file:
IA2	src/utils/ran2.cpp	/^#define IA2 /;"	d	file:
IALRM	src/utils/utils.hpp	/^  const int ITERM = 0, IINT = 1, IALRM = 2;$/;"	v	namespace:SignalHandler	typeref:typename:const int
IB1	src/athena.hpp	/^enum {IB1=0, IB2=1, IB3=2};$/;"	e	enum:__anon1e1ee2430203
IB2	src/athena.hpp	/^enum {IB1=0, IB2=1, IB3=2};$/;"	e	enum:__anon1e1ee2430203
IB3	src/athena.hpp	/^enum {IB1=0, IB2=1, IB3=2};$/;"	e	enum:__anon1e1ee2430203
IBY	src/athena.hpp	/^enum {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:__anon1e1ee2430303
IBZ	src/athena.hpp	/^enum {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:__anon1e1ee2430303
IDN	src/athena.hpp	/^enum {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:__anon1e1ee2430103
IEN	src/athena.hpp	/^enum {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:__anon1e1ee2430103
IINT	src/utils/utils.hpp	/^  const int ITERM = 0, IINT = 1, IALRM = 2;$/;"	v	namespace:SignalHandler	typeref:typename:const int
IM1	src/athena.hpp	/^enum {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:__anon1e1ee2430103
IM2	src/athena.hpp	/^enum {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:__anon1e1ee2430103
IM3	src/athena.hpp	/^enum {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:__anon1e1ee2430103
IMM1	src/utils/ran2.cpp	/^#define IMM1 /;"	d	file:
IMR1	src/utils/ran2.cpp	/^#define IMR1 /;"	d	file:
IMR2	src/utils/ran2.cpp	/^#define IMR2 /;"	d	file:
INN	src/gravity/obcgravity.hpp	/^enum CylBoundaryFace {TOP=0, BOT=1, INN=2, OUT=3};$/;"	e	enum:CylBoundaryFace
INNER_X1	src/bvals/bvals.hpp	/^enum BoundaryFace {FACE_UNDEF=-1, INNER_X1=0, OUTER_X1=1, INNER_X2=2, OUTER_X2=3,$/;"	e	enum:BoundaryFace
INNER_X2	src/bvals/bvals.hpp	/^enum BoundaryFace {FACE_UNDEF=-1, INNER_X1=0, OUTER_X1=1, INNER_X2=2, OUTER_X2=3,$/;"	e	enum:BoundaryFace
INNER_X3	src/bvals/bvals.hpp	/^                   INNER_X3=4, OUTER_X3=5};$/;"	e	enum:BoundaryFace
INT_CHM	src/task_list/task_list.hpp	/^  const uint64_t INT_CHM=1LL<<26;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
INT_FLD	src/task_list/task_list.hpp	/^  const uint64_t INT_FLD=1LL<<24;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
INT_HYD	src/task_list/task_list.hpp	/^  const uint64_t INT_HYD=1LL<<23;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
INT_RAD	src/task_list/task_list.hpp	/^  const uint64_t INT_RAD=1LL<<25;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
IOWrapper	src/outputs/io_wrapper.hpp	/^  IOWrapper() {comm_=MPI_COMM_WORLD;}$/;"	f	class:IOWrapper
IOWrapper	src/outputs/io_wrapper.hpp	/^class IOWrapper {$/;"	c
IOWrapperFile	src/outputs/io_wrapper.hpp	/^typedef FILE * IOWrapperFile;$/;"	t	typeref:typename:FILE *
IOWrapperFile	src/outputs/io_wrapper.hpp	/^typedef MPI_File IOWrapperFile;$/;"	t	typeref:typename:MPI_File
IOWrapperSize_t	src/outputs/io_wrapper.hpp	/^typedef uint64_t IOWrapperSize_t;$/;"	t	typeref:typename:uint64_t
IO_WRAPPER_READ_MODE	src/outputs/io_wrapper.hpp	/^enum rwmode {IO_WRAPPER_READ_MODE, IO_WRAPPER_WRITE_MODE};$/;"	e	enum:rwmode
IO_WRAPPER_WRITE_MODE	src/outputs/io_wrapper.hpp	/^enum rwmode {IO_WRAPPER_READ_MODE, IO_WRAPPER_WRITE_MODE};$/;"	e	enum:rwmode
IPR	src/athena.hpp	/^enum {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:__anon1e1ee2430303
IQ1	src/utils/ran2.cpp	/^#define IQ1 /;"	d	file:
IQ2	src/utils/ran2.cpp	/^#define IQ2 /;"	d	file:
IR1	src/utils/ran2.cpp	/^#define IR1 /;"	d	file:
IR2	src/utils/ran2.cpp	/^#define IR2 /;"	d	file:
ISO	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^enum {ISO=0, ANI=1};$/;"	e	enum:__anon31ce70ee0103
ITERM	src/utils/utils.hpp	/^  const int ITERM = 0, IINT = 1, IALRM = 2;$/;"	v	namespace:SignalHandler	typeref:typename:const int
IVX	src/athena.hpp	/^enum {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:__anon1e1ee2430303
IVY	src/athena.hpp	/^enum {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:__anon1e1ee2430303
IVZ	src/athena.hpp	/^enum {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:__anon1e1ee2430303
I_A	src/field/field_diffusion/field_diffusion.hpp	/^enum {I_O=0, I_H=1, I_A=2};$/;"	e	enum:__anon5a5922080103
I_H	src/field/field_diffusion/field_diffusion.hpp	/^enum {I_O=0, I_H=1, I_A=2};$/;"	e	enum:__anon5a5922080103
I_O	src/field/field_diffusion/field_diffusion.hpp	/^enum {I_O=0, I_H=1, I_A=2};$/;"	e	enum:__anon5a5922080103
InflowBoundary	src/pgen/gr_torus.cpp	/^void InflowBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
InitBoundaryData	src/bvals/bvals.cpp	/^void BoundaryValues::InitBoundaryData(BoundaryData &bd, enum BoundaryType type) {$/;"	f	class:BoundaryValues	typeref:typename:void
InitBoundaryData	src/bvals/bvals_grav.cpp	/^void GravityBoundaryValues::InitBoundaryData(GravityBoundaryData &bd) {$/;"	f	class:GravityBoundaryValues	typeref:typename:void
InitBoundaryData	src/bvals/bvals_mg.cpp	/^void MGBoundaryValues::InitBoundaryData(MGBoundaryData &bd, enum BoundaryType type) {$/;"	f	class:MGBoundaryValues	typeref:typename:void
InitUserMeshBlockData	src/pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
InitUserMeshBlockData	src/pgen/gr_torus.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
InitUserMeshBlockData	src/pgen/linear_wave.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
InitUserMeshData	src/pgen/cargrav_test.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin)$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/cpaw.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/cylgrav_test.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin)$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/default_pgen.cpp	/^void __attribute__((weak)) Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/disk.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/dmr.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/field_loop_poles.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/gr_bondi.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/gr_geodesic_infall.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/gr_linear_wave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/gr_mhd_inflow.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/gr_torus.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/hb3.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/hgb.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/jeans.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/jet.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/kh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/linear_wave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/magnoh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/noh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/poisson.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/poly_equil.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/polytrope.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin)$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/rt.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/shk_cloud.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/ssheet.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/strat.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/torus.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin)$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/turb.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitUserMeshData	src/pgen/visc.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitWithShallowCopy	src/athena_arrays.hpp	/^void AthenaArray<T>::InitWithShallowCopy(AthenaArray<T> &src) {$/;"	f	class:AthenaArray	typeref:typename:void
InitWithShallowSlice	src/athena_arrays.hpp	/^void AthenaArray<T>::InitWithShallowSlice(AthenaArray<T> &src, const int dim,$/;"	f	class:AthenaArray	typeref:typename:void
Initialize	src/bvals/bvals.cpp	/^void BoundaryValues::Initialize(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
Initialize	src/mesh/mesh.cpp	/^void Mesh::Initialize(int res_flag, ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
InitializeFFTBlock	src/fft/fft_driver.cpp	/^void FFTDriver::InitializeFFTBlock(bool set_norm) {$/;"	f	class:FFTDriver	typeref:typename:void
InputBlock	src/parameter_input.cpp	/^InputBlock::InputBlock() {$/;"	f	class:InputBlock
InputBlock	src/parameter_input.hpp	/^class InputBlock {$/;"	c
InputLine	src/parameter_input.hpp	/^typedef struct InputLine {$/;"	s
InputLine	src/parameter_input.hpp	/^} InputLine;$/;"	t	typeref:struct:InputLine
IntegratorWeight	src/task_list/task_list.hpp	/^struct IntegratorWeight {$/;"	s
IsBigEndian	src/outputs/vtk.cpp	/^int IsBigEndian(void) {$/;"	f	typeref:typename:int
IsPole	src/coordinates/coordinates.cpp	/^bool Coordinates::IsPole(int j) {$/;"	f	class:Coordinates	typeref:typename:bool
IsShallowCopy	src/athena_arrays.hpp	/^  bool IsShallowCopy() { return (scopy_ == true); }$/;"	f	class:AthenaArray	typeref:typename:bool
James	src/gravity/obcgravity.hpp	/^enum James {C=0, S=1};$/;"	g
JetInnerX1	src/pgen/jet.cpp	/^void JetInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
KerrSchild	src/coordinates/coordinates.hpp	/^class KerrSchild : public Coordinates {$/;"	c
KerrSchild	src/coordinates/kerr-schild.cpp	/^KerrSchild::KerrSchild(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:KerrSchild
LLFNonTransforming	src/hydro/rsolvers/hydro/llf_rel.cpp	/^static void LLFNonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
LLFNonTransforming	src/hydro/rsolvers/mhd/llf_mhd_rel.cpp	/^static void LLFNonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
LLFTransforming	src/hydro/rsolvers/hydro/llf_rel.cpp	/^static void LLFTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
LLFTransforming	src/hydro/rsolvers/mhd/llf_mhd_rel.cpp	/^static void LLFTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	typeref:typename:void	file:
Laplacian	src/coordinates/coordinates.cpp	/^void Coordinates::Laplacian(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates	typeref:typename:void
LaplacianX1	src/coordinates/coordinates.cpp	/^void Coordinates::LaplacianX1(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates	typeref:typename:void
LaplacianX2	src/coordinates/coordinates.cpp	/^void Coordinates::LaplacianX2(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates	typeref:typename:void
LaplacianX3	src/coordinates/coordinates.cpp	/^void Coordinates::LaplacianX3(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates	typeref:typename:void
LeftEigenmatrixDotVector	src/reconstruct/characteristic.cpp	/^void Reconstruction::LeftEigenmatrixDotVector(MeshBlock *pmb, const int ivx,$/;"	f	class:Reconstruction	typeref:typename:void
Lesser	src/athena.hpp	/^  static bool Lesser(const LogicalLocation &left, const LogicalLocation &right)$/;"	f	struct:LogicalLocation	typeref:typename:bool
LoadBalance	src/mesh/mesh.cpp	/^void Mesh::LoadBalance(Real *clist, int *rlist, int *slist, int *nlist, int nb) {$/;"	f	class:Mesh	typeref:typename:void
LoadCellCenteredBoundaryBufferSameLevel	src/bvals/bvals_cc.cpp	/^int BoundaryValues::LoadCellCenteredBoundaryBufferSameLevel(AthenaArray<Real> &src,$/;"	f	class:BoundaryValues	typeref:typename:int
LoadCellCenteredBoundaryBufferToCoarser	src/bvals/bvals_cc.cpp	/^int BoundaryValues::LoadCellCenteredBoundaryBufferToCoarser(AthenaArray<Real> &src,$/;"	f	class:BoundaryValues	typeref:typename:int
LoadCellCenteredBoundaryBufferToFiner	src/bvals/bvals_cc.cpp	/^int BoundaryValues::LoadCellCenteredBoundaryBufferToFiner(AthenaArray<Real> &src,$/;"	f	class:BoundaryValues	typeref:typename:int
LoadEMFBoundaryBufferSameLevel	src/bvals/flux_correction_fc.cpp	/^int BoundaryValues::LoadEMFBoundaryBufferSameLevel(Real *buf, const NeighborBlock& nb) {$/;"	f	class:BoundaryValues	typeref:typename:int
LoadEMFBoundaryBufferToCoarser	src/bvals/flux_correction_fc.cpp	/^int BoundaryValues::LoadEMFBoundaryBufferToCoarser(Real *buf, const NeighborBlock& nb) {$/;"	f	class:BoundaryValues	typeref:typename:int
LoadEMFBoundaryPolarBuffer	src/bvals/flux_correction_fc.cpp	/^int BoundaryValues::LoadEMFBoundaryPolarBuffer(Real *buf, const PolarNeighborBlock &nb) {$/;"	f	class:BoundaryValues	typeref:typename:int
LoadEMFShearing	src/bvals/bvals_emf.cpp	/^void BoundaryValues::LoadEMFShearing(EdgeField &src, Real *buf, const int nb) {$/;"	f	class:BoundaryValues	typeref:typename:void
LoadFieldBoundaryBufferSameLevel	src/bvals/bvals_fc.cpp	/^int BoundaryValues::LoadFieldBoundaryBufferSameLevel(FaceField &src, Real *buf,$/;"	f	class:BoundaryValues	typeref:typename:int
LoadFieldBoundaryBufferToCoarser	src/bvals/bvals_fc.cpp	/^int BoundaryValues::LoadFieldBoundaryBufferToCoarser(FaceField &src, Real *buf,$/;"	f	class:BoundaryValues	typeref:typename:int
LoadFieldBoundaryBufferToFiner	src/bvals/bvals_fc.cpp	/^int BoundaryValues::LoadFieldBoundaryBufferToFiner(FaceField &src, Real *buf,$/;"	f	class:BoundaryValues	typeref:typename:int
LoadFieldShearing	src/bvals/bvals_field.cpp	/^void BoundaryValues::LoadFieldShearing(FaceField &src, Real *buf, int nb) {$/;"	f	class:BoundaryValues	typeref:typename:void
LoadFinestData	src/multigrid/multigrid.cpp	/^void Multigrid::LoadFinestData(const AthenaArray<Real> &src, int ns, int ngh) {$/;"	f	class:Multigrid	typeref:typename:void
LoadFromFile	src/parameter_input.cpp	/^void ParameterInput::LoadFromFile(IOWrapper &input) {$/;"	f	class:ParameterInput	typeref:typename:void
LoadFromStream	src/parameter_input.cpp	/^void ParameterInput::LoadFromStream(std::istream &is) {$/;"	f	class:ParameterInput	typeref:typename:void
LoadGravityBoundaryBufferSameLevel	src/bvals/bvals_grav.cpp	/^int GravityBoundaryValues::LoadGravityBoundaryBufferSameLevel(AthenaArray<Real> &src,$/;"	f	class:GravityBoundaryValues	typeref:typename:int
LoadHydroShearing	src/bvals/bvals_shear.cpp	/^void BoundaryValues::LoadHydroShearing(AthenaArray<Real> &src, Real *buf, int nb) {$/;"	f	class:BoundaryValues	typeref:typename:void
LoadMultigridBoundaryBufferSameLevel	src/bvals/bvals_mg.cpp	/^int MGBoundaryValues::LoadMultigridBoundaryBufferSameLevel(AthenaArray<Real> &src,$/;"	f	class:MGBoundaryValues	typeref:typename:int
LoadOutputData	src/outputs/outputs.cpp	/^void OutputType::LoadOutputData(MeshBlock *pmb) {$/;"	f	class:OutputType	typeref:typename:void
LoadSource	src/fft/athena_fft.cpp	/^void FFTBlock::LoadSource(const AthenaArray<Real> &src, int ns, int ngh,$/;"	f	class:FFTBlock	typeref:typename:void
LoadSource	src/gravity/obcgravity.cpp	/^void OBCGravityCar::LoadSource(const AthenaArray<Real> &src)$/;"	f	class:OBCGravityCar	typeref:typename:void
LoadSource	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::LoadSource(const AthenaArray<Real> &src)$/;"	f	class:OBCGravityCyl	typeref:typename:void
LoadSource	src/multigrid/multigrid.cpp	/^void Multigrid::LoadSource(const AthenaArray<Real> &src, int ns, int ngh, Real fac) {$/;"	f	class:Multigrid	typeref:typename:void
LogHAux	src/pgen/gr_torus.cpp	/^static Real LogHAux(Real r, Real sin_theta) {$/;"	f	typeref:typename:Real	file:
LogicalLocation	src/athena.hpp	/^  LogicalLocation() : lx1(-1), lx2(-1), lx3(-1), level(-1) {}$/;"	f	struct:LogicalLocation
LogicalLocation	src/athena.hpp	/^typedef struct LogicalLocation {$/;"	s
LogicalLocation	src/athena.hpp	/^} LogicalLocation;$/;"	t	typeref:struct:LogicalLocation
LoopInnerX1	src/pgen/field_loop_poles.cpp	/^void LoopInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f	typeref:typename:void
LoopInnerX2	src/pgen/field_loop_poles.cpp	/^void LoopInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f	typeref:typename:void
LoopOuterX1	src/pgen/field_loop_poles.cpp	/^void LoopOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f	typeref:typename:void
LoopOuterX2	src/pgen/field_loop_poles.cpp	/^void LoopOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f	typeref:typename:void
LowerVectorCell	src/coordinates/coordinates.hpp	/^  virtual void LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j, int i,$/;"	f	class:Coordinates	typeref:typename:void
LowerVectorCell	src/coordinates/gr_user.cpp	/^void GRUser::LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j, int i,$/;"	f	class:GRUser	typeref:typename:void
LowerVectorCell	src/coordinates/kerr-schild.cpp	/^void KerrSchild::LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j, int i,$/;"	f	class:KerrSchild	typeref:typename:void
LowerVectorCell	src/coordinates/minkowski.cpp	/^void Minkowski::LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j,$/;"	f	class:Minkowski	typeref:typename:void
LowerVectorCell	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j,$/;"	f	class:Schwarzschild	typeref:typename:void
Lx	src/fft/athena_fft.hpp	/^  Real Lx[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:Real[3]
Lx	src/pgen/hgb.cpp	/^Real Lx,Ly,Lz; \/\/ root grid size, global to share with output functions$/;"	v	typeref:typename:Real
Ly	src/pgen/hgb.cpp	/^Real Lx,Ly,Lz; \/\/ root grid size, global to share with output functions$/;"	v	typeref:typename:Real
Lz	src/pgen/hgb.cpp	/^Real Lx,Ly,Lz; \/\/ root grid size, global to share with output functions$/;"	v	typeref:typename:Real
M	src/pgen/cylgrav_test.cpp	/^double Hure::M(double R, double a, double bet, double zet, double alpha)$/;"	f	class:Hure	typeref:typename:double
MAGNETIC_FIELDS_ENABLED	src/defs.hpp	/^#define MAGNETIC_FIELDS_ENABLED /;"	d
MAGNETIC_FIELDS_ENABLED	src/defs.hpp.in	/^#define MAGNETIC_FIELDS_ENABLED /;"	d	file:
MAX	src/fft/plimpton/fft_2d.cpp	/^#define MAX(/;"	d	file:
MAX	src/fft/plimpton/fft_3d.cpp	/^#define MAX(/;"	d	file:
MAX	src/fft/plimpton/remap_2d.cpp	/^#define MAX(/;"	d	file:
MAX	src/fft/plimpton/remap_3d.cpp	/^#define MAX(/;"	d	file:
MAX	src/gravity/obcgravity.cpp	/^#define MAX(/;"	d	file:
MAX	src/pgen/cargrav_test.cpp	/^#define MAX(/;"	d	file:
MAX	src/pgen/cylgrav_test.cpp	/^#define MAX(/;"	d	file:
MAX	src/pgen/polytrope.cpp	/^#define MAX(/;"	d	file:
MAX	src/pgen/torus.cpp	/^#define MAX(/;"	d	file:
MAX_NREGISTER	src/defs.hpp	/^#define MAX_NREGISTER /;"	d
MAX_NREGISTER	src/defs.hpp.in	/^#define MAX_NREGISTER /;"	d	file:
MAX_NSTAGE	src/defs.hpp	/^#define MAX_NSTAGE /;"	d
MAX_NSTAGE	src/defs.hpp.in	/^#define MAX_NSTAGE /;"	d	file:
MESH_MESHBLOCK_TREE_HPP_	src/mesh/meshblock_tree.hpp	/^#define MESH_MESHBLOCK_TREE_HPP_$/;"	d
MESH_MESH_HPP_	src/mesh/mesh.hpp	/^#define MESH_MESH_HPP_$/;"	d
MESH_MESH_REFINEMENT_HPP_	src/mesh/mesh_refinement.hpp	/^#define MESH_MESH_REFINEMENT_HPP_$/;"	d
MGBoundaryData	src/bvals/bvals_mg.hpp	/^typedef struct MGBoundaryData {$/;"	s
MGBoundaryData	src/bvals/bvals_mg.hpp	/^} MGBoundaryData;$/;"	t	typeref:struct:MGBoundaryData
MGBoundaryFunc_t	src/athena.hpp	/^typedef void (*MGBoundaryFunc_t)(AthenaArray<Real> &dst,Real time, int nvar,$/;"	t	typeref:typename:void (*)(AthenaArray<Real> & dst,Real time,int nvar,int is,int ie,int js,int je,int ks,int ke,int ngh,Real x0,Real y0,Real z0,Real dx,Real dy,Real dz)
MGBoundaryFunction_	src/bvals/bvals_mg.hpp	/^  MGBoundaryFunc_t MGBoundaryFunction_[6];$/;"	m	class:MGBoundaryValues	typeref:typename:MGBoundaryFunc_t[6]
MGBoundaryFunction_	src/mesh/mesh.hpp	/^  MGBoundaryFunc_t MGBoundaryFunction_[6];$/;"	m	class:Mesh	typeref:typename:MGBoundaryFunc_t[6]
MGBoundaryFunction_	src/multigrid/multigrid.hpp	/^  MGBoundaryFunc_t MGBoundaryFunction_[6];$/;"	m	class:MultigridDriver	typeref:typename:MGBoundaryFunc_t[6]
MGBoundaryValues	src/bvals/bvals_mg.cpp	/^MGBoundaryValues::MGBoundaryValues(Multigrid *pmg, enum BoundaryFlag *input_bcs,$/;"	f	class:MGBoundaryValues
MGBoundaryValues	src/bvals/bvals_mg.hpp	/^class MGBoundaryValues : public BoundaryBase {$/;"	c
MGGravity	src/gravity/mggravity.hpp	/^  MGGravity(MultigridDriver *pmd, LogicalLocation iloc, int igid, int ilid,$/;"	f	class:MGGravity
MGGravity	src/gravity/mggravity.hpp	/^class MGGravity : public Multigrid {$/;"	c
MGGravityDriver	src/gravity/mggravity.cpp	/^MGGravityDriver::MGGravityDriver(Mesh *pm, MGBoundaryFunc_t *MGBoundary,$/;"	f	class:MGGravityDriver
MGGravityDriver	src/gravity/mggravity.hpp	/^class MGGravityDriver : public MultigridDriver{$/;"	c
MGPeriodicInnerX1	src/multigrid/multigrid.cpp	/^void MGPeriodicInnerX1(AthenaArray<Real> &dst,Real time, int nvar,$/;"	f	typeref:typename:void
MGPeriodicInnerX2	src/multigrid/multigrid.cpp	/^void MGPeriodicInnerX2(AthenaArray<Real> &dst,Real time, int nvar,$/;"	f	typeref:typename:void
MGPeriodicInnerX3	src/multigrid/multigrid.cpp	/^void MGPeriodicInnerX3(AthenaArray<Real> &dst,Real time, int nvar,$/;"	f	typeref:typename:void
MGPeriodicOuterX1	src/multigrid/multigrid.cpp	/^void MGPeriodicOuterX1(AthenaArray<Real> &dst,Real time, int nvar,$/;"	f	typeref:typename:void
MGPeriodicOuterX2	src/multigrid/multigrid.cpp	/^void MGPeriodicOuterX2(AthenaArray<Real> &dst,Real time, int nvar,$/;"	f	typeref:typename:void
MGPeriodicOuterX3	src/multigrid/multigrid.cpp	/^void MGPeriodicOuterX3(AthenaArray<Real> &dst,Real time, int nvar,$/;"	f	typeref:typename:void
MGTask	src/task_list/mg_task_list.hpp	/^struct MGTask {$/;"	s
MG_CLEARBND0	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_CLEARBND0   = 1LL<<7;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_CLEARBND0F	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_CLEARBND0F  = 1LL<<8;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_CLEARBND1B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_CLEARBND1B  = 1LL<<10;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_CLEARBND1R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_CLEARBND1R  = 1LL<<9;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_CLEARBND2B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_CLEARBND2B  = 1LL<<12;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_CLEARBND2R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_CLEARBND2R  = 1LL<<11;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_CLEARBNDL	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_CLEARBNDL   = 1LL<<13;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_FMGPROLONG	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_FMGPROLONG  = 1LL<<40;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_PHYSBND0	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_PHYSBND0    = 1LL<<32;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_PHYSBND1B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_PHYSBND1B   = 1LL<<34;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_PHYSBND1R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_PHYSBND1R   = 1LL<<33;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_PHYSBND2B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_PHYSBND2B   = 1LL<<36;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_PHYSBND2R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_PHYSBND2R   = 1LL<<35;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_PHYSBNDL	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_PHYSBNDL    = 1LL<<37;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_PROLONG	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_PROLONG     = 1LL<<39;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RECVBND0	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RECVBND0    = 1LL<<21;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RECVBND0F	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RECVBND0F   = 1LL<<22;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RECVBND1B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RECVBND1B   = 1LL<<24;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RECVBND1R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RECVBND1R   = 1LL<<23;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RECVBND2B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RECVBND2B   = 1LL<<26;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RECVBND2R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RECVBND2R   = 1LL<<25;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RECVBNDL	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RECVBNDL    = 1LL<<27;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_RESTRICT	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_RESTRICT    = 1LL<<38;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SENDBND0	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SENDBND0    = 1LL<<14;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SENDBND0F	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SENDBND0F   = 1LL<<15;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SENDBND1B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SENDBND1B   = 1LL<<17;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SENDBND1R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SENDBND1R   = 1LL<<16;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SENDBND2B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SENDBND2B   = 1LL<<19;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SENDBND2R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SENDBND2R   = 1LL<<18;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SENDBNDL	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SENDBNDL    = 1LL<<20;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SMOOTH1B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SMOOTH1B    = 1LL<<29;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SMOOTH1R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SMOOTH1R    = 1LL<<28;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SMOOTH2B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SMOOTH2B    = 1LL<<31;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_SMOOTH2R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_SMOOTH2R    = 1LL<<30;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_STARTRECV0	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_STARTRECV0  = 1LL<<0;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_STARTRECV0F	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_STARTRECV0F = 1LL<<1;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_STARTRECV1B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_STARTRECV1B = 1LL<<3;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_STARTRECV1R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_STARTRECV1R = 1LL<<2;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_STARTRECV2B	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_STARTRECV2B = 1LL<<5;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_STARTRECV2R	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_STARTRECV2R = 1LL<<4;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MG_STARTRECVL	src/task_list/mg_task_list.hpp	/^  const uint64_t MG_STARTRECVL  = 1LL<<6;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
MIN	src/fft/plimpton/fft_2d.cpp	/^#define MIN(/;"	d	file:
MIN	src/fft/plimpton/fft_3d.cpp	/^#define MIN(/;"	d	file:
MIN	src/fft/plimpton/remap_2d.cpp	/^#define MIN(/;"	d	file:
MIN	src/fft/plimpton/remap_3d.cpp	/^#define MIN(/;"	d	file:
MPI_ATHENA_REAL	src/athena.hpp	/^  #define MPI_ATHENA_REAL /;"	d
MPI_COMM_FFT	src/fft/athena_fft.hpp	/^  MPI_Comm MPI_COMM_FFT;$/;"	m	class:FFTDriver	typeref:typename:MPI_Comm
MPI_COMM_MULTIGRID	src/multigrid/multigrid.hpp	/^  MPI_Comm MPI_COMM_MULTIGRID;$/;"	m	class:MultigridDriver	typeref:typename:MPI_Comm
MPI_PARALLEL	src/defs.hpp	/^#define MPI_PARALLEL$/;"	d
MULTIGRID_MULTIGRID_HPP_	src/multigrid/multigrid.hpp	/^#define MULTIGRID_MULTIGRID_HPP_$/;"	d
MakeOutputs	src/outputs/outputs.cpp	/^void Outputs::MakeOutputs(Mesh *pm, ParameterInput *pin, bool wtflag) {$/;"	f	class:Outputs	typeref:typename:void
MakeXDMF	src/outputs/athena_hdf5.cpp	/^void ATHDF5Output::MakeXDMF() {$/;"	f	class:ATHDF5Output	typeref:typename:void
Mesh	src/mesh/mesh.cpp	/^Mesh::Mesh(ParameterInput *pin, IOWrapper& resfile, int mesh_test) {$/;"	f	class:Mesh
Mesh	src/mesh/mesh.cpp	/^Mesh::Mesh(ParameterInput *pin, int mesh_test) {$/;"	f	class:Mesh
Mesh	src/mesh/mesh.hpp	/^class Mesh {$/;"	c
MeshBlock	src/mesh/mesh.hpp	/^class MeshBlock {$/;"	c
MeshBlock	src/mesh/meshblock.cpp	/^MeshBlock::MeshBlock(int igid, int ilid, LogicalLocation iloc, RegionSize input_block,$/;"	f	class:MeshBlock
MeshBlock	src/mesh/meshblock.cpp	/^MeshBlock::MeshBlock(int igid, int ilid, Mesh *pm, ParameterInput *pin,$/;"	f	class:MeshBlock
MeshBlockTree	src/mesh/meshblock_tree.cpp	/^MeshBlockTree::MeshBlockTree() {$/;"	f	class:MeshBlockTree
MeshBlockTree	src/mesh/meshblock_tree.cpp	/^MeshBlockTree::MeshBlockTree(MeshBlockTree *parent, int ox, int oy, int oz) {$/;"	f	class:MeshBlockTree
MeshBlockTree	src/mesh/meshblock_tree.hpp	/^class MeshBlockTree {$/;"	c
MeshGenFunc_t	src/athena.hpp	/^typedef Real (*MeshGenFunc_t)(Real x, RegionSize rs);$/;"	t	typeref:typename:Real (*)(Real x,RegionSize rs)
MeshGenerator_	src/mesh/mesh.hpp	/^  MeshGenFunc_t MeshGenerator_[3];$/;"	m	class:Mesh	typeref:typename:MeshGenFunc_t[3]
MeshRefinement	src/mesh/mesh_refinement.cpp	/^MeshRefinement::MeshRefinement(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:MeshRefinement
MeshRefinement	src/mesh/mesh_refinement.hpp	/^class MeshRefinement {$/;"	c
Metric	src/coordinates/coordinates.cpp	/^void Coordinates::Metric(Real x1, Real x2, Real x3, ParameterInput *pin,$/;"	f	class:Coordinates	typeref:typename:void
MetricFunc_t	src/athena.hpp	/^typedef void (*MetricFunc_t)(Real x1, Real x2, Real x3, ParameterInput *pin,$/;"	t	typeref:typename:void (*)(Real x1,Real x2,Real x3,ParameterInput * pin,AthenaArray<Real> & g,AthenaArray<Real> & g_inv,AthenaArray<Real> & dg_dx1,AthenaArray<Real> & dg_dx2,AthenaArray<Real> & dg_dx3)
Minkowski	src/coordinates/coordinates.hpp	/^class Minkowski : public Coordinates {$/;"	c
Minkowski	src/coordinates/minkowski.cpp	/^Minkowski::Minkowski(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Minkowski
ModifyFromCmdline	src/parameter_input.cpp	/^void ParameterInput::ModifyFromCmdline(int argc, char *argv[]) {$/;"	f	class:ParameterInput	typeref:typename:void
MpiInitialize	src/fft/athena_fft.cpp	/^void FFTBlock::MpiInitialize() {$/;"	f	class:FFTBlock	typeref:typename:void
Multigrid	src/multigrid/multigrid.cpp	/^Multigrid::Multigrid(MultigridDriver *pmd, LogicalLocation iloc, int igid, int ilid,$/;"	f	class:Multigrid
Multigrid	src/multigrid/multigrid.hpp	/^class Multigrid {$/;"	c
MultigridDriver	src/multigrid/multigrid.hpp	/^class MultigridDriver {$/;"	c
MultigridDriver	src/multigrid/multigrid_driver.cpp	/^MultigridDriver::MultigridDriver(Mesh *pm, MGBoundaryFunc_t *MGBoundary, int invar) {$/;"	f	class:MultigridDriver
MultigridTaskList	src/task_list/mg_task_list.hpp	/^  explicit MultigridTaskList(MultigridDriver *pmd) : pmy_mgdriver_(pmd) {}$/;"	f	class:MultigridTaskList
MultigridTaskList	src/task_list/mg_task_list.hpp	/^class MultigridTaskList {$/;"	c
MultigridTaskNames	src/task_list/mg_task_list.hpp	/^namespace MultigridTaskNames {$/;"	n
N	src/pgen/cylgrav_test.cpp	/^double Hure::N(double R, double a, double bet, double zet, double alpha)$/;"	f	class:Hure	typeref:typename:double
NDIV	src/utils/ran2.cpp	/^#define NDIV /;"	d	file:
NEIGHBOR_CORNER	src/bvals/bvals.hpp	/^enum NeighborType {NEIGHBOR_NONE=0, NEIGHBOR_FACE=1, NEIGHBOR_EDGE=2, NEIGHBOR_CORNER=3};$/;"	e	enum:NeighborType
NEIGHBOR_EDGE	src/bvals/bvals.hpp	/^enum NeighborType {NEIGHBOR_NONE=0, NEIGHBOR_FACE=1, NEIGHBOR_EDGE=2, NEIGHBOR_CORNER=3};$/;"	e	enum:NeighborType
NEIGHBOR_FACE	src/bvals/bvals.hpp	/^enum NeighborType {NEIGHBOR_NONE=0, NEIGHBOR_FACE=1, NEIGHBOR_EDGE=2, NEIGHBOR_CORNER=3};$/;"	e	enum:NeighborType
NEIGHBOR_NONE	src/bvals/bvals.hpp	/^enum NeighborType {NEIGHBOR_NONE=0, NEIGHBOR_FACE=1, NEIGHBOR_EDGE=2, NEIGHBOR_CORNER=3};$/;"	e	enum:NeighborType
NEW_DT	src/task_list/task_list.hpp	/^  const uint64_t NEW_DT  =1LL<<39;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
NFIELD	src/defs.hpp	/^#define NFIELD /;"	d
NFIELD	src/defs.hpp.in	/^#define NFIELD /;"	d	file:
NGHOST	src/defs.hpp	/^#define NGHOST /;"	d
NGHOST	src/defs.hpp.in	/^#define NGHOST /;"	d	file:
NHISTORY_VARS	src/outputs/history.cpp	/^#define NHISTORY_VARS /;"	d	file:
NHYDRO	src/defs.hpp	/^#define NHYDRO /;"	d
NHYDRO	src/defs.hpp.in	/^#define NHYDRO /;"	d	file:
NMETRIC	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	e	enum:__anon1e1ee2430503
NONE	src/task_list/grav_task_list.hpp	/^  const uint64_t NONE=0;$/;"	v	namespace:GravitySolverTaskNames	typeref:typename:const uint64_t
NONE	src/task_list/mg_task_list.hpp	/^  const uint64_t NONE           = 0;$/;"	v	namespace:MultigridTaskNames	typeref:typename:const uint64_t
NONE	src/task_list/task_list.hpp	/^  const uint64_t NONE=0;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
NON_BAROTROPIC_EOS	src/defs.hpp	/^#define NON_BAROTROPIC_EOS /;"	d
NON_BAROTROPIC_EOS	src/defs.hpp.in	/^#define NON_BAROTROPIC_EOS /;"	d	file:
NOT_OPENMP_PARALLEL	src/defs.hpp	/^#define NOT_OPENMP_PARALLEL$/;"	d
NTAB	src/utils/ran2.cpp	/^#define NTAB /;"	d	file:
NTH	src/gravity/obcgravity.hpp	/^enum CarBoundaryFace {STH=0, NTH=1, WST=2, EST=3, CBOT=4, CTOP=5};$/;"	e	enum:CarBoundaryFace
NTRIANGULAR	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
NWAVE	src/defs.hpp	/^#define NWAVE /;"	d
NWAVE	src/defs.hpp.in	/^#define NWAVE /;"	d	file:
NeighborBlock	src/bvals/bvals.hpp	/^  NeighborBlock() : rank(-1), level(-1), gid(-1), lid(-1), ox1(-1), ox2(-1), ox3(-1),$/;"	f	struct:NeighborBlock
NeighborBlock	src/bvals/bvals.hpp	/^typedef struct NeighborBlock {$/;"	s
NeighborBlock	src/bvals/bvals.hpp	/^} NeighborBlock;$/;"	t	typeref:struct:NeighborBlock
NeighborIndexes	src/bvals/bvals.hpp	/^  NeighborIndexes() {$/;"	f	struct:NeighborIndexes
NeighborIndexes	src/bvals/bvals.hpp	/^typedef struct NeighborIndexes {$/;"	s
NeighborIndexes	src/bvals/bvals.hpp	/^} NeighborIndexes;$/;"	t	typeref:struct:NeighborIndexes
NeighborType	src/bvals/bvals.hpp	/^enum NeighborType {NEIGHBOR_NONE=0, NEIGHBOR_FACE=1, NEIGHBOR_EDGE=2, NEIGHBOR_CORNER=3};$/;"	g
NewAthenaArray	src/athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx1) {$/;"	f	class:AthenaArray	typeref:typename:void
NewAthenaArray	src/athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx2, int nx1) {$/;"	f	class:AthenaArray	typeref:typename:void
NewAthenaArray	src/athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx3, int nx2, int nx1) {$/;"	f	class:AthenaArray	typeref:typename:void
NewAthenaArray	src/athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx4, int nx3, int nx2,$/;"	f	class:AthenaArray	typeref:typename:void
NewAthenaArray	src/athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx5, int nx4, int nx3,$/;"	f	class:AthenaArray	typeref:typename:void
NewBlockTimeStep	src/hydro/new_blockdt.cpp	/^Real Hydro::NewBlockTimeStep(void) {$/;"	f	class:Hydro	typeref:typename:Real
NewBlockTimeStep	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::NewBlockTimeStep(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
NewFieldDiffusionDt	src/field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::NewFieldDiffusionDt(Real &dt_oa, Real &dt_h) {$/;"	f	class:FieldDiffusion	typeref:typename:void
NewHydroDiffusionDt	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::NewHydroDiffusionDt(Real &dt_vis, Real &dt_cnd) {$/;"	f	class:HydroDiffusion	typeref:typename:void
NewTimeStep	src/mesh/mesh.cpp	/^void Mesh::NewTimeStep(void) {$/;"	f	class:Mesh	typeref:typename:void
Noh3DOuterX1	src/pgen/noh.cpp	/^void Noh3DOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
Noh3DOuterX2	src/pgen/noh.cpp	/^void Noh3DOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
Noh3DOuterX3	src/pgen/noh.cpp	/^void Noh3DOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f	typeref:typename:void
Nx	src/fft/athena_fft.hpp	/^  int Nx[3], nx[3], disp[3];$/;"	m	class:FFTBlock	typeref:typename:int[3]
Nx	src/fft/athena_fft.hpp	/^  int Nx[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3]
Nx1	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
Nx1	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3;$/;"	m	class:OBCGravityCar	typeref:typename:int
Nx2	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
Nx2	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3;$/;"	m	class:OBCGravityCar	typeref:typename:int
Nx3	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
Nx3	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3;$/;"	m	class:OBCGravityCar	typeref:typename:int
OBCGravityCar	src/gravity/obcgravity.cpp	/^OBCGravityCar::OBCGravityCar(OBCGravityDriver *pod, MeshBlock *pmb, ParameterInput *pin)$/;"	f	class:OBCGravityCar
OBCGravityCar	src/gravity/obcgravity.hpp	/^class OBCGravityCar : public Gravity {$/;"	c
OBCGravityCyl	src/gravity/obcgravity.cpp	/^OBCGravityCyl::OBCGravityCyl(OBCGravityDriver *pod, MeshBlock *pmb, ParameterInput *pin)$/;"	f	class:OBCGravityCyl
OBCGravityCyl	src/gravity/obcgravity.hpp	/^class OBCGravityCyl : public Gravity {$/;"	c
OBCGravityDriver	src/gravity/obcgravity.cpp	/^OBCGravityDriver::OBCGravityDriver(Mesh *pm, ParameterInput *pin)$/;"	f	class:OBCGravityDriver
OBCGravityDriver	src/gravity/obcgravity.hpp	/^class OBCGravityDriver {$/;"	c
ONE_3RD	src/defs.hpp	/^#define ONE_3RD /;"	d
ONE_3RD	src/defs.hpp.in	/^#define ONE_3RD /;"	d	file:
ONE_OVER_SQRT2	src/defs.hpp	/^#define ONE_OVER_SQRT2 /;"	d
ONE_OVER_SQRT2	src/defs.hpp.in	/^#define ONE_OVER_SQRT2 /;"	d	file:
OUT	src/gravity/obcgravity.hpp	/^enum CylBoundaryFace {TOP=0, BOT=1, INN=2, OUT=3};$/;"	e	enum:CylBoundaryFace
OUTER_X1	src/bvals/bvals.hpp	/^enum BoundaryFace {FACE_UNDEF=-1, INNER_X1=0, OUTER_X1=1, INNER_X2=2, OUTER_X2=3,$/;"	e	enum:BoundaryFace
OUTER_X2	src/bvals/bvals.hpp	/^enum BoundaryFace {FACE_UNDEF=-1, INNER_X1=0, OUTER_X1=1, INNER_X2=2, OUTER_X2=3,$/;"	e	enum:BoundaryFace
OUTER_X3	src/bvals/bvals.hpp	/^                   INNER_X3=4, OUTER_X3=5};$/;"	e	enum:BoundaryFace
OUTFLOW_BNDRY	src/bvals/bvals.hpp	/^enum BoundaryFlag {BLOCK_BNDRY=-1, BNDRY_UNDEF=0, REFLECTING_BNDRY=1, OUTFLOW_BNDRY=2,$/;"	e	enum:BoundaryFlag
OUTPUTS_IO_WRAPPER_HPP_	src/outputs/io_wrapper.hpp	/^#define OUTPUTS_IO_WRAPPER_HPP_$/;"	d
OUTPUTS_OUTPUTS_HPP_	src/outputs/outputs.hpp	/^#define OUTPUTS_OUTPUTS_HPP_$/;"	d
OhmicEMF	src/field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::OhmicEMF(const FaceField &b, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion	typeref:typename:void
Omega_0	src/pgen/hb3.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
Omega_0	src/pgen/hgb.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
Omega_0	src/pgen/ssheet.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
Omega_0	src/pgen/strat.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
Omega_0_	src/bvals/bvals.hpp	/^  Real Omega_0_, qshear_;       \/\/ orbital freq and shear rate$/;"	m	class:BoundaryValues	typeref:typename:Real
Omega_0_	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real Omega_0_, qshear_; \/\/ Orbital freq and shear rate$/;"	m	class:HydroSourceTerms	typeref:typename:Real
OneStepToCoarser	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::OneStepToCoarser(int nsmooth) {$/;"	f	class:MultigridDriver	typeref:typename:void
OneStepToFiner	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::OneStepToFiner(int nsmooth) {$/;"	f	class:MultigridDriver	typeref:typename:void
Open	src/outputs/io_wrapper.cpp	/^int IOWrapper::Open(const char* fname, enum rwmode rw) {$/;"	f	class:IOWrapper	typeref:typename:int
OutflowInnerX1	src/bvals/outflow.cpp	/^void OutflowInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
OutflowInnerX2	src/bvals/outflow.cpp	/^void OutflowInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
OutflowInnerX3	src/bvals/outflow.cpp	/^void OutflowInnerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
OutflowOuterX1	src/bvals/outflow.cpp	/^void OutflowOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
OutflowOuterX2	src/bvals/outflow.cpp	/^void OutflowOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
OutflowOuterX3	src/bvals/outflow.cpp	/^void OutflowOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
OutputData	src/outputs/outputs.hpp	/^  OutputData() : pnext(NULL),  pprev(NULL) {}$/;"	f	struct:OutputData
OutputData	src/outputs/outputs.hpp	/^typedef struct OutputData {$/;"	s
OutputData	src/outputs/outputs.hpp	/^} OutputData;$/;"	t	typeref:struct:OutputData
OutputMeshStructure	src/mesh/mesh.cpp	/^void Mesh::OutputMeshStructure(int dim) {$/;"	f	class:Mesh	typeref:typename:void
OutputParameters	src/outputs/outputs.hpp	/^  OutputParameters() : output_slicex1(false),output_slicex2(false),output_slicex3(false),$/;"	f	struct:OutputParameters
OutputParameters	src/outputs/outputs.hpp	/^typedef struct OutputParameters {$/;"	s
OutputParameters	src/outputs/outputs.hpp	/^} OutputParameters;$/;"	t	typeref:struct:OutputParameters
OutputType	src/outputs/outputs.cpp	/^OutputType::OutputType(OutputParameters oparams) {$/;"	f	class:OutputType
OutputType	src/outputs/outputs.hpp	/^class OutputType {$/;"	c
Outputs	src/outputs/outputs.cpp	/^Outputs::Outputs(Mesh *pm, ParameterInput *pin) {$/;"	f	class:Outputs
Outputs	src/outputs/outputs.hpp	/^class Outputs {$/;"	c
P0	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
P1P	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
P2P	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
P3P	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
PACK_ARRAY	src/fft/plimpton/pack_2d.cpp	/^#define PACK_ARRAY$/;"	d	file:
PACK_ARRAY	src/fft/plimpton/pack_3d.cpp	/^#define PACK_ARRAY$/;"	d	file:
PARAMETER_INPUT_HPP_	src/parameter_input.hpp	/^#define PARAMETER_INPUT_HPP_$/;"	d
PB	src/gravity/obcgravity.hpp	/^enum CarDecompNames {CXB=0, CX1P=1, CX2P=2, CX3P=3, PB=4, P1P=5, P2P=6, P3P=7,$/;"	e	enum:CarDecompNames
PERIODIC_BNDRY	src/bvals/bvals.hpp	/^                   USER_BNDRY=3, PERIODIC_BNDRY=4, POLAR_BNDRY=5, POLAR_BNDRY_WEDGE=6,$/;"	e	enum:BoundaryFlag
PHY_BVAL	src/task_list/task_list.hpp	/^  const uint64_t PHY_BVAL=1LL<<37;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
PI	src/defs.hpp	/^#define PI /;"	d
PI	src/defs.hpp.in	/^#define PI /;"	d	file:
PLIMPTON_FFT_2D	src/fft/plimpton/fft_2d.h	/^#define PLIMPTON_FFT_2D$/;"	d
PLIMPTON_FFT_3D	src/fft/plimpton/fft_3d.h	/^#define PLIMPTON_FFT_3D$/;"	d
PLIMPTON_PACK_3D	src/fft/plimpton/pack_2d.h	/^#define PLIMPTON_PACK_3D$/;"	d
PLIMPTON_PACK_3D	src/fft/plimpton/pack_3d.h	/^#define PLIMPTON_PACK_3D$/;"	d
PLIMPTON_REMAP_2D	src/fft/plimpton/remap_2d.h	/^#define PLIMPTON_REMAP_2D$/;"	d
PLIMPTON_REMAP_3D	src/fft/plimpton/remap_3d.h	/^#define PLIMPTON_REMAP_3D$/;"	d
POLAR_BNDRY	src/bvals/bvals.hpp	/^                   USER_BNDRY=3, PERIODIC_BNDRY=4, POLAR_BNDRY=5, POLAR_BNDRY_WEDGE=6,$/;"	e	enum:BoundaryFlag
POLAR_BNDRY_WEDGE	src/bvals/bvals.hpp	/^                   USER_BNDRY=3, PERIODIC_BNDRY=4, POLAR_BNDRY=5, POLAR_BNDRY_WEDGE=6,$/;"	e	enum:BoundaryFlag
PROBLEM_GENERATOR	src/defs.hpp	/^#define PROBLEM_GENERATOR /;"	d
PROBLEM_GENERATOR	src/defs.hpp.in	/^#define PROBLEM_GENERATOR /;"	d	file:
PROLONG	src/task_list/task_list.hpp	/^  const uint64_t PROLONG =1LL<<35;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
PSI	src/gravity/obcgravity.hpp	/^enum CylBndryDcmp {BLOCK=0, FFT_LONG=1, FFT_SHORT=2, PSI=3, SIGv=4, SIGr=5};$/;"	e	enum:CylBndryDcmp
Pack3DData	src/utils/buffer_utils.cpp	/^void Pack3DData(AthenaArray<Real> &src, Real *buf,$/;"	f	namespace:BufferUtility	typeref:typename:void
Pack4DData	src/utils/buffer_utils.cpp	/^void Pack4DData(AthenaArray<Real> &src, Real *buf, int sn, int en,$/;"	f	namespace:BufferUtility	typeref:typename:void
ParameterDump	src/parameter_input.cpp	/^void ParameterInput::ParameterDump(std::ostream& os) {$/;"	f	class:ParameterInput	typeref:typename:void
ParameterInput	src/parameter_input.cpp	/^ParameterInput::ParameterInput() {$/;"	f	class:ParameterInput
ParameterInput	src/parameter_input.hpp	/^class ParameterInput {$/;"	c
ParseLine	src/parameter_input.cpp	/^void ParameterInput::ParseLine(InputBlock *pib, std::string line,$/;"	f	class:ParameterInput	typeref:typename:void
PermuteAxis	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::PermuteAxis(int npermute) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
PermuteProc	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::PermuteProc(int npermute) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
Permute_	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::Permute_(int loc[], int npermute) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
Perturb	src/fft/turbulence.cpp	/^void TurbulenceDriver::Perturb(Real dt) {$/;"	f	class:TurbulenceDriver	typeref:typename:void
Phi	src/pgen/cylgrav_test.cpp	/^double Hure::Phi(double R, double phi, double z) {$/;"	f	class:Hure	typeref:typename:double
PhysicalBoundary	src/task_list/grav_task_list.cpp	/^enum TaskStatus GravitySolverTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:GravitySolverTaskList	typeref:enum:TaskStatus
PhysicalBoundary	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::PhysicalBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
PhysicalBoundary	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
PiecewiseLinearX1	src/reconstruct/plm.cpp	/^void Reconstruction::PiecewiseLinearX1(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
PiecewiseLinearX2	src/reconstruct/plm.cpp	/^void Reconstruction::PiecewiseLinearX2(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
PiecewiseLinearX3	src/reconstruct/plm.cpp	/^void Reconstruction::PiecewiseLinearX3(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
PiecewiseParabolicX1	src/reconstruct/ppm.cpp	/^void Reconstruction::PiecewiseParabolicX1(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
PiecewiseParabolicX2	src/reconstruct/ppm.cpp	/^void Reconstruction::PiecewiseParabolicX2(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
PiecewiseParabolicX3	src/reconstruct/ppm.cpp	/^void Reconstruction::PiecewiseParabolicX3(MeshBlock *pmb,$/;"	f	class:Reconstruction	typeref:typename:void
PointMass	src/hydro/srcterms/pointmass.cpp	/^void HydroSourceTerms::PointMass(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms	typeref:typename:void
PolarAxisFieldAverage	src/bvals/bvals_fc.cpp	/^void BoundaryValues::PolarAxisFieldAverage(FaceField &dst) {$/;"	f	class:BoundaryValues	typeref:typename:void
PolarNeighborBlock	src/bvals/bvals.hpp	/^typedef struct PolarNeighborBlock {$/;"	s
PolarNeighborBlock	src/bvals/bvals.hpp	/^} PolarNeighborBlock;$/;"	t	typeref:struct:PolarNeighborBlock
PolarSingleCellCentered	src/bvals/bvals_cc.cpp	/^void BoundaryValues::PolarSingleCellCentered(AthenaArray<Real> &dst, int ns, int ne) {$/;"	f	class:BoundaryValues	typeref:typename:void
PolarSingleEMF	src/bvals/flux_correction_fc.cpp	/^void BoundaryValues::PolarSingleEMF(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
PolarSingleField	src/bvals/bvals_fc.cpp	/^void BoundaryValues::PolarSingleField(FaceField &dst) {$/;"	f	class:BoundaryValues	typeref:typename:void
PolarWedgeInnerX2	src/bvals/polarwedge.cpp	/^void PolarWedgeInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
PolarWedgeOuterX2	src/bvals/polarwedge.cpp	/^void PolarWedgeOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
PoverR	src/pgen/disk.cpp	/^static Real PoverR(const Real rad, const Real phi, const Real z) {$/;"	f	typeref:typename:Real	file:
PowerSpectrum	src/fft/turbulence.cpp	/^void TurbulenceDriver::PowerSpectrum(AthenaFFTComplex *amp) {$/;"	f	class:TurbulenceDriver	typeref:typename:void
PoyntingFlux	src/field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::PoyntingFlux(EdgeField &e, const AthenaArray<Real> &bc) {$/;"	f	class:FieldDiffusion	typeref:typename:void
PrimToLocal1	src/coordinates/coordinates.hpp	/^  virtual void PrimToLocal1(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
PrimToLocal1	src/coordinates/gr_user.cpp	/^void GRUser::PrimToLocal1(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
PrimToLocal1	src/coordinates/kerr-schild.cpp	/^void KerrSchild::PrimToLocal1(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
PrimToLocal1	src/coordinates/minkowski.cpp	/^void Minkowski::PrimToLocal1(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
PrimToLocal1	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::PrimToLocal1(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
PrimToLocal2	src/coordinates/coordinates.hpp	/^  virtual void PrimToLocal2(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
PrimToLocal2	src/coordinates/gr_user.cpp	/^void GRUser::PrimToLocal2(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
PrimToLocal2	src/coordinates/kerr-schild.cpp	/^void KerrSchild::PrimToLocal2(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
PrimToLocal2	src/coordinates/minkowski.cpp	/^void Minkowski::PrimToLocal2(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
PrimToLocal2	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::PrimToLocal2(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
PrimToLocal3	src/coordinates/coordinates.hpp	/^  virtual void PrimToLocal3(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
PrimToLocal3	src/coordinates/gr_user.cpp	/^void GRUser::PrimToLocal3(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser	typeref:typename:void
PrimToLocal3	src/coordinates/kerr-schild.cpp	/^void KerrSchild::PrimToLocal3(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild	typeref:typename:void
PrimToLocal3	src/coordinates/minkowski.cpp	/^void Minkowski::PrimToLocal3(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski	typeref:typename:void
PrimToLocal3	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::PrimToLocal3(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild	typeref:typename:void
PrimitiveToConserved	src/eos/adiabatic_hydro.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConserved	src/eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConserved	src/eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConserved	src/eos/adiabatic_mhd.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConserved	src/eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConserved	src/eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConserved	src/eos/isothermal_hydro.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConserved	src/eos/isothermal_mhd.cpp	/^void EquationOfState::PrimitiveToConserved(const AthenaArray<Real> &prim,$/;"	f	class:EquationOfState	typeref:typename:void
PrimitiveToConservedSingle	src/eos/adiabatic_hydro_gr.cpp	/^static void PrimitiveToConservedSingle(const AthenaArray<Real> &prim, Real gamma_adi,$/;"	f	typeref:typename:void	file:
PrimitiveToConservedSingle	src/eos/adiabatic_mhd_gr.cpp	/^static void PrimitiveToConservedSingle(const AthenaArray<Real> &prim, Real gamma_adi,$/;"	f	typeref:typename:void	file:
Primitives	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::Primitives(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
PrintIndex	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::PrintIndex(void) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
PrintNormFactor	src/fft/athena_fft.hpp	/^  void PrintNormFactor(void) {std::cout << norm_factor_ << std::endl;}$/;"	f	class:FFTBlock	typeref:typename:void
PrintSource	src/fft/athena_fft.cpp	/^void FFTBlock::PrintSource(int in) {$/;"	f	class:FFTBlock	typeref:typename:void
ProblemGenerator	src/pgen/blast.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/cargrav_test.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin)$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/cpaw.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/cylgrav_test.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin)$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/disk.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/dmr.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/fft.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/field_loop.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/field_loop_poles.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/gr_blast.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/gr_bondi.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/gr_geodesic_infall.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/gr_linear_wave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/gr_mhd_inflow.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/gr_shock_tube.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/gr_torus.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/hb3.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/hgb.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/jeans.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/jet.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/kh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/linear_wave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/lw_implode.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/magnoh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/noh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/orszag_tang.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/poisson.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/poly_equil.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/polytrope.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin)$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/resist.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/rotor.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/rt.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/shk_cloud.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/shock_tube.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/shu_osher.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/ssheet.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/strat.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/torus.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin)$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/turb.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/twoibw.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProblemGenerator	src/pgen/visc.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
ProjectPressureInnerX2	src/pgen/rt.cpp	/^void ProjectPressureInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ProjectPressureInnerX3	src/pgen/rt.cpp	/^void ProjectPressureInnerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ProjectPressureOuterX2	src/pgen/rt.cpp	/^void ProjectPressureOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ProjectPressureOuterX3	src/pgen/rt.cpp	/^void ProjectPressureOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
Prolongate	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::Prolongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
ProlongateAndCorrect	src/multigrid/multigrid.cpp	/^void Multigrid::ProlongateAndCorrect(void) {$/;"	f	class:Multigrid	typeref:typename:void
ProlongateBoundaries	src/bvals/bvals.cpp	/^void BoundaryValues::ProlongateBoundaries(AthenaArray<Real> &pdst,$/;"	f	class:BoundaryValues	typeref:typename:void
ProlongateCellCenteredValues	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateCellCenteredValues(const AthenaArray<Real> &coarse,$/;"	f	class:MeshRefinement	typeref:typename:void
ProlongateInternalField	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateInternalField(FaceField &fine,$/;"	f	class:MeshRefinement	typeref:typename:void
ProlongateSharedFieldX1	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateSharedFieldX1(const AthenaArray<Real> &coarse,$/;"	f	class:MeshRefinement	typeref:typename:void
ProlongateSharedFieldX2	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateSharedFieldX2(const AthenaArray<Real> &coarse,$/;"	f	class:MeshRefinement	typeref:typename:void
ProlongateSharedFieldX3	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateSharedFieldX3(const AthenaArray<Real> &coarse,$/;"	f	class:MeshRefinement	typeref:typename:void
Prolongation	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::Prolongation(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
QNResidual	src/eos/adiabatic_hydro_gr.cpp	/^static Real QNResidual(Real w_guess, Real d, Real q_n, Real qq_sq, Real gamma_adi) {$/;"	f	typeref:typename:Real	file:
QNResidualPrime	src/eos/adiabatic_hydro_gr.cpp	/^static Real QNResidualPrime(Real w_guess, Real d, Real qq_sq, Real gamma_adi) {$/;"	f	typeref:typename:Real	file:
QuadraticRoot	src/pgen/gr_linear_wave.cpp	/^static Real QuadraticRoot(Real a1, Real a0, bool greater_root) {$/;"	f	typeref:typename:Real	file:
QuarticRoots	src/pgen/gr_linear_wave.cpp	/^static void QuarticRoots(Real a3, Real a2, Real a1, Real a0, Real *px1, Real *px2,$/;"	f	typeref:typename:void	file:
QuickCreatePlan	src/fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::QuickCreatePlan(AthenaFFTComplex *data,$/;"	f	class:FFTBlock	typeref:typename:AthenaFFTPlan *
QuickCreatePlan	src/fft/fft_driver.cpp	/^void FFTDriver::QuickCreatePlan(void) {$/;"	f	class:FFTDriver	typeref:typename:void
R	src/pgen/cylgrav_test.cpp	/^  double R;$/;"	m	struct:Fparams	typeref:typename:double	file:
RADIATION_ENABLED	src/defs.hpp	/^#define RADIATION_ENABLED /;"	d
RADIATION_ENABLED	src/defs.hpp.in	/^#define RADIATION_ENABLED /;"	d	file:
RECONSTRUCT_RECONSTRUCTION_HPP_	src/reconstruct/reconstruction.hpp	/^#define RECONSTRUCT_RECONSTRUCTION_HPP_$/;"	d
RECV_CHM	src/task_list/task_list.hpp	/^  const uint64_t RECV_CHM=1LL<<34;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_CHMFLX	src/task_list/task_list.hpp	/^  const uint64_t RECV_CHMFLX=1LL<<18;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_EMFSH	src/task_list/task_list.hpp	/^  const uint64_t RECV_EMFSH=1LL<<50;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_FLD	src/task_list/task_list.hpp	/^  const uint64_t RECV_FLD=1LL<<32;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_FLDFLX	src/task_list/task_list.hpp	/^  const uint64_t RECV_FLDFLX=1LL<<16;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_FLDSH	src/task_list/task_list.hpp	/^  const uint64_t RECV_FLDSH=1LL<<51;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_GRAV	src/task_list/task_list.hpp	/^  const uint64_t RECV_GRAV=1LL<<43;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_GRAV_BND	src/task_list/grav_task_list.hpp	/^  const uint64_t RECV_GRAV_BND=1LL<<3;$/;"	v	namespace:GravitySolverTaskNames	typeref:typename:const uint64_t
RECV_HYD	src/task_list/task_list.hpp	/^  const uint64_t RECV_HYD=1LL<<31;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_HYDFLX	src/task_list/task_list.hpp	/^  const uint64_t RECV_HYDFLX=1LL<<15;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_HYDSH	src/task_list/task_list.hpp	/^  const uint64_t RECV_HYDSH=1LL<<49;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_RAD	src/task_list/task_list.hpp	/^  const uint64_t RECV_RAD=1LL<<33;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RECV_RADFLX	src/task_list/task_list.hpp	/^  const uint64_t RECV_RADFLX=1LL<<17;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
REFLECTING_BNDRY	src/bvals/bvals.hpp	/^enum BoundaryFlag {BLOCK_BNDRY=-1, BNDRY_UNDEF=0, REFLECTING_BNDRY=1, OUTFLOW_BNDRY=2,$/;"	e	enum:BoundaryFlag
RELATIVISTIC_DYNAMICS	src/defs.hpp	/^#define RELATIVISTIC_DYNAMICS /;"	d
RELATIVISTIC_DYNAMICS	src/defs.hpp.in	/^#define RELATIVISTIC_DYNAMICS /;"	d	file:
RIEMANN_SOLVER	src/defs.hpp	/^#define RIEMANN_SOLVER /;"	d
RIEMANN_SOLVER	src/defs.hpp.in	/^#define RIEMANN_SOLVER /;"	d	file:
RMAP_EMFSH	src/task_list/task_list.hpp	/^  const uint64_t RMAP_EMFSH=1LL<<52;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
RNMX	src/utils/ran2.cpp	/^#define RNMX /;"	d	file:
RaiseVectorCell	src/coordinates/coordinates.hpp	/^  virtual void RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:Coordinates	typeref:typename:void
RaiseVectorCell	src/coordinates/gr_user.cpp	/^void GRUser::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j, int i,$/;"	f	class:GRUser	typeref:typename:void
RaiseVectorCell	src/coordinates/kerr-schild.cpp	/^void KerrSchild::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:KerrSchild	typeref:typename:void
RaiseVectorCell	src/coordinates/minkowski.cpp	/^void Minkowski::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:Minkowski	typeref:typename:void
RaiseVectorCell	src/coordinates/schwarzschild.cpp	/^void Schwarzschild::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:Schwarzschild	typeref:typename:void
Read	src/outputs/io_wrapper.cpp	/^size_t IOWrapper::Read(void *buf, IOWrapperSize_t size, IOWrapperSize_t count) {$/;"	f	class:IOWrapper	typeref:typename:size_t
Read_all	src/outputs/io_wrapper.cpp	/^size_t IOWrapper::Read_all(void *buf, IOWrapperSize_t size, IOWrapperSize_t count) {$/;"	f	class:IOWrapper	typeref:typename:size_t
Read_at_all	src/outputs/io_wrapper.cpp	/^size_t IOWrapper::Read_at_all(void *buf, IOWrapperSize_t size,$/;"	f	class:IOWrapper	typeref:typename:size_t
Real	src/athena.hpp	/^  typedef double Real;$/;"	t	typeref:typename:double
Real	src/athena.hpp	/^  typedef float Real;$/;"	t	typeref:typename:float
ReceiveBoundary	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::ReceiveBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
ReceiveBoundaryFace	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::ReceiveBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
ReceiveCellCenteredBoundaryBuffers	src/bvals/bvals_cc.cpp	/^bool BoundaryValues::ReceiveCellCenteredBoundaryBuffers(AthenaArray<Real> &dst,$/;"	f	class:BoundaryValues	typeref:typename:bool
ReceiveCellCenteredBoundaryBuffersWithWait	src/bvals/bvals_cc.cpp	/^void BoundaryValues::ReceiveCellCenteredBoundaryBuffersWithWait(AthenaArray<Real> &dst,$/;"	f	class:BoundaryValues	typeref:typename:void
ReceiveEMFCorrection	src/bvals/flux_correction_fc.cpp	/^bool BoundaryValues::ReceiveEMFCorrection(void) {$/;"	f	class:BoundaryValues	typeref:typename:bool
ReceiveEMFShearingboxBoundaryCorrection	src/bvals/bvals_emf.cpp	/^bool BoundaryValues::ReceiveEMFShearingboxBoundaryCorrection(void) {$/;"	f	class:BoundaryValues	typeref:typename:bool
ReceiveFieldBoundaryBuffers	src/bvals/bvals_fc.cpp	/^bool BoundaryValues::ReceiveFieldBoundaryBuffers(FaceField &dst) {$/;"	f	class:BoundaryValues	typeref:typename:bool
ReceiveFieldBoundaryBuffersWithWait	src/bvals/bvals_fc.cpp	/^void BoundaryValues::ReceiveFieldBoundaryBuffersWithWait(FaceField &dst) {$/;"	f	class:BoundaryValues	typeref:typename:void
ReceiveFieldShearingboxBoundaryBuffers	src/bvals/bvals_field.cpp	/^bool BoundaryValues::ReceiveFieldShearingboxBoundaryBuffers(FaceField &dst) {$/;"	f	class:BoundaryValues	typeref:typename:bool
ReceiveFluxCorrection	src/bvals/flux_correction_cc.cpp	/^bool BoundaryValues::ReceiveFluxCorrection(enum FluxCorrectionType type) {$/;"	f	class:BoundaryValues	typeref:typename:bool
ReceiveGravityBoundary	src/task_list/grav_task_list.cpp	/^enum TaskStatus GravitySolverTaskList::ReceiveGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:GravitySolverTaskList	typeref:enum:TaskStatus
ReceiveGravityBoundaryBuffers	src/bvals/bvals_grav.cpp	/^bool GravityBoundaryValues::ReceiveGravityBoundaryBuffers(AthenaArray<Real> &dst) {$/;"	f	class:GravityBoundaryValues	typeref:typename:bool
ReceiveHydroShearingboxBoundaryBuffers	src/bvals/bvals_shear.cpp	/^bool BoundaryValues::ReceiveHydroShearingboxBoundaryBuffers(AthenaArray<Real> &dst) {$/;"	f	class:BoundaryValues	typeref:typename:bool
ReceiveMultigridBoundaryBuffers	src/bvals/bvals_mg.cpp	/^bool MGBoundaryValues::ReceiveMultigridBoundaryBuffers(AthenaArray<Real> &dst,$/;"	f	class:MGBoundaryValues	typeref:typename:bool
Reconstruction	src/reconstruct/reconstruction.cpp	/^Reconstruction::Reconstruction(MeshBlock *pmb, ParameterInput *pin) {$/;"	f	class:Reconstruction
Reconstruction	src/reconstruct/reconstruction.hpp	/^class Reconstruction {$/;"	c
Refine	src/mesh/meshblock_tree.cpp	/^void MeshBlockTree::Refine(MeshBlockTree& root, int dim, enum BoundaryFlag* mesh_bcs,$/;"	f	class:MeshBlockTree	typeref:typename:void
RefinementCondition	src/pgen/dmr.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	typeref:typename:int
RefinementCondition	src/pgen/kh.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	typeref:typename:int
RefinementCondition	src/pgen/linear_wave.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	typeref:typename:int
RefinementCondition	src/pgen/rt.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	typeref:typename:int
RefinementConditions	src/mesh/mesh_refinement.cpp	/^namespace RefinementConditions {$/;"	n	file:
ReflectInnerX1	src/bvals/reflect.cpp	/^void ReflectInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ReflectInnerX2	src/bvals/reflect.cpp	/^void ReflectInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ReflectInnerX3	src/bvals/reflect.cpp	/^void ReflectInnerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ReflectOuterX1	src/bvals/reflect.cpp	/^void ReflectOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ReflectOuterX2	src/bvals/reflect.cpp	/^void ReflectOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ReflectOuterX3	src/bvals/reflect.cpp	/^void ReflectOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
RegionSize	src/athena.hpp	/^typedef struct RegionSize {$/;"	s
RegionSize	src/athena.hpp	/^} RegionSize;$/;"	t	typeref:struct:RegionSize
RemapArray_	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::RemapArray_(int arr[], int loc[], int dir) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
RemapAxis	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::RemapAxis(int dir) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
RemapEMFShearingboxBoundary	src/bvals/bvals_emf.cpp	/^void BoundaryValues::RemapEMFShearingboxBoundary(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
RemapFlux	src/bvals/bvals_shear.cpp	/^void BoundaryValues::RemapFlux(const int n, const int k, const int jinner,$/;"	f	class:BoundaryValues	typeref:typename:void
RemapFluxEMF	src/bvals/bvals_emf.cpp	/^void BoundaryValues::RemapFluxEMF(const int k, const int jinner, const int jouter,$/;"	f	class:BoundaryValues	typeref:typename:void
RemapFluxField	src/bvals/bvals_field.cpp	/^void BoundaryValues::RemapFluxField(const int k, const int jinner, const int jouter,$/;"	f	class:BoundaryValues	typeref:typename:void
RemapProc	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::RemapProc(int dir) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
ReplaceOutputDataNode	src/outputs/outputs.cpp	/^void OutputType::ReplaceOutputDataNode(OutputData *pold, OutputData *pnew) {$/;"	f	class:OutputType	typeref:typename:void
Reset	src/task_list/task_list.hpp	/^  void Reset(int ntasks) {$/;"	f	class:TaskState	typeref:typename:void
RestartOutput	src/outputs/outputs.hpp	/^class RestartOutput : public OutputType {$/;"	c
RestartOutput	src/outputs/restart.cpp	/^RestartOutput::RestartOutput(OutputParameters oparams)$/;"	f	class:RestartOutput
Restrict	src/multigrid/multigrid.cpp	/^void Multigrid::Restrict(void) {$/;"	f	class:Multigrid	typeref:typename:void
Restrict	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::Restrict(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
RestrictCellCenteredValues	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictCellCenteredValues(const AthenaArray<Real> &fine,$/;"	f	class:MeshRefinement	typeref:typename:void
RestrictFMGSource	src/multigrid/multigrid.cpp	/^void Multigrid::RestrictFMGSource(void) {$/;"	f	class:Multigrid	typeref:typename:void
RestrictFieldX1	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictFieldX1(const AthenaArray<Real> &fine,$/;"	f	class:MeshRefinement	typeref:typename:void
RestrictFieldX2	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictFieldX2(const AthenaArray<Real> &fine,$/;"	f	class:MeshRefinement	typeref:typename:void
RestrictFieldX3	src/mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictFieldX3(const AthenaArray<Real> &fine,$/;"	f	class:MeshRefinement	typeref:typename:void
RetrieveResult	src/fft/athena_fft.cpp	/^void FFTBlock::RetrieveResult(AthenaArray<Real> &dst, int ns, int ngh,$/;"	f	class:FFTBlock	typeref:typename:void
RetrieveResult	src/gravity/obcgravity.cpp	/^void OBCGravityCar::RetrieveResult(AthenaArray<Real> &dst)$/;"	f	class:OBCGravityCar	typeref:typename:void
RetrieveResult	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::RetrieveResult(AthenaArray<Real> &dst)$/;"	f	class:OBCGravityCyl	typeref:typename:void
RetrieveResult	src/multigrid/multigrid.cpp	/^void Multigrid::RetrieveResult(AthenaArray<Real> &dst, int ns, int ngh) {$/;"	f	class:Multigrid	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/hllc.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/hllc_rel.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/hlle.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/hlle_rel.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/hlle_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/llf.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/llf_rel.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/llf_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/hydro/roe.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/hlld.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/hlle_mhd.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/hlle_mhd_rel.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/hlle_mhd_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/llf_mhd.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/llf_mhd_rel.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/llf_mhd_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RiemannSolver	src/hydro/rsolvers/mhd/roe_mhd.cpp	/^void Hydro::RiemannSolver(const int kl, const int ku, const int jl, const int ju,$/;"	f	class:Hydro	typeref:typename:void
RightEigenmatrixDotVector	src/reconstruct/characteristic.cpp	/^void Reconstruction::RightEigenmatrixDotVector(MeshBlock *pmb, const int ivx,$/;"	f	class:Reconstruction	typeref:typename:void
RmpPlan	src/gravity/obcgravity.hpp	/^  struct remap_plan_3d *RmpPlan[12][12];$/;"	m	class:OBCGravityCar	typeref:struct:remap_plan_3d * [12][12]
RmpPlan	src/gravity/obcgravity.hpp	/^  struct remap_plan_3d *RmpPlan[26][26];$/;"	m	class:OBCGravityCyl	typeref:struct:remap_plan_3d * [26][26]
RoeFlux	src/hydro/rsolvers/hydro/roe.cpp	/^inline void RoeFlux(const Real wroe[], const Real du[], const Real wli[], Real flx[],$/;"	f	typeref:typename:void
RoeFlux	src/hydro/rsolvers/mhd/roe_mhd.cpp	/^inline void RoeFlux(const Real wroe[], const Real b1, const Real x, const Real y,$/;"	f	typeref:typename:void
RollbackNextTime	src/parameter_input.cpp	/^void ParameterInput::RollbackNextTime() {$/;"	f	class:ParameterInput	typeref:typename:void
S	src/gravity/obcgravity.hpp	/^enum James {C=0, S=1};$/;"	e	enum:James
SELF_GRAVITY_ENABLED	src/defs.hpp	/^#define SELF_GRAVITY_ENABLED /;"	d
SELF_GRAVITY_ENABLED	src/defs.hpp.in	/^#define SELF_GRAVITY_ENABLED /;"	d	file:
SEND_CHM	src/task_list/task_list.hpp	/^  const uint64_t SEND_CHM=1LL<<30;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_CHMFLX	src/task_list/task_list.hpp	/^  const uint64_t SEND_CHMFLX=1LL<<14;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_EMFSH	src/task_list/task_list.hpp	/^  const uint64_t SEND_EMFSH=1LL<<47;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_FLD	src/task_list/task_list.hpp	/^  const uint64_t SEND_FLD=1LL<<28;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_FLDFLX	src/task_list/task_list.hpp	/^  const uint64_t SEND_FLDFLX=1LL<<12;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_FLDSH	src/task_list/task_list.hpp	/^  const uint64_t SEND_FLDSH=1LL<<48;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_GRAV	src/task_list/task_list.hpp	/^  const uint64_t SEND_GRAV=1LL<<42;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_GRAV_BND	src/task_list/grav_task_list.hpp	/^  const uint64_t SEND_GRAV_BND=1LL<<2;$/;"	v	namespace:GravitySolverTaskNames	typeref:typename:const uint64_t
SEND_HYD	src/task_list/task_list.hpp	/^  const uint64_t SEND_HYD=1LL<<27;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_HYDFLX	src/task_list/task_list.hpp	/^  const uint64_t SEND_HYDFLX=1LL<<11;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_HYDSH	src/task_list/task_list.hpp	/^  const uint64_t SEND_HYDSH=1LL<<46;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_RAD	src/task_list/task_list.hpp	/^  const uint64_t SEND_RAD=1LL<<29;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SEND_RADFLX	src/task_list/task_list.hpp	/^  const uint64_t SEND_RADFLX=1LL<<13;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SHEARING_BOX	src/defs.hpp	/^#define SHEARING_BOX /;"	d
SHEARING_BOX	src/defs.hpp.in	/^#define SHEARING_BOX /;"	d	file:
SHEAR_PERIODIC_BNDRY	src/bvals/bvals.hpp	/^                   SHEAR_PERIODIC_BNDRY=7};$/;"	e	enum:BoundaryFlag
SIGN	src/defs.hpp	/^#define SIGN(/;"	d
SIGN	src/defs.hpp.in	/^#define SIGN(/;"	d	file:
SIGr	src/gravity/obcgravity.hpp	/^enum CylBndryDcmp {BLOCK=0, FFT_LONG=1, FFT_SHORT=2, PSI=3, SIGv=4, SIGr=5};$/;"	e	enum:CylBndryDcmp
SIGv	src/gravity/obcgravity.hpp	/^enum CylBndryDcmp {BLOCK=0, FFT_LONG=1, FFT_SHORT=2, PSI=3, SIGv=4, SIGr=5};$/;"	e	enum:CylBndryDcmp
SIMD_WIDTH	src/athena.hpp	/^#define SIMD_WIDTH /;"	d
SINGLE_PRECISION_ENABLED	src/defs.hpp	/^#define SINGLE_PRECISION_ENABLED /;"	d
SINGLE_PRECISION_ENABLED	src/defs.hpp.in	/^#define SINGLE_PRECISION_ENABLED /;"	d	file:
SMALL_NUMBER	src/hydro/rsolvers/mhd/hlld.cpp	/^#define SMALL_NUMBER /;"	d	file:
SMALL_NUMBER	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^#define SMALL_NUMBER /;"	d	file:
SOLV_GRAV	src/task_list/task_list.hpp	/^  const uint64_t SOLV_GRAV=1LL<<41;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SQR	src/defs.hpp	/^#define SQR(/;"	d
SQR	src/defs.hpp.in	/^#define SQR(/;"	d	file:
SQRT2	src/defs.hpp	/^#define SQRT2 /;"	d
SQRT2	src/defs.hpp.in	/^#define SQRT2 /;"	d	file:
SRCTERM_CHM	src/task_list/task_list.hpp	/^  const uint64_t SRCTERM_CHM=1LL<<22;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SRCTERM_FLD	src/task_list/task_list.hpp	/^  const uint64_t SRCTERM_FLD=1LL<<20;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SRCTERM_HYD	src/task_list/task_list.hpp	/^  const uint64_t SRCTERM_HYD=1LL<<19;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
SRCTERM_RAD	src/task_list/task_list.hpp	/^  const uint64_t SRCTERM_RAD=1LL<<21;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
STARTUP_INT	src/task_list/task_list.hpp	/^  const uint64_t STARTUP_INT=1LL<<45;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
START_ALLRECV	src/task_list/task_list.hpp	/^  const uint64_t START_ALLRECV=1LL<<0;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
START_GRAV_RECV	src/task_list/grav_task_list.hpp	/^  const uint64_t START_GRAV_RECV=1LL<<0;$/;"	v	namespace:GravitySolverTaskNames	typeref:typename:const uint64_t
STH	src/gravity/obcgravity.hpp	/^enum CarBoundaryFace {STH=0, NTH=1, WST=2, EST=3, CBOT=4, CTOP=5};$/;"	e	enum:CarBoundaryFace
Schwarzschild	src/coordinates/coordinates.hpp	/^class Schwarzschild : public Coordinates {$/;"	c
Schwarzschild	src/coordinates/schwarzschild.cpp	/^Schwarzschild::Schwarzschild(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Schwarzschild
SearchAndSetNeighbors	src/bvals/bvals_base.cpp	/^void BoundaryBase::SearchAndSetNeighbors(MeshBlockTree &tree, int *ranklist,$/;"	f	class:BoundaryBase	typeref:typename:void
Seek	src/outputs/io_wrapper.cpp	/^int IOWrapper::Seek(IOWrapperSize_t offset) {$/;"	f	class:IOWrapper	typeref:typename:int
SelfGravity	src/hydro/srcterms/self_gravity.cpp	/^void HydroSourceTerms::SelfGravity(const Real dt,const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms	typeref:typename:void
SendBoundary	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::SendBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
SendBoundaryFace	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::SendBoundaryFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
SendCellCenteredBoundaryBuffers	src/bvals/bvals_cc.cpp	/^void BoundaryValues::SendCellCenteredBoundaryBuffers(AthenaArray<Real> &src,$/;"	f	class:BoundaryValues	typeref:typename:void
SendEMFCorrection	src/bvals/flux_correction_fc.cpp	/^void BoundaryValues::SendEMFCorrection(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
SendEMFShearingboxBoundaryCorrection	src/bvals/bvals_emf.cpp	/^void BoundaryValues::SendEMFShearingboxBoundaryCorrection(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
SendEMFShearingboxBoundaryCorrectionForInit	src/bvals/bvals_emf.cpp	/^void BoundaryValues::SendEMFShearingboxBoundaryCorrectionForInit(void) {$/;"	f	class:BoundaryValues	typeref:typename:void
SendFieldBoundaryBuffers	src/bvals/bvals_fc.cpp	/^void BoundaryValues::SendFieldBoundaryBuffers(FaceField &src) {$/;"	f	class:BoundaryValues	typeref:typename:void
SendFieldShearingboxBoundaryBuffers	src/bvals/bvals_field.cpp	/^void BoundaryValues::SendFieldShearingboxBoundaryBuffers(FaceField &src,$/;"	f	class:BoundaryValues	typeref:typename:void
SendFieldShearingboxBoundaryBuffersForInit	src/bvals/bvals_field.cpp	/^void BoundaryValues::SendFieldShearingboxBoundaryBuffersForInit(FaceField &src,$/;"	f	class:BoundaryValues	typeref:typename:void
SendFluxCorrection	src/bvals/flux_correction_cc.cpp	/^void BoundaryValues::SendFluxCorrection(enum FluxCorrectionType type) {$/;"	f	class:BoundaryValues	typeref:typename:void
SendGravityBoundary	src/task_list/grav_task_list.cpp	/^enum TaskStatus GravitySolverTaskList::SendGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:GravitySolverTaskList	typeref:enum:TaskStatus
SendGravityBoundaryBuffers	src/bvals/bvals_grav.cpp	/^bool GravityBoundaryValues::SendGravityBoundaryBuffers(AthenaArray<Real> &src) {$/;"	f	class:GravityBoundaryValues	typeref:typename:bool
SendHydroShearingboxBoundaryBuffers	src/bvals/bvals_shear.cpp	/^void BoundaryValues::SendHydroShearingboxBoundaryBuffers(AthenaArray<Real> &src,$/;"	f	class:BoundaryValues	typeref:typename:void
SendHydroShearingboxBoundaryBuffersForInit	src/bvals/bvals_shear.cpp	/^void BoundaryValues::SendHydroShearingboxBoundaryBuffersForInit(AthenaArray<Real> &src,$/;"	f	class:BoundaryValues	typeref:typename:void
SendMultigridBoundaryBuffers	src/bvals/bvals_mg.cpp	/^bool MGBoundaryValues::SendMultigridBoundaryBuffers(AthenaArray<Real> &src,$/;"	f	class:MGBoundaryValues	typeref:typename:bool
SetBlockSizeAndBoundaries	src/mesh/mesh.cpp	/^void Mesh::SetBlockSizeAndBoundaries(LogicalLocation loc, RegionSize &block_size,$/;"	f	class:Mesh	typeref:typename:void
SetBoolean	src/parameter_input.cpp	/^bool ParameterInput::SetBoolean(std::string block, std::string name, bool value) {$/;"	f	class:ParameterInput	typeref:typename:bool
SetCellCenteredBoundaryFromCoarser	src/bvals/bvals_cc.cpp	/^void BoundaryValues::SetCellCenteredBoundaryFromCoarser(int ns, int ne,$/;"	f	class:BoundaryValues	typeref:typename:void
SetCellCenteredBoundaryFromFiner	src/bvals/bvals_cc.cpp	/^void BoundaryValues::SetCellCenteredBoundaryFromFiner(AthenaArray<Real> &dst,$/;"	f	class:BoundaryValues	typeref:typename:void
SetCellCenteredBoundarySameLevel	src/bvals/bvals_cc.cpp	/^void BoundaryValues::SetCellCenteredBoundarySameLevel(AthenaArray<Real> &dst,$/;"	f	class:BoundaryValues	typeref:typename:void
SetCommunicator	src/outputs/io_wrapper.hpp	/^  void SetCommunicator(MPI_Comm scomm) { comm_=scomm;}$/;"	f	class:IOWrapper	typeref:typename:void
SetEMFBoundaryFromFiner	src/bvals/flux_correction_fc.cpp	/^void BoundaryValues::SetEMFBoundaryFromFiner(Real *buf, const NeighborBlock& nb) {$/;"	f	class:BoundaryValues	typeref:typename:void
SetEMFBoundaryPolar	src/bvals/flux_correction_fc.cpp	/^void BoundaryValues::SetEMFBoundaryPolar(Real **buf_list, int num_bufs, bool north) {$/;"	f	class:BoundaryValues	typeref:typename:void
SetEMFBoundarySameLevel	src/bvals/flux_correction_fc.cpp	/^void BoundaryValues::SetEMFBoundarySameLevel(Real *buf, const NeighborBlock& nb) {$/;"	f	class:BoundaryValues	typeref:typename:void
SetEMFShearingboxBoundarySameLevel	src/bvals/bvals_emf.cpp	/^void BoundaryValues::SetEMFShearingboxBoundarySameLevel(EdgeField &dst, Real *$/;"	f	class:BoundaryValues	typeref:typename:void
SetFieldBoundaryFromCoarser	src/bvals/bvals_fc.cpp	/^void BoundaryValues::SetFieldBoundaryFromCoarser(Real *buf, const NeighborBlock& nb) {$/;"	f	class:BoundaryValues	typeref:typename:void
SetFieldBoundaryFromFiner	src/bvals/bvals_fc.cpp	/^void BoundaryValues::SetFieldBoundaryFromFiner(FaceField &dst, Real *buf,$/;"	f	class:BoundaryValues	typeref:typename:void
SetFieldBoundarySameLevel	src/bvals/bvals_fc.cpp	/^void BoundaryValues::SetFieldBoundarySameLevel(FaceField &dst, Real *buf,$/;"	f	class:BoundaryValues	typeref:typename:void
SetFieldDiffusivity	src/field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::SetFieldDiffusivity(const AthenaArray<Real> &w,$/;"	f	class:FieldDiffusion	typeref:typename:void
SetFieldShearingboxBoundarySameLevel	src/bvals/bvals_field.cpp	/^void BoundaryValues::SetFieldShearingboxBoundarySameLevel(FaceField &dst, Real *buf,$/;"	f	class:BoundaryValues	typeref:typename:void
SetFourPiG	src/mesh/mesh.hpp	/^  void SetFourPiG(Real fpg) { four_pi_G_=fpg; }$/;"	f	class:Mesh	typeref:typename:void
SetFromRootGrid	src/multigrid/multigrid.cpp	/^void Multigrid::SetFromRootGrid(AthenaArray<Real> &src, int ci, int cj, int ck) {$/;"	f	class:Multigrid	typeref:typename:void
SetGravitationalConstant	src/mesh/mesh.hpp	/^  void SetGravitationalConstant(Real g) { four_pi_G_=4.0*PI*g; }$/;"	f	class:Mesh	typeref:typename:void
SetGravityBoundarySameLevel	src/bvals/bvals_grav.cpp	/^void GravityBoundaryValues::SetGravityBoundarySameLevel(AthenaArray<Real> &dst, Real *buf,$/;"	f	class:GravityBoundaryValues	typeref:typename:void
SetGravityThreshold	src/mesh/mesh.hpp	/^  void SetGravityThreshold(Real eps) { grav_eps_=eps; }$/;"	f	class:Mesh	typeref:typename:void
SetHydroDiffusivity	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::SetHydroDiffusivity(AthenaArray<Real> &w, AthenaArray<Real> &bc) {$/;"	f	class:HydroDiffusion	typeref:typename:void
SetHydroShearingboxBoundarySameLevel	src/bvals/bvals_shear.cpp	/^void BoundaryValues::SetHydroShearingboxBoundarySameLevel(AthenaArray<Real>$/;"	f	class:BoundaryValues	typeref:typename:void
SetInteger	src/parameter_input.cpp	/^int ParameterInput::SetInteger(std::string block, std::string name, int value) {$/;"	f	class:ParameterInput	typeref:typename:int
SetLocalIndex	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::SetLocalIndex() {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
SetMGTaskListFMGProlongate	src/task_list/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListFMGProlongate(int flag) {$/;"	f	class:MultigridTaskList	typeref:typename:void
SetMGTaskListToCoarser	src/task_list/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToCoarser(int nsmooth, int ngh) {$/;"	f	class:MultigridTaskList	typeref:typename:void
SetMGTaskListToFiner	src/task_list/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToFiner(int nsmooth, int ngh, int flag) {$/;"	f	class:MultigridTaskList	typeref:typename:void
SetMeanDensity	src/mesh/mesh.hpp	/^  void SetMeanDensity(Real d0) { grav_mean_rho_=d0; }$/;"	f	class:Mesh	typeref:typename:void
SetMultigridBoundarySameLevel	src/bvals/bvals_mg.cpp	/^void MGBoundaryValues::SetMultigridBoundarySameLevel(AthenaArray<Real> &dst,$/;"	f	class:MGBoundaryValues	typeref:typename:void
SetNeighbor	src/bvals/bvals_base.cpp	/^void NeighborBlock::SetNeighbor(int irank, int ilevel, int igid, int ilid,$/;"	f	class:NeighborBlock	typeref:typename:void
SetNormFactor	src/fft/athena_fft.hpp	/^  void SetNormFactor(Real norm) { norm_factor_=norm;}$/;"	f	class:FFTBlock	typeref:typename:void
SetReal	src/parameter_input.cpp	/^Real ParameterInput::SetReal(std::string block, std::string name, Real value) {$/;"	f	class:ParameterInput	typeref:typename:Real
SetSignalFlag	src/utils/signal_handler.cpp	/^void SetSignalFlag(int s) {$/;"	f	namespace:SignalHandler	typeref:typename:void
SetUserOutputVariableName	src/mesh/meshblock.cpp	/^void MeshBlock::SetUserOutputVariableName(int n, const char *name) {$/;"	f	class:MeshBlock	typeref:typename:void
SetWallTimeAlarm	src/utils/signal_handler.cpp	/^void SetWallTimeAlarm(int t) {$/;"	f	namespace:SignalHandler	typeref:typename:void
SetupMultigrid	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::SetupMultigrid(void) {$/;"	f	class:MultigridDriver	typeref:typename:void
ShBoxCoord	src/pgen/hb3.cpp	/^static int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	v	typeref:typename:int	file:
ShBoxCoord_	src/bvals/bvals.hpp	/^  int ShBoxCoord_;              \/\/ shearcoordinate type: 1 = xy (default), 2 = xz$/;"	m	class:BoundaryValues	typeref:typename:int
ShBoxCoord_	src/hydro/srcterms/hydro_srcterms.hpp	/^  int  ShBoxCoord_;       \/\/ ShearCoordinate type: 1=xy (default), 2=xz$/;"	m	class:HydroSourceTerms	typeref:typename:int
ShearingBoundaryBlock	src/bvals/bvals.hpp	/^typedef struct ShearingBoundaryBlock {$/;"	s
ShearingBoundaryBlock	src/bvals/bvals.hpp	/^} ShearingBoundaryBlock;$/;"	t	typeref:struct:ShearingBoundaryBlock
ShearingBoxSourceTerms	src/hydro/srcterms/shearingbox.cpp	/^void HydroSourceTerms::ShearingBoxSourceTerms(const Real dt,$/;"	f	class:HydroSourceTerms	typeref:typename:void
ShockCloudInnerX1	src/pgen/shk_cloud.cpp	/^void ShockCloudInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f	typeref:typename:void
ShowConfig	src/utils/show_config.cpp	/^void ShowConfig(void) {$/;"	f	typeref:typename:void
SignalHandler	src/utils/signal_handler.cpp	/^namespace SignalHandler {$/;"	n	file:
SignalHandler	src/utils/utils.hpp	/^namespace SignalHandler {$/;"	n
SignalHandlerInit	src/utils/signal_handler.cpp	/^void SignalHandlerInit(void) {$/;"	f	namespace:SignalHandler	typeref:typename:void
SliceOutputData	src/outputs/outputs.cpp	/^bool OutputType::SliceOutputData(MeshBlock *pmb, int dim) {$/;"	f	class:OutputType	typeref:typename:bool
Smooth	src/gravity/mggravity.cpp	/^void MGGravity::Smooth(int color) {$/;"	f	class:MGGravity	typeref:typename:void
SmoothBlack	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::SmoothBlack(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
SmoothRed	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::SmoothRed(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
Solve	src/gravity/fftgravity.cpp	/^void FFTGravityDriver::Solve(int stage, int mode) {$/;"	f	class:FFTGravityDriver	typeref:typename:void
Solve	src/gravity/mggravity.cpp	/^void MGGravityDriver::Solve(int stage) {$/;"	f	class:MGGravityDriver	typeref:typename:void
Solve	src/gravity/obcgravity.cpp	/^void OBCGravityDriver::Solve(int stage)$/;"	f	class:OBCGravityDriver	typeref:typename:void
SolveCoarsestGrid	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveCoarsestGrid(void) {$/;"	f	class:MultigridDriver	typeref:typename:void
SolveFCycle	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveFCycle(int npresmooth, int npostsmooth) {$/;"	f	class:MultigridDriver	typeref:typename:void
SolveFMGCycle	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveFMGCycle(void) {$/;"	f	class:MultigridDriver	typeref:typename:void
SolveIterative	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveIterative(void) {$/;"	f	class:MultigridDriver	typeref:typename:void
SolveVCycle	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveVCycle(int npresmooth, int npostsmooth) {$/;"	f	class:MultigridDriver	typeref:typename:void
SolveZeroBC	src/gravity/obcgravity.cpp	/^void OBCGravityCar::SolveZeroBC()$/;"	f	class:OBCGravityCar	typeref:typename:void
SolveZeroBC	src/gravity/obcgravity.cpp	/^void OBCGravityCyl::SolveZeroBC()$/;"	f	class:OBCGravityCyl	typeref:typename:void
SoundSpeed	src/eos/adiabatic_hydro.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState	typeref:typename:Real
SoundSpeed	src/eos/adiabatic_mhd.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState	typeref:typename:Real
SoundSpeed	src/eos/eos.hpp	/^    Real SoundSpeed(const Real[]) {return 0.0;}$/;"	f	class:EquationOfState	typeref:typename:Real
SoundSpeed	src/eos/isothermal_hydro.cpp	/^Real EquationOfState::SoundSpeed(const Real dummy_arg[NHYDRO]) {$/;"	f	class:EquationOfState	typeref:typename:Real
SoundSpeed	src/eos/isothermal_mhd.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState	typeref:typename:Real
SoundSpeedsGR	src/eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::SoundSpeedsGR(Real rho_h, Real pgas, Real u0, Real u1, Real g00,$/;"	f	class:EquationOfState	typeref:typename:void
SoundSpeedsGR	src/eos/eos.hpp	/^      void SoundSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real *, Real *)$/;"	f	class:EquationOfState	typeref:typename:void
SoundSpeedsGR	src/eos/eos.hpp	/^    void SoundSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real *, Real *)$/;"	f	class:EquationOfState	typeref:typename:void
SoundSpeedsSR	src/eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::SoundSpeedsSR(Real rho_h, Real pgas, Real vx, Real gamma_lorentz_sq,$/;"	f	class:EquationOfState	typeref:typename:void
SoundSpeedsSR	src/eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::SoundSpeedsSR(Real rho_h, Real pgas, Real vx, Real gamma_lorentz_sq,$/;"	f	class:EquationOfState	typeref:typename:void
SoundSpeedsSR	src/eos/eos.hpp	/^      void SoundSpeedsSR(Real, Real, Real, Real, Real *, Real *) {return;}$/;"	f	class:EquationOfState	typeref:typename:void
SoundSpeedsSR	src/eos/eos.hpp	/^    void SoundSpeedsSR(Real, Real, Real, Real, Real *, Real *) {return;}$/;"	f	class:EquationOfState	typeref:typename:void
SphericalPolar	src/coordinates/coordinates.hpp	/^class SphericalPolar : public Coordinates {$/;"	c
SphericalPolar	src/coordinates/spherical_polar.cpp	/^SphericalPolar::SphericalPolar(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:SphericalPolar
SrcTermFunc_t	src/athena.hpp	/^typedef void (*SrcTermFunc_t)(MeshBlock *pmb, const Real time, const Real dt,$/;"	t	typeref:typename:void (*)(MeshBlock * pmb,const Real time,const Real dt,const AthenaArray<Real> & prim,const AthenaArray<Real> & bcc,AthenaArray<Real> & cons)
StartAllReceive	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::StartAllReceive(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
StartGravityReceive	src/task_list/grav_task_list.cpp	/^enum TaskStatus GravitySolverTaskList::StartGravityReceive(MeshBlock *pmb, int stage) {$/;"	f	class:GravitySolverTaskList	typeref:enum:TaskStatus
StartReading	src/parameter_input.cpp	/^void ParameterInput::StartReading(void) {$/;"	f	class:ParameterInput	typeref:typename:void
StartReceive	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::StartReceive(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
StartReceiveFace	src/task_list/mg_task_list.cpp	/^enum TaskStatus MultigridTaskList::StartReceiveFace(Multigrid *pmg) {$/;"	f	class:MultigridTaskList	typeref:enum:TaskStatus
StartReceivingAll	src/bvals/bvals.cpp	/^void BoundaryValues::StartReceivingAll(const Real time) {$/;"	f	class:BoundaryValues	typeref:typename:void
StartReceivingForInit	src/bvals/bvals.cpp	/^void BoundaryValues::StartReceivingForInit(bool cons_and_field) {$/;"	f	class:BoundaryValues	typeref:typename:void
StartReceivingGravity	src/bvals/bvals_grav.cpp	/^void GravityBoundaryValues::StartReceivingGravity(void) {$/;"	f	class:GravityBoundaryValues	typeref:typename:void
StartReceivingMultigrid	src/bvals/bvals_mg.cpp	/^void MGBoundaryValues::StartReceivingMultigrid(int nc, enum BoundaryType type) {$/;"	f	class:MGBoundaryValues	typeref:typename:void
StartWriting	src/parameter_input.cpp	/^void ParameterInput::StartWriting(void) {$/;"	f	class:ParameterInput	typeref:typename:void
StartupIntegrator	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::StartupIntegrator(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
StratOutflowInnerX3	src/pgen/strat.cpp	/^void StratOutflowInnerX3(MeshBlock *pmb, Coordinates *pco,$/;"	f	typeref:typename:void
StratOutflowOuterX3	src/pgen/strat.cpp	/^void StratOutflowOuterX3(MeshBlock *pmb, Coordinates *pco,$/;"	f	typeref:typename:void
SubtractAverage	src/multigrid/multigrid.cpp	/^void Multigrid::SubtractAverage(int type, int n, Real ave) {$/;"	f	class:Multigrid	typeref:typename:void
SubtractAverage	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::SubtractAverage(int type) {$/;"	f	class:MultigridDriver	typeref:typename:void
SumOutputData	src/outputs/outputs.cpp	/^void OutputType::SumOutputData(MeshBlock* pmb, int dim) {$/;"	f	class:OutputType	typeref:typename:void
Swap4Bytes	src/outputs/vtk.cpp	/^static inline void Swap4Bytes(void *vdat) {$/;"	f	typeref:typename:void	file:
SwapAthenaArray	src/athena_arrays.hpp	/^void AthenaArray<T>::SwapAthenaArray(AthenaArray<T>& array2) {$/;"	f	class:AthenaArray	typeref:typename:void
SwapAxis	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::SwapAxis(int ref_axis) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
SwapProc	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::SwapProc(int ref_axis) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
Swap_	src/fft/athena_fft.cpp	/^void AthenaFFTIndex::Swap_(int loc[],int ref_axis) {$/;"	f	class:AthenaFFTIndex	typeref:typename:void
T00	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T10	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T11	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T20	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T21	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T22	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T30	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T31	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T32	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
T33	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	e	enum:__anon1e1ee2430603
TAG_AMR	src/athena.hpp	/^  TAG_FLDFLX=5, TAG_RADFLX=6, TAG_CHMFLX=7, TAG_AMR=8, TAG_FLDFLX_POLE=9, TAG_GRAVITY=11,$/;"	e	enum:Athena_MPI_Tag
TAG_CHEM	src/athena.hpp	/^enum Athena_MPI_Tag {TAG_HYDRO=0, TAG_FIELD=1, TAG_RAD=2, TAG_CHEM=3, TAG_HYDFLX=4,$/;"	e	enum:Athena_MPI_Tag
TAG_CHMFLX	src/athena.hpp	/^  TAG_FLDFLX=5, TAG_RADFLX=6, TAG_CHMFLX=7, TAG_AMR=8, TAG_FLDFLX_POLE=9, TAG_GRAVITY=11,$/;"	e	enum:Athena_MPI_Tag
TAG_FIELD	src/athena.hpp	/^enum Athena_MPI_Tag {TAG_HYDRO=0, TAG_FIELD=1, TAG_RAD=2, TAG_CHEM=3, TAG_HYDFLX=4,$/;"	e	enum:Athena_MPI_Tag
TAG_FLDFLX	src/athena.hpp	/^  TAG_FLDFLX=5, TAG_RADFLX=6, TAG_CHMFLX=7, TAG_AMR=8, TAG_FLDFLX_POLE=9, TAG_GRAVITY=11,$/;"	e	enum:Athena_MPI_Tag
TAG_FLDFLX_POLE	src/athena.hpp	/^  TAG_FLDFLX=5, TAG_RADFLX=6, TAG_CHMFLX=7, TAG_AMR=8, TAG_FLDFLX_POLE=9, TAG_GRAVITY=11,$/;"	e	enum:Athena_MPI_Tag
TAG_GRAVITY	src/athena.hpp	/^  TAG_FLDFLX=5, TAG_RADFLX=6, TAG_CHMFLX=7, TAG_AMR=8, TAG_FLDFLX_POLE=9, TAG_GRAVITY=11,$/;"	e	enum:Athena_MPI_Tag
TAG_HYDFLX	src/athena.hpp	/^enum Athena_MPI_Tag {TAG_HYDRO=0, TAG_FIELD=1, TAG_RAD=2, TAG_CHEM=3, TAG_HYDFLX=4,$/;"	e	enum:Athena_MPI_Tag
TAG_HYDRO	src/athena.hpp	/^enum Athena_MPI_Tag {TAG_HYDRO=0, TAG_FIELD=1, TAG_RAD=2, TAG_CHEM=3, TAG_HYDFLX=4,$/;"	e	enum:Athena_MPI_Tag
TAG_MGGRAV	src/athena.hpp	/^  TAG_MGGRAV=12,TAG_SHBOX_HYDRO=13,TAG_SHBOX_FIELD=14,TAG_SHBOX_EMF=15};$/;"	e	enum:Athena_MPI_Tag
TAG_RAD	src/athena.hpp	/^enum Athena_MPI_Tag {TAG_HYDRO=0, TAG_FIELD=1, TAG_RAD=2, TAG_CHEM=3, TAG_HYDFLX=4,$/;"	e	enum:Athena_MPI_Tag
TAG_RADFLX	src/athena.hpp	/^  TAG_FLDFLX=5, TAG_RADFLX=6, TAG_CHMFLX=7, TAG_AMR=8, TAG_FLDFLX_POLE=9, TAG_GRAVITY=11,$/;"	e	enum:Athena_MPI_Tag
TAG_SHBOX_EMF	src/athena.hpp	/^  TAG_MGGRAV=12,TAG_SHBOX_HYDRO=13,TAG_SHBOX_FIELD=14,TAG_SHBOX_EMF=15};$/;"	e	enum:Athena_MPI_Tag
TAG_SHBOX_FIELD	src/athena.hpp	/^  TAG_MGGRAV=12,TAG_SHBOX_HYDRO=13,TAG_SHBOX_FIELD=14,TAG_SHBOX_EMF=15};$/;"	e	enum:Athena_MPI_Tag
TAG_SHBOX_HYDRO	src/athena.hpp	/^  TAG_MGGRAV=12,TAG_SHBOX_HYDRO=13,TAG_SHBOX_FIELD=14,TAG_SHBOX_EMF=15};$/;"	e	enum:Athena_MPI_Tag
TASK_FAIL	src/task_list/task_list.hpp	/^enum TaskStatus {TASK_FAIL, TASK_SUCCESS, TASK_NEXT};$/;"	e	enum:TaskStatus
TASK_LIST_GRAV_TASK_LIST_HPP_	src/task_list/grav_task_list.hpp	/^#define TASK_LIST_GRAV_TASK_LIST_HPP_$/;"	d
TASK_LIST_MG_TASK_LIST_HPP_	src/task_list/mg_task_list.hpp	/^#define TASK_LIST_MG_TASK_LIST_HPP_$/;"	d
TASK_LIST_TASK_LIST_HPP_	src/task_list/task_list.hpp	/^#define TASK_LIST_TASK_LIST_HPP_$/;"	d
TASK_NEXT	src/task_list/task_list.hpp	/^enum TaskStatus {TASK_FAIL, TASK_SUCCESS, TASK_NEXT};$/;"	e	enum:TaskStatus
TASK_SUCCESS	src/task_list/task_list.hpp	/^enum TaskStatus {TASK_FAIL, TASK_SUCCESS, TASK_NEXT};$/;"	e	enum:TaskStatus
TINY_NUMBER	src/defs.hpp	/^#define TINY_NUMBER /;"	d
TINY_NUMBER	src/defs.hpp.in	/^#define TINY_NUMBER /;"	d	file:
TL_COMPLETE	src/task_list/task_list.hpp	/^enum TaskListStatus {TL_RUNNING, TL_STUCK, TL_COMPLETE, TL_NOTHING_TO_DO};$/;"	e	enum:TaskListStatus
TL_NOTHING_TO_DO	src/task_list/task_list.hpp	/^enum TaskListStatus {TL_RUNNING, TL_STUCK, TL_COMPLETE, TL_NOTHING_TO_DO};$/;"	e	enum:TaskListStatus
TL_RUNNING	src/task_list/task_list.hpp	/^enum TaskListStatus {TL_RUNNING, TL_STUCK, TL_COMPLETE, TL_NOTHING_TO_DO};$/;"	e	enum:TaskListStatus
TL_STUCK	src/task_list/task_list.hpp	/^enum TaskListStatus {TL_RUNNING, TL_STUCK, TL_COMPLETE, TL_NOTHING_TO_DO};$/;"	e	enum:TaskListStatus
TOP	src/gravity/obcgravity.hpp	/^enum CylBoundaryFace {TOP=0, BOT=1, INN=2, OUT=3};$/;"	e	enum:CylBoundaryFace
TWO_3RD	src/defs.hpp	/^#define TWO_3RD /;"	d
TWO_3RD	src/defs.hpp.in	/^#define TWO_3RD /;"	d	file:
Task	src/task_list/task_list.hpp	/^struct Task {$/;"	s
TaskList	src/task_list/task_list.cpp	/^TaskList::TaskList(Mesh *pm) {$/;"	f	class:TaskList
TaskList	src/task_list/task_list.hpp	/^class TaskList {$/;"	c
TaskListStatus	src/task_list/task_list.hpp	/^enum TaskListStatus {TL_RUNNING, TL_STUCK, TL_COMPLETE, TL_NOTHING_TO_DO};$/;"	g
TaskState	src/task_list/task_list.hpp	/^class TaskState {$/;"	c
TaskStatus	src/task_list/task_list.hpp	/^enum TaskStatus {TASK_FAIL, TASK_SUCCESS, TASK_NEXT};$/;"	g
TemperatureBisect	src/pgen/gr_bondi.cpp	/^static Real TemperatureBisect(Real r, Real t_min, Real t_max) {$/;"	f	typeref:typename:Real	file:
TemperatureMin	src/pgen/gr_bondi.cpp	/^static Real TemperatureMin(Real r, Real t_min, Real t_max) {$/;"	f	typeref:typename:Real	file:
TemperatureResidual	src/pgen/gr_bondi.cpp	/^static Real TemperatureResidual(Real t, Real r) {$/;"	f	typeref:typename:Real	file:
ThermalFlux_aniso	src/hydro/hydro_diffusion/conduction.cpp	/^void HydroDiffusion::ThermalFlux_aniso(const AthenaArray<Real> &p,$/;"	f	class:HydroDiffusion	typeref:typename:void
ThermalFlux_iso	src/hydro/hydro_diffusion/conduction.cpp	/^void HydroDiffusion::ThermalFlux_iso(const AthenaArray<Real> &prim,$/;"	f	class:HydroDiffusion	typeref:typename:void
TimeIntegratorTaskList	src/task_list/task_list.hpp	/^class TimeIntegratorTaskList : public TaskList {$/;"	c
TimeIntegratorTaskList	src/task_list/time_integrator.cpp	/^TimeIntegratorTaskList::TimeIntegratorTaskList(ParameterInput *pin, Mesh *pm)$/;"	f	class:TimeIntegratorTaskList
TimeStepFunc_t	src/athena.hpp	/^typedef Real (*TimeStepFunc_t)(MeshBlock *pmb);$/;"	t	typeref:typename:Real (*)(MeshBlock * pmb)
TransferFromRootToBlocks	src/multigrid/multigrid_driver.cpp	/^void MultigridDriver::TransferFromRootToBlocks(void) {$/;"	f	class:MultigridDriver	typeref:typename:void
TransformOutputData	src/outputs/outputs.cpp	/^bool OutputType::TransformOutputData(MeshBlock *pmb) {$/;"	f	class:OutputType	typeref:typename:bool
TransformVector	src/pgen/gr_blast.cpp	/^static void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	typeref:typename:void	file:
TransformVector	src/pgen/gr_bondi.cpp	/^static void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	typeref:typename:void	file:
TransformVector	src/pgen/gr_linear_wave.cpp	/^static void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	typeref:typename:void	file:
TransformVector	src/pgen/gr_mhd_inflow.cpp	/^static void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	typeref:typename:void	file:
TransformVector	src/pgen/gr_shock_tube.cpp	/^static void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	typeref:typename:void	file:
TransformVector	src/pgen/gr_torus.cpp	/^static void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	typeref:typename:void	file:
TurbulenceDriver	src/fft/turbulence.cpp	/^TurbulenceDriver::TurbulenceDriver(Mesh *pm, ParameterInput *pin)$/;"	f	class:TurbulenceDriver
TurbulenceDriver	src/fft/turbulence.hpp	/^class TurbulenceDriver : public FFTDriver{$/;"	c
USERWORK	src/task_list/task_list.hpp	/^  const uint64_t USERWORK=1LL<<38;$/;"	v	namespace:HydroIntegratorTaskNames	typeref:typename:const uint64_t
USER_BNDRY	src/bvals/bvals.hpp	/^                   USER_BNDRY=3, PERIODIC_BNDRY=4, POLAR_BNDRY=5, POLAR_BNDRY_WEDGE=6,$/;"	e	enum:BoundaryFlag
UTILS_BUFFER_UTILS_HPP_	src/utils/buffer_utils.hpp	/^#define UTILS_BUFFER_UTILS_HPP_$/;"	d
UTILS_UTILS_HPP_	src/utils/utils.hpp	/^#define UTILS_UTILS_HPP_$/;"	d
UniformMeshGeneratorX1	src/mesh/mesh.hpp	/^inline Real UniformMeshGeneratorX1(Real x, RegionSize rs) {$/;"	f	typeref:typename:Real
UniformMeshGeneratorX2	src/mesh/mesh.hpp	/^inline Real UniformMeshGeneratorX2(Real x, RegionSize rs) {$/;"	f	typeref:typename:Real
UniformMeshGeneratorX3	src/mesh/mesh.hpp	/^inline Real UniformMeshGeneratorX3(Real x, RegionSize rs) {$/;"	f	typeref:typename:Real
Unpack3DData	src/utils/buffer_utils.cpp	/^void Unpack3DData(Real *buf, AthenaArray<Real> &dst,$/;"	f	namespace:BufferUtility	typeref:typename:void
Unpack4DData	src/utils/buffer_utils.cpp	/^void Unpack4DData(Real *buf, AthenaArray<Real> &dst, int sn, int en,$/;"	f	namespace:BufferUtility	typeref:typename:void
UserMetric_	src/mesh/mesh.hpp	/^  MetricFunc_t UserMetric_;$/;"	m	class:Mesh	typeref:typename:MetricFunc_t
UserSourceTerm	src/hydro/srcterms/hydro_srcterms.hpp	/^  SrcTermFunc_t UserSourceTerm;$/;"	m	class:HydroSourceTerms	typeref:typename:SrcTermFunc_t
UserSourceTerm_	src/mesh/mesh.hpp	/^  SrcTermFunc_t UserSourceTerm_;$/;"	m	class:Mesh	typeref:typename:SrcTermFunc_t
UserTimeStep_	src/hydro/hydro.hpp	/^  TimeStepFunc_t UserTimeStep_;$/;"	m	class:Hydro	typeref:typename:TimeStepFunc_t
UserTimeStep_	src/mesh/mesh.hpp	/^  TimeStepFunc_t UserTimeStep_;$/;"	m	class:Mesh	typeref:typename:TimeStepFunc_t
UserWork	src/task_list/time_integrator.cpp	/^enum TaskStatus TimeIntegratorTaskList::UserWork(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList	typeref:enum:TaskStatus
UserWorkAfterLoop	src/pgen/blast.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/cargrav_test.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin)$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/cpaw.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/cylgrav_test.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin)$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/default_pgen.cpp	/^void __attribute__((weak)) Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/fft.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/gr_linear_wave.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/gr_mhd_inflow.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/jeans.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/linear_wave.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/poisson.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/shock_tube.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/strat.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkAfterLoop	src/pgen/turb.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh	typeref:typename:void
UserWorkBeforeOutput	src/pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkBeforeOutput	src/pgen/linear_wave.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkBeforeOutput	src/pgen/strat.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkInLoop	src/pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::UserWorkInLoop(void) {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkInLoop	src/pgen/gr_torus.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkInLoop	src/pgen/hb3.cpp	/^void MeshBlock::UserWorkInLoop(void) {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkInLoop	src/pgen/poisson.cpp	/^void MeshBlock::UserWorkInLoop(void) {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkInLoop	src/pgen/ssheet.cpp	/^void MeshBlock::UserWorkInLoop(void) {$/;"	f	class:MeshBlock	typeref:typename:void
UserWorkInLoop	src/pgen/strat.cpp	/^void MeshBlock::UserWorkInLoop(void) {$/;"	f	class:MeshBlock	typeref:typename:void
VTKOutput	src/outputs/outputs.hpp	/^class VTKOutput : public OutputType {$/;"	c
VTKOutput	src/outputs/vtk.cpp	/^VTKOutput::VTKOutput(OutputParameters oparams)$/;"	f	class:VTKOutput
VelProfileCyl	src/pgen/disk.cpp	/^static void VelProfileCyl(const Real rad, const Real phi, const Real z,$/;"	f	typeref:typename:void	file:
VelProfileCyl	src/pgen/field_loop_poles.cpp	/^static void VelProfileCyl(const Real x1, const Real x2, const Real x3,$/;"	f	typeref:typename:void	file:
VertGrav	src/pgen/strat.cpp	/^void VertGrav(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	typeref:typename:void
ViscosityCoeff_	src/mesh/mesh.hpp	/^  ViscosityCoeff_t ViscosityCoeff_;$/;"	m	class:Mesh	typeref:typename:ViscosityCoeff_t
ViscosityCoeff_t	src/athena.hpp	/^typedef void (*ViscosityCoeff_t)(HydroDiffusion *phdif, MeshBlock *pmb,$/;"	t	typeref:typename:void (*)(HydroDiffusion * phdif,MeshBlock * pmb,const AthenaArray<Real> & w,const AthenaArray<Real> & bc,int is,int ie,int js,int je,int ks,int ke)
ViscousFlux_aniso	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::ViscousFlux_aniso(const AthenaArray<Real> &prim,$/;"	f	class:HydroDiffusion	typeref:typename:void
ViscousFlux_iso	src/hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::ViscousFlux_iso(const AthenaArray<Real> &prim,$/;"	f	class:HydroDiffusion	typeref:typename:void
VolCenter1Length	src/coordinates/coordinates.cpp	/^void Coordinates::VolCenter1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
VolCenter2Length	src/coordinates/coordinates.cpp	/^void Coordinates::VolCenter2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
VolCenter2Length	src/coordinates/cylindrical.cpp	/^void Cylindrical::VolCenter2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
VolCenter2Length	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenter2Length(const int k, const int j, const int il,$/;"	f	class:SphericalPolar	typeref:typename:void
VolCenter3Length	src/coordinates/coordinates.cpp	/^void Coordinates::VolCenter3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
VolCenter3Length	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenter3Length(const int k, const int j, const int il,$/;"	f	class:SphericalPolar	typeref:typename:void
VolCenterFace1Area	src/coordinates/coordinates.cpp	/^void Coordinates::VolCenterFace1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
VolCenterFace1Area	src/coordinates/cylindrical.cpp	/^void Cylindrical::VolCenterFace1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
VolCenterFace1Area	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenterFace1Area(const int k, const int j, const int il,$/;"	f	class:SphericalPolar	typeref:typename:void
VolCenterFace2Area	src/coordinates/coordinates.cpp	/^void Coordinates::VolCenterFace2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
VolCenterFace2Area	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenterFace2Area(const int k, const int j, const int il,$/;"	f	class:SphericalPolar	typeref:typename:void
VolCenterFace3Area	src/coordinates/coordinates.cpp	/^void Coordinates::VolCenterFace3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates	typeref:typename:void
VolCenterFace3Area	src/coordinates/cylindrical.cpp	/^void Cylindrical::VolCenterFace3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical	typeref:typename:void
VolCenterFace3Area	src/coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenterFace3Area(const int k, const int j, const int il,$/;"	f	class:SphericalPolar	typeref:typename:void
WST	src/gravity/obcgravity.hpp	/^enum CarBoundaryFace {STH=0, NTH=1, WST=2, EST=3, CBOT=4, CTOP=5};$/;"	e	enum:CarBoundaryFace
WeightedAveB	src/field/ct.cpp	/^void Field::WeightedAveB(FaceField &b_out, FaceField &b_in1, FaceField &b_in2,$/;"	f	class:Field	typeref:typename:void
WeightedAveU	src/hydro/add_flux_divergence.cpp	/^void Hydro::WeightedAveU(AthenaArray<Real> &u_out, AthenaArray<Real> &u_in1,$/;"	f	class:Hydro	typeref:typename:void
Write	src/outputs/io_wrapper.cpp	/^size_t IOWrapper::Write(const void *buf, IOWrapperSize_t size, IOWrapperSize_t cnt) {$/;"	f	class:IOWrapper	typeref:typename:size_t
WriteOutputFile	src/outputs/athena_hdf5.cpp	/^void ATHDF5Output::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:ATHDF5Output	typeref:typename:void
WriteOutputFile	src/outputs/formatted_table.cpp	/^void FormattedTableOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:FormattedTableOutput	typeref:typename:void
WriteOutputFile	src/outputs/history.cpp	/^void HistoryOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:HistoryOutput	typeref:typename:void
WriteOutputFile	src/outputs/restart.cpp	/^void RestartOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool force_write) {$/;"	f	class:RestartOutput	typeref:typename:void
WriteOutputFile	src/outputs/vtk.cpp	/^void VTKOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:VTKOutput	typeref:typename:void
Write_at_all	src/outputs/io_wrapper.cpp	/^size_t IOWrapper::Write_at_all(const void *buf, IOWrapperSize_t size,$/;"	f	class:IOWrapper	typeref:typename:size_t
X1DIR	src/athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	e	enum:CoordinateDirection
X1E2	src/athena.hpp	/^enum {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:__anon1e1ee2430403
X1E3	src/athena.hpp	/^enum {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:__anon1e1ee2430403
X1P	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
X2DIR	src/athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	e	enum:CoordinateDirection
X2E1	src/athena.hpp	/^enum {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:__anon1e1ee2430403
X2E3	src/athena.hpp	/^enum {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:__anon1e1ee2430403
X2P	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
X2P0	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
X3DIR	src/athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	e	enum:CoordinateDirection
X3E1	src/athena.hpp	/^enum {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:__anon1e1ee2430403
X3E2	src/athena.hpp	/^enum {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:__anon1e1ee2430403
X3P	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
XB	src/gravity/obcgravity.hpp	/^enum CylDecompNames {XB=0, X1P=1, X2P=2, X3P=3, X2P0=4, E1P=5, E2P=6, E3P=7,$/;"	e	enum:CylDecompNames
ZeroClearData	src/multigrid/multigrid.cpp	/^void Multigrid::ZeroClearData(void) {$/;"	f	class:Multigrid	typeref:typename:void
__STDC_FORMAT_MACROS	src/mesh/mesh.cpp	/^#define __STDC_FORMAT_MACROS$/;"	d	file:
__anon1e1ee2430103	src/athena.hpp	/^enum {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	g
__anon1e1ee2430203	src/athena.hpp	/^enum {IB1=0, IB2=1, IB3=2};$/;"	g
__anon1e1ee2430303	src/athena.hpp	/^enum {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	g
__anon1e1ee2430403	src/athena.hpp	/^enum {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	g
__anon1e1ee2430503	src/athena.hpp	/^enum {I00, I01, I02, I03, I11, I12, I13, I22, I23, I33, NMETRIC};$/;"	g
__anon1e1ee2430603	src/athena.hpp	/^enum {T00, T10, T11, T20, T21, T22, T30, T31, T32, T33, NTRIANGULAR};$/;"	g
__anon31ce70ee0103	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^enum {ISO=0, ANI=1};$/;"	g
__anon5a5922080103	src/field/field_diffusion/field_diffusion.hpp	/^enum {I_O=0, I_H=1, I_A=2};$/;"	g
a	src/pgen/gr_bondi.cpp	/^static Real m, a;          \/\/ black hole mass and spin$/;"	v	typeref:typename:Real	file:
a	src/pgen/gr_mhd_inflow.cpp	/^static Real a;                           \/\/ spin of black hole (0 <= a < M)$/;"	v	typeref:typename:Real	file:
a	src/pgen/gr_torus.cpp	/^static Real m, a;                                  \/\/ black hole parameters$/;"	v	typeref:typename:Real	file:
a1	src/pgen/cylgrav_test.cpp	/^  double a1;$/;"	m	struct:Fparams	typeref:typename:double	file:
a1_	src/pgen/cylgrav_test.cpp	/^  double a1_,a2_,t1_,t2_,z1_,z2_;$/;"	m	class:Hure	typeref:typename:double	file:
a2	src/pgen/cylgrav_test.cpp	/^  double a2;$/;"	m	struct:Fparams	typeref:typename:double	file:
a2_	src/pgen/cylgrav_test.cpp	/^  double a1_,a2_,t1_,t2_,z1_,z2_;$/;"	m	class:Hure	typeref:typename:double	file:
a_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> a_,b_,c_,x_,r_,lambda2_,lambda3_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
aa_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> aa_,bb_,cc_,xx_,rr_,lambda22_,lambda33_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
adaptive	src/mesh/mesh.hpp	/^  bool adaptive, multilevel;$/;"	m	class:Mesh	typeref:typename:bool
alpha	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
amp	src/pgen/gr_linear_wave.cpp	/^Real amp;                     \/\/ amplitude of wave$/;"	v	typeref:typename:Real
amp	src/pgen/hb3.cpp	/^static Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	v	typeref:typename:Real	file:
amp	src/pgen/jeans.cpp	/^static Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
amp	src/pgen/linear_wave.cpp	/^static Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
amp	src/pgen/resist.cpp	/^static Real amp,x0,t0,eta;$/;"	v	typeref:typename:Real	file:
amp	src/pgen/ssheet.cpp	/^static Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	v	typeref:typename:Real	file:
ang_2	src/pgen/cpaw.cpp	/^static Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	v	typeref:typename:Real	file:
ang_2	src/pgen/jeans.cpp	/^static Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	v	typeref:typename:Real	file:
ang_2	src/pgen/linear_wave.cpp	/^static Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	v	typeref:typename:Real	file:
ang_2_vert	src/pgen/linear_wave.cpp	/^static bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	v	typeref:typename:bool	file:
ang_3	src/pgen/cpaw.cpp	/^static Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	v	typeref:typename:Real	file:
ang_3	src/pgen/jeans.cpp	/^static Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	v	typeref:typename:Real	file:
ang_3	src/pgen/linear_wave.cpp	/^static Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	v	typeref:typename:Real	file:
ang_3_vert	src/pgen/linear_wave.cpp	/^static bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	v	typeref:typename:bool	file:
b	src/field/field.hpp	/^  FaceField b;       \/\/ time-integrator memory register #1$/;"	m	class:Field	typeref:typename:FaceField
b	src/pgen/gr_linear_wave.cpp	/^Real u[4], b[4];              \/\/ contravariant quantities$/;"	v	typeref:typename:Real[4][4]
b0	src/pgen/field_loop_poles.cpp	/^static Real xc, yc, zc, beta, b0;$/;"	v	typeref:typename:Real	file:
b0	src/pgen/jeans.cpp	/^static Real d0,p0,v0,u0,w0,va,b0;$/;"	v	typeref:typename:Real	file:
b1	src/field/field.hpp	/^  FaceField b1;      \/\/ time-integrator memory register #2$/;"	m	class:Field	typeref:typename:FaceField
b2	src/field/field.hpp	/^  FaceField b2;      \/\/ time-integrator memory register #3$/;"	m	class:Field	typeref:typename:FaceField
b_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> a_,b_,c_,x_,r_,lambda2_,lambda3_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
b_configs	src/pgen/gr_torus.cpp	/^enum b_configs {vertical, normal, renorm};$/;"	g	file:
b_in_	src/fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_,*f_out_,*b_in_,*b_out_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTIndex ***
b_out_	src/fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_,*f_out_,*b_in_,*b_out_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTIndex ****
b_par	src/pgen/cpaw.cpp	/^static Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	v	typeref:typename:Real	file:
b_perp	src/pgen/cpaw.cpp	/^static Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	v	typeref:typename:Real	file:
bb_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> aa_,bb_,cc_,xx_,rr_,lambda22_,lambda33_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
bb_normal_	src/hydro/hydro.hpp	/^  AthenaArray<Real> bb_normal_;    \/\/ normal magnetic field, for (SR\/GR)MHD$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
bcc	src/field/field.hpp	/^  AthenaArray<Real> bcc;  \/\/ time-integrator memory register #1$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
bcc	src/pgen/gr_linear_wave.cpp	/^AthenaArray<Real> bcc;        \/\/ cell-centered initial magnetic fields$/;"	v	typeref:typename:AthenaArray<Real>
bd_emfcor_	src/bvals/bvals.hpp	/^  BoundaryData bd_hydro_, bd_field_, bd_flcor_, bd_emfcor_;$/;"	m	class:BoundaryValues	typeref:typename:BoundaryData
bd_field_	src/bvals/bvals.hpp	/^  BoundaryData bd_hydro_, bd_field_, bd_flcor_, bd_emfcor_;$/;"	m	class:BoundaryValues	typeref:typename:BoundaryData
bd_flcor_	src/bvals/bvals.hpp	/^  BoundaryData bd_hydro_, bd_field_, bd_flcor_, bd_emfcor_;$/;"	m	class:BoundaryValues	typeref:typename:BoundaryData
bd_gravity_	src/bvals/bvals_grav.hpp	/^  GravityBoundaryData bd_gravity_;$/;"	m	class:GravityBoundaryValues	typeref:typename:GravityBoundaryData
bd_hydro_	src/bvals/bvals.hpp	/^  BoundaryData bd_hydro_, bd_field_, bd_flcor_, bd_emfcor_;$/;"	m	class:BoundaryValues	typeref:typename:BoundaryData
bd_mggrav_	src/bvals/bvals_mg.hpp	/^  MGBoundaryData bd_mggrav_;$/;"	m	class:MGBoundaryValues	typeref:typename:MGBoundaryData
bddisp	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int ********
beta	src/pgen/field_loop_poles.cpp	/^static Real xc, yc, zc, beta, b0;$/;"	v	typeref:typename:Real	file:
beta	src/pgen/hb3.cpp	/^static Real beta,B0,pres;$/;"	v	typeref:typename:Real	file:
beta	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
beta	src/task_list/task_list.hpp	/^  Real beta; \/\/ Coefficients from bidiagonal Shu-Osher form Beta matrix, -1 diagonal terms$/;"	m	struct:IntegratorWeight	typeref:typename:Real
beta_min	src/pgen/gr_torus.cpp	/^static Real beta_min;                              \/\/ min ratio of gas to mag pressure$/;"	v	typeref:typename:Real	file:
beta_min_	src/eos/eos.hpp	/^  Real sigma_max_, beta_min_;            \/\/ limits on ratios of gas quantities to pmag$/;"	m	class:EquationOfState	typeref:typename:Real
bh_mass_	src/coordinates/coordinates.hpp	/^  Real bh_mass_;$/;"	m	class:Coordinates	typeref:typename:Real
bh_spin_	src/coordinates/coordinates.hpp	/^  Real bh_spin_;$/;"	m	class:Coordinates	typeref:typename:Real
bifactor	src/fft/plimpton/factor.cpp	/^void bifactor(int n, int *factor1, int *factor2)$/;"	f	typeref:typename:void
block_bcs	src/bvals/bvals.hpp	/^  enum BoundaryFlag block_bcs[6];$/;"	m	class:BoundaryBase	typeref:enum:BoundaryFlag[6]
block_name	src/outputs/outputs.hpp	/^  std::string block_name;$/;"	m	struct:OutputParameters	typeref:typename:std::string
block_name	src/parameter_input.hpp	/^  std::string block_name;$/;"	m	class:InputBlock	typeref:typename:std::string
block_number	src/outputs/outputs.hpp	/^  int block_number;$/;"	m	struct:OutputParameters	typeref:typename:int
block_size	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
block_size	src/mesh/mesh.hpp	/^  RegionSize block_size;$/;"	m	class:MeshBlock	typeref:typename:RegionSize
block_size_	src/bvals/bvals.hpp	/^  RegionSize block_size_;$/;"	m	class:BoundaryBase	typeref:typename:RegionSize
bmag_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> bmag_; \/\/ B field strength$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
bndcomm	src/gravity/obcgravity.hpp	/^  MPI_Comm bndcomm[4],x1comm,x3comm;$/;"	m	class:OBCGravityCyl	typeref:typename:MPI_Comm[4]
bndcomm	src/gravity/obcgravity.hpp	/^  MPI_Comm bndcomm[6],x1comm,x2comm,x3comm;$/;"	m	class:OBCGravityCar	typeref:typename:MPI_Comm[6]
bnderef	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int ****
bndry_dcmps	src/gravity/obcgravity.hpp	/^  DomainDecomp bndry_dcmps[4][6];$/;"	m	class:OBCGravityCyl	typeref:typename:DomainDecomp[4][6]
bndry_dcmps	src/gravity/obcgravity.hpp	/^  DomainDecomp bndry_dcmps[6][3];$/;"	m	class:OBCGravityCar	typeref:typename:DomainDecomp[6][3]
bnref	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int ***
bphi0	src/pgen/magnoh.cpp	/^static Real bphi0, bz;$/;"	v	typeref:typename:Real	file:
bplan_	src/fft/athena_fft.hpp	/^  AthenaFFTPlan *fplan_,*bplan_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTPlan **
brdisp	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int ******
bsize_	src/fft/athena_fft.hpp	/^  RegionSize msize_, bsize_;$/;"	m	class:FFTBlock	typeref:typename:RegionSize
bsq_over_rho	src/pgen/gr_bondi.cpp	/^static Real bsq_over_rho;  \/\/ b^2\/rho at inner radius$/;"	v	typeref:typename:Real	file:
btype	src/multigrid/multigrid.hpp	/^  enum BoundaryType btype, btypef;$/;"	m	class:Multigrid	typeref:enum:BoundaryType
btypef	src/multigrid/multigrid.hpp	/^  enum BoundaryType btype, btypef;$/;"	m	class:Multigrid	typeref:enum:BoundaryType
buf_	src/gravity/obcgravity.hpp	/^  Real *in_, *out_, *buf_, *in2_;$/;"	m	class:OBCGravityCar	typeref:typename:Real ***
buf_	src/gravity/obcgravity.hpp	/^  fftw_complex *in_, *in2_, *out_, *out2_, *buf_;$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex *****
bufid	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
bufid	src/bvals/bvals.hpp	/^  static int bufid[56];$/;"	m	class:BoundaryBase	typeref:typename:int[56]
bufid	src/bvals/bvals_base.cpp	/^int BoundaryBase::bufid[56];$/;"	m	class:BoundaryBase	typeref:typename:int[56]
bx	src/pgen/gr_linear_wave.cpp	/^Real bx;                      \/\/ longitudinal magnetic field$/;"	v	typeref:typename:Real
bx0	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
bx_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
bx_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
bxl	src/pgen/shk_cloud.cpp	/^static Real bxl,byl,bzl;$/;"	v	typeref:typename:Real	file:
by	src/hydro/rsolvers/mhd/hlld.cpp	/^  Real d,mx,my,mz,e,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
by	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d,mx,my,mz,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
by0	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
by_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
by_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
byl	src/pgen/shk_cloud.cpp	/^static Real bxl,byl,bzl;$/;"	v	typeref:typename:Real	file:
bz	src/hydro/rsolvers/mhd/hlld.cpp	/^  Real d,mx,my,mz,e,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
bz	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d,mx,my,mz,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
bz	src/pgen/magnoh.cpp	/^static Real bphi0, bz;$/;"	v	typeref:typename:Real	file:
bz0	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
bz_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
bz_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
bzl	src/pgen/shk_cloud.cpp	/^static Real bxl,byl,bzl;$/;"	v	typeref:typename:Real	file:
c1	src/pgen/gr_bondi.cpp	/^static Real c1, c2;        \/\/ useful constants$/;"	v	typeref:typename:Real	file:
c1i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i,c2i,c3i,c4i,c5i,c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c1j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j,c2j,c3j,c4j,c5j,c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c1k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k,c2k,c3k,c4k,c5k,c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c2	src/pgen/gr_bondi.cpp	/^static Real c1, c2;        \/\/ useful constants$/;"	v	typeref:typename:Real	file:
c2i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i,c2i,c3i,c4i,c5i,c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c2j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j,c2j,c3j,c4j,c5j,c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c2k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k,c2k,c3k,c4k,c5k,c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c3i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i,c2i,c3i,c4i,c5i,c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c3j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j,c2j,c3j,c4j,c5j,c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c3k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k,c2k,c3k,c4k,c5k,c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c4i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i,c2i,c3i,c4i,c5i,c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c4j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j,c2j,c3j,c4j,c5j,c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c4k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k,c2k,c3k,c4k,c5k,c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c5i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i,c2i,c3i,c4i,c5i,c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c5j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j,c2j,c3j,c4j,c5j,c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c5k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k,c2k,c3k,c4k,c5k,c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c6i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i,c2i,c3i,c4i,c5i,c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c6j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j,c2j,c3j,c4j,c5j,c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c6k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k,c2k,c3k,c4k,c5k,c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
c_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> a_,b_,c_,x_,r_,lambda2_,lambda3_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
called_	src/bvals/bvals.hpp	/^  static bool called_;$/;"	m	class:BoundaryBase	typeref:typename:bool
called_	src/bvals/bvals_base.cpp	/^bool BoundaryBase::called_ = false;$/;"	m	class:BoundaryBase	typeref:typename:bool
cartesian_vector	src/outputs/outputs.hpp	/^  bool include_ghost_zones, cartesian_vector;$/;"	m	struct:OutputParameters	typeref:typename:bool
cc_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> aa_,bb_,cc_,xx_,rr_,lambda22_,lambda33_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
cc_e_	src/field/field.hpp	/^  AthenaArray<Real> cc_e_;$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
cell_volume_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_,face_area_p1_,edge_length_,edge_length_m1_,cell_volume_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
cell_volume_	src/hydro/hydro.hpp	/^  AthenaArray<Real> cell_volume_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
cfl_limit	src/task_list/task_list.hpp	/^  Real cfl_limit; \/\/ dt stability limit for the particular time integrator + spatial order$/;"	m	class:TimeIntegratorTaskList	typeref:typename:Real
cfl_number	src/mesh/mesh.hpp	/^  Real start_time, tlim, cfl_number, time, dt;$/;"	m	class:Mesh	typeref:typename:Real
characteristic_reconstruction	src/reconstruct/reconstruction.hpp	/^  bool characteristic_reconstruction;  \/\/ TRUE for characteristic recon$/;"	m	class:Reconstruction	typeref:typename:bool
cie	src/mesh/mesh.hpp	/^  int cis,cie,cjs,cje,cks,cke,cnghost;$/;"	m	class:MeshBlock	typeref:typename:int
cis	src/mesh/mesh.hpp	/^  int cis,cie,cjs,cje,cks,cke,cnghost;$/;"	m	class:MeshBlock	typeref:typename:int
cje	src/mesh/mesh.hpp	/^  int cis,cie,cjs,cje,cks,cke,cnghost;$/;"	m	class:MeshBlock	typeref:typename:int
cjs	src/mesh/mesh.hpp	/^  int cis,cie,cjs,cje,cks,cke,cnghost;$/;"	m	class:MeshBlock	typeref:typename:int
cke	src/mesh/mesh.hpp	/^  int cis,cie,cjs,cje,cks,cke,cnghost;$/;"	m	class:MeshBlock	typeref:typename:int
cks	src/mesh/mesh.hpp	/^  int cis,cie,cjs,cje,cks,cke,cnghost;$/;"	m	class:MeshBlock	typeref:typename:int
cndflx	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> cndflx[3]; \/\/ thermal stress tensor$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>[3]
cnghost	src/mesh/mesh.hpp	/^  int cis,cie,cjs,cje,cks,cke,cnghost;$/;"	m	class:MeshBlock	typeref:typename:int
cnt_	src/fft/athena_fft.hpp	/^  int64_t cnt_,gcnt_;$/;"	m	class:FFTBlock	typeref:typename:int64_t
coarse_b_	src/mesh/mesh_refinement.hpp	/^  FaceField coarse_b_;$/;"	m	class:MeshRefinement	typeref:typename:FaceField
coarse_bcc_	src/mesh/mesh_refinement.hpp	/^  AthenaArray<Real> coarse_cons_, coarse_prim_, coarse_bcc_;$/;"	m	class:MeshRefinement	typeref:typename:AthenaArray<Real>
coarse_cons_	src/mesh/mesh_refinement.hpp	/^  AthenaArray<Real> coarse_cons_, coarse_prim_, coarse_bcc_;$/;"	m	class:MeshRefinement	typeref:typename:AthenaArray<Real>
coarse_flag	src/coordinates/coordinates.hpp	/^  bool coarse_flag;  \/\/ true if this coordinate object is parent (coarse) mesh in AMR$/;"	m	class:Coordinates	typeref:typename:bool
coarse_prim_	src/mesh/mesh_refinement.hpp	/^  AthenaArray<Real> coarse_cons_, coarse_prim_, coarse_bcc_;$/;"	m	class:MeshRefinement	typeref:typename:AthenaArray<Real>
code_time	src/outputs/outputs.hpp	/^  float code_time;                            \/\/ time in code unit for XDMF$/;"	m	class:ATHDF5Output	typeref:typename:float
comm	src/fft/plimpton/remap_2d.h	/^  MPI_Comm comm;                    \/* group of procs performing remap *\/$/;"	m	struct:remap_plan_2d	typeref:typename:MPI_Comm
comm	src/fft/plimpton/remap_3d.h	/^  MPI_Comm comm;                    \/* group of procs performing remap *\/$/;"	m	struct:remap_plan_3d	typeref:typename:MPI_Comm
comm_	src/outputs/io_wrapper.hpp	/^  MPI_Comm comm_;$/;"	m	class:IOWrapper	typeref:typename:MPI_Comm
compute_error	src/pgen/gr_linear_wave.cpp	/^bool compute_error;           \/\/ flag indicating L1 errors should be computed and saved$/;"	v	typeref:typename:bool
cons_	src/hydro/hydro.hpp	/^  AthenaArray<Real> cons_;         \/\/ conserved state, for some GR Riemann solvers$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
coord_area1_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_i_, coord_area1_i1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_i_, coord_area1_i1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_j_, coord_area1_j1_, coord_area1_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_j_, coord_area1_j1_, coord_area1_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_j_, coord_area1_j1_, coord_area1_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1_k1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_k1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1vc_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1vc_i_,coord_area1vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area1vc_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1vc_i_,coord_area1vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_i_, coord_area2_i1_, coord_area2_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_i_, coord_area2_i1_, coord_area2_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_i_, coord_area2_i1_, coord_area2_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_j_, coord_area2_j1_, coord_area2_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_j_, coord_area2_j1_, coord_area2_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_j_, coord_area2_j1_, coord_area2_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_k1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_k1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2vc_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2vc_i_,coord_area2vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area2vc_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2vc_i_,coord_area2vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area3_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_i_, coord_area3_i1_, coord_area3_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area3_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_i_, coord_area3_i1_, coord_area3_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area3_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_i_, coord_area3_i1_, coord_area3_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area3_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_j1_, coord_area3_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area3_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_j1_, coord_area3_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area3_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_area3vc_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3vc_i_; \/\/nonidealmhd addition$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len1_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_i1_, coord_len1_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len1_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_i1_, coord_len1_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len1_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_j1_, coord_len1_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len1_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_j1_, coord_len1_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len1_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len2_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_i1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len2_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_j1_, coord_len2_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len2_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_j1_, coord_len2_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len2_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len3_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_i1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len3_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_j1_, coord_len3_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len3_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_j1_, coord_len3_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len3_k1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_k1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_len3_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src1_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src1_i_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src1_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src1_j_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src2_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src2_i_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src2_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src2_j_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src3_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src3_j_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src_j1_, coord_src_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src_j1_, coord_src_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_src_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_i_, coord_vol_i1_, coord_vol_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_i_, coord_vol_i1_, coord_vol_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_i_, coord_vol_i1_, coord_vol_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_j_, coord_vol_j1_, coord_vol_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_j_, coord_vol_j1_, coord_vol_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_j_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_j_, coord_vol_j1_, coord_vol_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_k1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_k1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_vol_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width1_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width1_i1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width1_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width1_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width2_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width2_i1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width2_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width2_j1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width2_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width2_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width3_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_j1_, coord_width3_j2_, coord_width3_j3_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width3_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_j1_, coord_width3_j2_, coord_width3_j3_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width3_j3_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_j1_, coord_width3_j2_, coord_width3_j3_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width3_ji1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_ji1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width3_k1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_k1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
coord_width3_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
copy	src/fft/plimpton/fft_2d.h	/^  FFT_DATA *copy;                   \/* memory for remap results (if needed) *\/$/;"	m	struct:fft_plan_2d	typeref:typename:FFT_DATA *
copy	src/fft/plimpton/fft_3d.h	/^  FFT_DATA *copy;                   \/* memory for remap results (if needed) *\/$/;"	m	struct:fft_plan_3d	typeref:typename:FFT_DATA *
cos_a2	src/pgen/cpaw.cpp	/^static Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
cos_a2	src/pgen/jeans.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
cos_a2	src/pgen/linear_wave.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
cos_a3	src/pgen/cpaw.cpp	/^static Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
cos_a3	src/pgen/jeans.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
cos_a3	src/pgen/linear_wave.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
cos_psi	src/pgen/gr_torus.cpp	/^static Real psi, sin_psi, cos_psi;                 \/\/ tilt parameters$/;"	v	typeref:typename:Real	file:
cost	src/mesh/mesh.hpp	/^  Real cost;$/;"	m	class:MeshBlock	typeref:typename:Real
costlist	src/mesh/mesh.hpp	/^  Real *costlist;$/;"	m	class:Mesh	typeref:typename:Real *
cs2	src/pgen/jeans.cpp	/^static Real cs2,gam,gm1,omega,omega2, gconst;$/;"	v	typeref:typename:Real	file:
cube	src/pgen/cargrav_test.cpp	/^Real cube(Real x, Real y, Real z, Real x0, Real y0, Real z0, Real rad, Real gconst) {$/;"	f	typeref:typename:Real
current_level	src/mesh/mesh.hpp	/^  int root_level, max_level, current_level;$/;"	m	class:Mesh	typeref:typename:int
current_level_	src/multigrid/multigrid.hpp	/^  int current_level_;$/;"	m	class:MultigridDriver	typeref:typename:int
current_level_	src/multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid	typeref:typename:int
d	src/hydro/rsolvers/mhd/hlld.cpp	/^  Real d,mx,my,mz,e,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
d	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d,mx,my,mz,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
d0	src/pgen/jeans.cpp	/^static Real d0,p0,v0,u0,w0,va,b0;$/;"	v	typeref:typename:Real	file:
d0	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
dM	src/pgen/cylgrav_test.cpp	/^double dM(double x, void *p) {$/;"	f	typeref:typename:double
dN	src/pgen/cylgrav_test.cpp	/^double dN(double x, void *p) {$/;"	f	typeref:typename:double
d_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
d_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
data	src/athena_arrays.hpp	/^  T *data() { return pdata_; }$/;"	f	class:AthenaArray	typeref:typename:T *
data	src/athena_arrays.hpp	/^  const T *data() const { return pdata_; }$/;"	f	class:AthenaArray	typeref:typename:const T *
data	src/outputs/outputs.hpp	/^  AthenaArray<Real> data;  \/\/ array containing data (usually shallow copy\/slice)$/;"	m	struct:OutputData	typeref:typename:AthenaArray<Real>
data_format	src/outputs/outputs.hpp	/^  std::string data_format;$/;"	m	struct:OutputParameters	typeref:typename:std::string
dataset_names	src/outputs/outputs.hpp	/^  char (*dataset_names)[max_name_length+1];   \/\/ array of C-string names of datasets$/;"	m	class:ATHDF5Output	typeref:typename:char (*)[]
dby	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
dbz	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
dcmps	src/gravity/obcgravity.hpp	/^  DomainDecomp dcmps[12];$/;"	m	class:OBCGravityCar	typeref:typename:DomainDecomp[12]
dcmps	src/gravity/obcgravity.hpp	/^  DomainDecomp dcmps[26];$/;"	m	class:OBCGravityCyl	typeref:typename:DomainDecomp[26]
ddisp	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int *******
decomp_	src/fft/athena_fft.hpp	/^  int decomp_,pdim_;$/;"	m	class:FFTBlock	typeref:typename:int
decomp_	src/fft/athena_fft.hpp	/^  int decomp_,pdim_;$/;"	m	class:FFTDriver	typeref:typename:int
dedt	src/fft/turbulence.hpp	/^  Real expo,dedt,dvol;$/;"	m	class:TurbulenceDriver	typeref:typename:Real
def_	src/multigrid/multigrid.hpp	/^  AthenaArray<Real> *u_, *def_, *src_;$/;"	m	class:Multigrid	typeref:typename:AthenaArray<Real> **
delta	src/task_list/task_list.hpp	/^  Real delta; \/\/ low-storage coefficients to avoid double F() evaluation per substage$/;"	m	struct:IntegratorWeight	typeref:typename:Real
delta_b	src/pgen/gr_linear_wave.cpp	/^Real delta_u[4], delta_b[4];  \/\/ perturbations to contravariant quantities$/;"	v	typeref:typename:Real[4][4]
delta_pgas	src/pgen/gr_linear_wave.cpp	/^Real delta_rho, delta_pgas;   \/\/ perturbations to thermodynamic quantities$/;"	v	typeref:typename:Real
delta_rho	src/pgen/gr_linear_wave.cpp	/^Real delta_rho, delta_pgas;   \/\/ perturbations to thermodynamic quantities$/;"	v	typeref:typename:Real
delta_u	src/pgen/gr_linear_wave.cpp	/^Real delta_u[4], delta_b[4];  \/\/ perturbations to contravariant quantities$/;"	v	typeref:typename:Real[4]
delta_v	src/pgen/gr_linear_wave.cpp	/^Real delta_v[4];              \/\/ perturbations to 3-velocity$/;"	v	typeref:typename:Real[4]
den	src/pgen/cpaw.cpp	/^static Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	v	typeref:typename:Real	file:
density_floor_	src/eos/eos.hpp	/^  Real density_floor_, pressure_floor_;  \/\/ density and pressure floors$/;"	m	class:EquationOfState	typeref:typename:Real
dependency	src/task_list/mg_task_list.hpp	/^  uint64_t dependency;   \/\/ encodes dependencies to other tasks using " " " "$/;"	m	struct:MGTask	typeref:typename:uint64_t
dependency	src/task_list/task_list.hpp	/^  uint64_t dependency;   \/\/ encodes dependencies to other tasks using " " " "$/;"	m	struct:Task	typeref:typename:uint64_t
deref_count_	src/mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement	typeref:typename:int
deref_threshold_	src/mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement	typeref:typename:int
dfloor	src/pgen/disk.cpp	/^static Real dfloor;$/;"	v	typeref:typename:Real	file:
dfloor	src/pgen/strat.cpp	/^static Real dfloor,pfloor;$/;"	v	typeref:typename:Real	file:
dflx_	src/hydro/hydro.hpp	/^  AthenaArray<Real> dflx_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
dh2fd1	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f,dh2fd1,h31f,h32f,dh31fd1,dh32fd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dh2vd1	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v,dh2vd1,h31v,h32v,dh31vd1,dh32vd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dh31fd1	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f,dh2fd1,h31f,h32f,dh31fd1,dh32fd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dh31vd1	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v,dh2vd1,h31v,h32v,dh31vd1,dh32vd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dh32fd2	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f,dh2fd1,h31f,h32f,dh31fd1,dh32fd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dh32vd2	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v,dh2vd1,h31v,h32v,dh31vd1,dh32vd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dim	src/fft/athena_fft.hpp	/^  int dim;$/;"	m	struct:AthenaFFTPlan	typeref:typename:int
dim_	src/fft/athena_fft.hpp	/^  int dim_;$/;"	m	class:AthenaFFTIndex	typeref:typename:int
dim_	src/fft/athena_fft.hpp	/^  int dim_;$/;"	m	class:FFTBlock	typeref:typename:int
dim_	src/fft/athena_fft.hpp	/^  int dim_;$/;"	m	class:FFTDriver	typeref:typename:int
dir	src/fft/athena_fft.hpp	/^  int dir;$/;"	m	struct:AthenaFFTPlan	typeref:typename:int
disp	src/fft/athena_fft.hpp	/^  int Nx[3], nx[3], disp[3];$/;"	m	class:FFTBlock	typeref:typename:int[3][3][3]
divv_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> divv_; \/\/ divergence of velocity$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
dkx	src/fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock	typeref:typename:Real[3]
dl	src/pgen/shk_cloud.cpp	/^static Real gmma1,dl,pl,ul;$/;"	v	typeref:typename:Real	file:
dslope	src/pgen/disk.cpp	/^static Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	v	typeref:typename:Real	file:
dt	src/mesh/mesh.hpp	/^  Real start_time, tlim, cfl_number, time, dt;$/;"	m	class:Mesh	typeref:typename:Real
dt	src/outputs/outputs.hpp	/^  Real next_time, dt;$/;"	m	struct:OutputParameters	typeref:typename:Real
dt1_	src/hydro/hydro.hpp	/^  AthenaArray<Real> dt1_,dt2_,dt3_;  \/\/ scratch arrays used in NewTimeStep$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
dt2_	src/hydro/hydro.hpp	/^  AthenaArray<Real> dt1_,dt2_,dt3_;  \/\/ scratch arrays used in NewTimeStep$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
dt3_	src/hydro/hydro.hpp	/^  AthenaArray<Real> dt1_,dt2_,dt3_;  \/\/ scratch arrays used in NewTimeStep$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
dtdrive	src/fft/turbulence.hpp	/^  Real dtdrive,tdrive;$/;"	m	class:TurbulenceDriver	typeref:typename:Real
dvol	src/fft/turbulence.hpp	/^  Real expo,dedt,dvol;$/;"	m	class:TurbulenceDriver	typeref:typename:Real
dx1	src/fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock	typeref:typename:Real[3]
dx1_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_,dx2_,dx3_,len_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
dx1_	src/gravity/obcgravity.hpp	/^  Real dx1_, dx2_, dx3_;$/;"	m	class:OBCGravityCar	typeref:typename:Real
dx1_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> dx1_,dx2_,dx3_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
dx1f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f; \/\/ face   spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dx1f2_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f2_, dx1f2_, x1v2_, dx1v2_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
dx1f_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f_, dx1f_, x1v_, dx1v_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
dx1v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v; \/\/ volume spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dx1v2_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f2_, dx1f2_, x1v2_, dx1v2_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
dx1v_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f_, dx1f_, x1v_, dx1v_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
dx2	src/fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock	typeref:typename:Real[3]
dx2_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_,dx2_,dx3_,len_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
dx2_	src/gravity/obcgravity.hpp	/^  Real dx1_, dx2_, dx3_;$/;"	m	class:OBCGravityCar	typeref:typename:Real
dx2_	src/gravity/obcgravity.hpp	/^  Real rat, dx2_, dx3_;$/;"	m	class:OBCGravityCyl	typeref:typename:Real
dx2_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> dx1_,dx2_,dx3_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
dx2f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f; \/\/ face   spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dx2v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v; \/\/ volume spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dx3	src/fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock	typeref:typename:Real[3]
dx3_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_,dx2_,dx3_,len_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
dx3_	src/gravity/obcgravity.hpp	/^  Real dx1_, dx2_, dx3_;$/;"	m	class:OBCGravityCar	typeref:typename:Real
dx3_	src/gravity/obcgravity.hpp	/^  Real rat, dx2_, dx3_;$/;"	m	class:OBCGravityCyl	typeref:typename:Real
dx3_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> dx1_,dx2_,dx3_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
dx3f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f; \/\/ face   spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dx3v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v; \/\/ volume spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
dxw_	src/hydro/hydro.hpp	/^  AthenaArray<Real> dxw_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
e	src/field/field.hpp	/^  EdgeField e;    \/\/ edge-centered electric fields used in CT$/;"	m	class:Field	typeref:typename:EdgeField
e	src/hydro/rsolvers/mhd/hlld.cpp	/^  Real d,mx,my,mz,e,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
e1_x2f	src/field/field.hpp	/^  AthenaArray<Real> e1_x2f, e3_x2f; \/\/ electric fields at x2-face from Riemann solver$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
e1_x3f	src/field/field.hpp	/^  AthenaArray<Real> e1_x3f, e2_x3f; \/\/ electric fields at x3-face from Riemann solver$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
e2_x1f	src/field/field.hpp	/^  AthenaArray<Real> e2_x1f, e3_x1f; \/\/ electric fields at x1-face from Riemann solver$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
e2_x3f	src/field/field.hpp	/^  AthenaArray<Real> e1_x3f, e2_x3f; \/\/ electric fields at x3-face from Riemann solver$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
e3_x1f	src/field/field.hpp	/^  AthenaArray<Real> e2_x1f, e3_x1f; \/\/ electric fields at x1-face from Riemann solver$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
e3_x2f	src/field/field.hpp	/^  AthenaArray<Real> e1_x2f, e3_x2f; \/\/ electric fields at x2-face from Riemann solver$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
e_h	src/field/field_diffusion/field_diffusion.hpp	/^  EdgeField e_oa,e_h;     \/\/ edge-centered electric field from non-ideal MHD$/;"	m	class:FieldDiffusion	typeref:typename:EdgeField
e_oa	src/field/field_diffusion/field_diffusion.hpp	/^  EdgeField e_oa,e_h;     \/\/ edge-centered electric field from non-ideal MHD$/;"	m	class:FieldDiffusion	typeref:typename:EdgeField
edge_flag_	src/bvals/bvals.hpp	/^  bool edge_flag_[12];$/;"	m	class:BoundaryValues	typeref:typename:bool[12]
edge_length_	src/field/field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
edge_length_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_,face_area_p1_,edge_length_,edge_length_m1_,cell_volume_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
edge_length_m1_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_,face_area_p1_,edge_length_,edge_length_m1_,cell_volume_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
edge_length_p1_	src/field/field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
eid	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
emf_north_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus *emf_north_flag_;$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus *
emf_north_recv_	src/bvals/bvals.hpp	/^  Real **emf_north_send_, **emf_north_recv_;$/;"	m	class:BoundaryValues	typeref:typename:Real ****
emf_north_send_	src/bvals/bvals.hpp	/^  Real **emf_north_send_, **emf_north_recv_;$/;"	m	class:BoundaryValues	typeref:typename:Real **
emf_south_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus *emf_south_flag_;$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus *
emf_south_recv_	src/bvals/bvals.hpp	/^  Real **emf_south_send_, **emf_south_recv_;$/;"	m	class:BoundaryValues	typeref:typename:Real ****
emf_south_send_	src/bvals/bvals.hpp	/^  Real **emf_south_send_, **emf_south_recv_;$/;"	m	class:BoundaryValues	typeref:typename:Real **
eps_	src/bvals/bvals.hpp	/^  Real eps_;                    \/\/ fraction part of the shear$/;"	m	class:BoundaryValues	typeref:typename:Real
eps_	src/multigrid/multigrid.hpp	/^  Real eps_;$/;"	m	class:MultigridDriver	typeref:typename:Real
eta	src/pgen/resist.cpp	/^static Real amp,x0,t0,eta;$/;"	v	typeref:typename:Real	file:
etaB	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> etaB; \/\/ 4-dim array, covering O\/H\/A altogether$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
eta_ad	src/field/field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion	typeref:typename:Real
eta_hall	src/field/field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion	typeref:typename:Real
eta_ohm	src/field/field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion	typeref:typename:Real
eta_tot_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> eta_tot_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
ev	src/pgen/jeans.cpp	/^static Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	v	typeref:typename:Real[]	file:
ev	src/pgen/linear_wave.cpp	/^static Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	v	typeref:typename:Real[]	file:
exc_	src/bvals/bvals.hpp	/^  AthenaArray<Real> exc_;$/;"	m	class:BoundaryValues	typeref:typename:AthenaArray<Real>
expo	src/fft/turbulence.hpp	/^  Real expo,dedt,dvol;$/;"	m	class:TurbulenceDriver	typeref:typename:Real
extent_2d	src/fft/plimpton/remap_2d.h	/^struct extent_2d {$/;"	s
extent_3d	src/fft/plimpton/remap_3d.h	/^struct extent_3d {$/;"	s
f	src/pgen/cylgrav_test.cpp	/^double Hure::f(double R, double a, double bet, double zet)$/;"	f	class:Hure	typeref:typename:double
f_in_	src/fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_,*f_out_,*b_in_,*b_out_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTIndex *
f_out_	src/fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_,*f_out_,*b_in_,*b_out_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTIndex **
fac	src/pgen/cpaw.cpp	/^static Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
face_area_	src/field/field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
face_area_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_,face_area_p1_,edge_length_,edge_length_m1_,cell_volume_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
face_area_p1_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_,face_area_p1_,edge_length_,edge_length_m1_,cell_volume_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
factor	src/fft/plimpton/factor.cpp	/^void factor(int n, int *num, int *list)$/;"	f	typeref:typename:void
fft_2d	src/fft/plimpton/fft_2d.cpp	/^void fft_2d(FFT_DATA *in, FFT_DATA *out, int flag, struct fft_plan_2d *plan)$/;"	f	typeref:typename:void
fft_2d_create_plan	src/fft/plimpton/fft_2d.cpp	/^struct fft_plan_2d *fft_2d_create_plan($/;"	f	typeref:struct:fft_plan_2d *
fft_2d_destroy_plan	src/fft/plimpton/fft_2d.cpp	/^void fft_2d_destroy_plan(struct fft_plan_2d *plan)$/;"	f	typeref:typename:void
fft_2d_plan	src/gravity/obcgravity.hpp	/^  fftw_plan fft_2d_plan[4][2];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_plan[4][2]
fft_2d_plan	src/gravity/obcgravity.hpp	/^  fftw_plan fft_2d_plan[6][14];$/;"	m	class:OBCGravityCar	typeref:typename:fftw_plan[6][14]
fft_3d	src/fft/plimpton/fft_3d.cpp	/^void fft_3d(FFT_DATA *in, FFT_DATA *out, int flag, struct fft_plan_3d *plan)$/;"	f	typeref:typename:void
fft_3d_create_plan	src/fft/plimpton/fft_3d.cpp	/^struct fft_plan_3d *fft_3d_create_plan($/;"	f	typeref:struct:fft_plan_3d *
fft_3d_destroy_plan	src/fft/plimpton/fft_3d.cpp	/^void fft_3d_destroy_plan(struct fft_plan_3d *plan)$/;"	f	typeref:typename:void
fft_block_size_	src/fft/athena_fft.hpp	/^  RegionSize fft_mesh_size_, fft_block_size_;$/;"	m	class:FFTDriver	typeref:typename:RegionSize
fft_loclist_	src/fft/athena_fft.hpp	/^  LogicalLocation *fft_loclist_;$/;"	m	class:FFTDriver	typeref:typename:LogicalLocation *
fft_mesh_size_	src/fft/athena_fft.hpp	/^  RegionSize fft_mesh_size_, fft_block_size_;$/;"	m	class:FFTDriver	typeref:typename:RegionSize
fft_plan_2d	src/fft/plimpton/fft_2d.h	/^struct fft_plan_2d {$/;"	s
fft_plan_3d	src/fft/plimpton/fft_3d.h	/^struct fft_plan_3d {$/;"	s
fft_plan_r2r_	src/gravity/obcgravity.hpp	/^  fftw_plan fft_plan_r2r_[15];$/;"	m	class:OBCGravityCar	typeref:typename:fftw_plan[15]
fft_x2_backward_	src/gravity/obcgravity.hpp	/^  fftw_plan fft_x2_backward_[2];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_plan[2]
fft_x2_forward_	src/gravity/obcgravity.hpp	/^  fftw_plan fft_x2_forward_[18];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_plan[18]
fft_x3_r2r_	src/gravity/obcgravity.hpp	/^  fftw_plan fft_x3_r2r_[8];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_plan[8]
fh_	src/outputs/io_wrapper.hpp	/^  IOWrapperFile fh_;$/;"	m	class:IOWrapper	typeref:typename:IOWrapperFile
fi1	src/bvals/bvals.hpp	/^  int ox1, ox2, ox3, fi1, fi2;$/;"	m	struct:NeighborIndexes	typeref:typename:int
fi1	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
fi2	src/bvals/bvals.hpp	/^  int ox1, ox2, ox3, fi1, fi2;$/;"	m	struct:NeighborIndexes	typeref:typename:int
fi2	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
fid	src/bvals/bvals.hpp	/^  enum BoundaryFace fid;$/;"	m	struct:NeighborBlock	typeref:enum:BoundaryFace
field_config	src/pgen/gr_torus.cpp	/^static b_configs field_config;                     \/\/ type of magnetic field$/;"	v	typeref:typename:b_configs	file:
field_diffusion_defined	src/field/field_diffusion/field_diffusion.hpp	/^  bool field_diffusion_defined;$/;"	m	class:FieldDiffusion	typeref:typename:bool
file_basename	src/outputs/outputs.hpp	/^  std::string file_basename;$/;"	m	struct:OutputParameters	typeref:typename:std::string
file_id	src/outputs/outputs.hpp	/^  std::string file_id;$/;"	m	struct:OutputParameters	typeref:typename:std::string
file_number	src/outputs/outputs.hpp	/^  int file_number;$/;"	m	struct:OutputParameters	typeref:typename:int
file_type	src/outputs/outputs.hpp	/^  std::string file_type;$/;"	m	struct:OutputParameters	typeref:typename:std::string
filename	src/outputs/outputs.hpp	/^  std::string filename;                       \/\/ name of athdf file$/;"	m	class:ATHDF5Output	typeref:typename:std::string
finished_tasks	src/task_list/task_list.hpp	/^  uint64_t finished_tasks;$/;"	m	class:TaskState	typeref:typename:uint64_t
firsttime_	src/bvals/bvals.hpp	/^  bool firsttime_;$/;"	m	class:BoundaryValues	typeref:typename:bool
fixed_	src/eos/eos.hpp	/^  AthenaArray<Real> fixed_;              \/\/ cells with problems, used in GR hydro$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
flag	src/bvals/bvals.hpp	/^  enum BoundaryStatus flag[56];$/;"	m	struct:BoundaryData	typeref:enum:BoundaryStatus[56]
flag	src/bvals/bvals_grav.hpp	/^  enum BoundaryStatus flag[56], sflag[56];$/;"	m	struct:GravityBoundaryData	typeref:enum:BoundaryStatus[56]
flag	src/bvals/bvals_mg.hpp	/^  enum BoundaryStatus flag[56], sflag[56];$/;"	m	struct:MGBoundaryData	typeref:enum:BoundaryStatus[56]
flag	src/mesh/meshblock_tree.hpp	/^  bool flag; \/\/ false: virtual node, has leaves; true: real node, is a leaf$/;"	m	class:MeshBlockTree	typeref:typename:bool
flip_across_pole_field	src/bvals/bvals.hpp	/^static bool flip_across_pole_field[] = {false, true, true};$/;"	v	typeref:typename:bool[]
flip_across_pole_hydro	src/bvals/bvals.hpp	/^static bool flip_across_pole_hydro[] = {false, false, true, true, false};$/;"	v	typeref:typename:bool[]
flux	src/hydro/hydro.hpp	/^  AthenaArray<Real> flux[3];  \/\/ face-averaged flux vector$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>[3]
flx_inner_emf_	src/bvals/bvals.hpp	/^  EdgeField flx_inner_emf_, flx_outer_emf_;$/;"	m	class:BoundaryValues	typeref:typename:EdgeField
flx_inner_field_	src/bvals/bvals.hpp	/^  FaceField flx_inner_field_, flx_outer_field_;$/;"	m	class:BoundaryValues	typeref:typename:FaceField
flx_inner_hydro_	src/bvals/bvals.hpp	/^  AthenaArray<Real>  flx_inner_hydro_, flx_outer_hydro_;$/;"	m	class:BoundaryValues	typeref:typename:AthenaArray<Real>
flx_outer_emf_	src/bvals/bvals.hpp	/^  EdgeField flx_inner_emf_, flx_outer_emf_;$/;"	m	class:BoundaryValues	typeref:typename:EdgeField
flx_outer_field_	src/bvals/bvals.hpp	/^  FaceField flx_inner_field_, flx_outer_field_;$/;"	m	class:BoundaryValues	typeref:typename:FaceField
flx_outer_hydro_	src/bvals/bvals.hpp	/^  AthenaArray<Real>  flx_inner_hydro_, flx_outer_hydro_;$/;"	m	class:BoundaryValues	typeref:typename:AthenaArray<Real>
four_pi_G	src/gravity/gravity.hpp	/^  Real gconst, four_pi_G;$/;"	m	class:Gravity	typeref:typename:Real
four_pi_G_	src/gravity/fftgravity.hpp	/^  Real four_pi_G_;$/;"	m	class:FFTGravityDriver	typeref:typename:Real
four_pi_G_	src/gravity/mggravity.hpp	/^  Real four_pi_G_;$/;"	m	class:MGGravityDriver	typeref:typename:Real
four_pi_G_	src/mesh/mesh.hpp	/^  Real four_pi_G_, grav_eps_, grav_mean_rho_;$/;"	m	class:Mesh	typeref:typename:Real
four_pi_G_	src/pgen/cylgrav_test.cpp	/^  double four_pi_G_, rho0_;$/;"	m	class:Hure	typeref:typename:double	file:
fperiodic_	src/multigrid/multigrid.hpp	/^  bool fperiodic_;$/;"	m	class:MultigridDriver	typeref:typename:bool
fplan_	src/fft/athena_fft.hpp	/^  AthenaFFTPlan *fplan_,*bplan_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTPlan *
fvol_	src/mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement	typeref:typename:AthenaArray<Real>[2][2]
fx_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> fx_,fy_,fz_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
fy_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> fx_,fy_,fz_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
fz_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> fx_,fy_,fz_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
g	src/pgen/cylgrav_test.cpp	/^double Hure::g(double R, double a, double bet, double zet)$/;"	f	class:Hure	typeref:typename:double
g	src/pgen/gr_linear_wave.cpp	/^AthenaArray<Real> g, gi;      \/\/ metric and inverse$/;"	v	typeref:typename:AthenaArray<Real>
g1_	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms	typeref:typename:Real
g2_	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms	typeref:typename:Real
g3_	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms	typeref:typename:Real
g_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> g_, gi_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
g_	src/eos/eos.hpp	/^  AthenaArray<Real> g_, g_inv_;          \/\/ metric and its inverse, used in GR$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
g_	src/field/field.hpp	/^  AthenaArray<Real> g_, gi_;  \/\/ only used in GR$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
g_	src/hydro/hydro.hpp	/^  AthenaArray<Real> g_, gi_;       \/\/ metric and inverse, for some GR Riemann solvers$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
g_inv_	src/eos/eos.hpp	/^  AthenaArray<Real> g_, g_inv_;          \/\/ metric and its inverse, used in GR$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
gam	src/pgen/jeans.cpp	/^static Real cs2,gam,gm1,omega,omega2, gconst;$/;"	v	typeref:typename:Real	file:
gam	src/pgen/linear_wave.cpp	/^static Real gam,gm1,iso_cs,vflow;$/;"	v	typeref:typename:Real	file:
gamma_	src/eos/eos.hpp	/^  Real iso_sound_speed_, gamma_;         \/\/ isothermal Cs, ratio of specific heats$/;"	m	class:EquationOfState	typeref:typename:Real
gamma_1	src/task_list/task_list.hpp	/^  Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:IntegratorWeight	typeref:typename:Real
gamma_2	src/task_list/task_list.hpp	/^  Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:IntegratorWeight	typeref:typename:Real
gamma_3	src/task_list/task_list.hpp	/^  Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:IntegratorWeight	typeref:typename:Real
gamma_adi	src/pgen/gr_torus.cpp	/^static Real gamma_adi, k_adi;                      \/\/ hydro parameters$/;"	v	typeref:typename:Real	file:
gamma_adi_red	src/pgen/gr_linear_wave.cpp	/^Real gamma_adi_red;           \/\/ reduced adiabatic index \\Gamma\/(\\Gamma-1)$/;"	v	typeref:typename:Real
gamma_gas	src/pgen/disk.cpp	/^static Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	v	typeref:typename:Real	file:
gamma_gas	src/pgen/field_loop_poles.cpp	/^static Real vy0, rho0, isocs2, gamma_gas;$/;"	v	typeref:typename:Real	file:
gamma_max_	src/eos/eos.hpp	/^  Real gamma_max_;                       \/\/ maximum Lorentz factor$/;"	m	class:EquationOfState	typeref:typename:Real
gcnt_	src/fft/athena_fft.hpp	/^  int64_t cnt_,gcnt_;$/;"	m	class:FFTBlock	typeref:typename:int64_t
gcnt_	src/fft/athena_fft.hpp	/^  int64_t gcnt_;$/;"	m	class:FFTDriver	typeref:typename:int64_t
gconst	src/gravity/gravity.hpp	/^  Real gconst, four_pi_G;$/;"	m	class:Gravity	typeref:typename:Real
gconst	src/pgen/jeans.cpp	/^static Real cs2,gam,gm1,omega,omega2, gconst;$/;"	v	typeref:typename:Real	file:
gflag	src/mesh/mesh.hpp	/^  int gflag;$/;"	m	class:Mesh	typeref:typename:int
gflag	src/mesh/mesh.hpp	/^  int gflag;$/;"	m	class:MeshBlock	typeref:typename:int
gflx	src/hydro/hydro.hpp	/^  AthenaArray<Real> gflx[3], gflx_old[3]; \/\/ gravity tensor (old Athena style)$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>[3]
gflx_old	src/hydro/hydro.hpp	/^  AthenaArray<Real> gflx[3], gflx_old[3]; \/\/ gravity tensor (old Athena style)$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>[3][3]
gi	src/pgen/gr_linear_wave.cpp	/^AthenaArray<Real> g, gi;      \/\/ metric and inverse$/;"	v	typeref:typename:AthenaArray<Real>
gi_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> g_, gi_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
gi_	src/field/field.hpp	/^  AthenaArray<Real> g_, gi_;  \/\/ only used in GR$/;"	m	class:Field	typeref:typename:AthenaArray<Real>
gi_	src/hydro/hydro.hpp	/^  AthenaArray<Real> g_, gi_;       \/\/ metric and inverse, for some GR Riemann solvers$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
gid	src/bvals/bvals.hpp	/^  int gid;     \/\/ global ID of neighbor$/;"	m	struct:PolarNeighborBlock	typeref:typename:int
gid	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
gid	src/mesh/mesh.hpp	/^  int gid, lid;$/;"	m	class:MeshBlock	typeref:typename:int
gid	src/mesh/meshblock_tree.hpp	/^  int gid;$/;"	m	class:MeshBlockTree	typeref:typename:int
gid_	src/fft/athena_fft.hpp	/^  int gid_;$/;"	m	class:FFTBlock	typeref:typename:int
gid_	src/multigrid/multigrid.hpp	/^  int gid_, lid_;$/;"	m	class:Multigrid	typeref:typename:int
gm0	src/pgen/disk.cpp	/^static Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	v	typeref:typename:Real	file:
gm0	src/pgen/visc.cpp	/^static Real nuiso,gm0;$/;"	v	typeref:typename:Real	file:
gm1	src/hydro/rsolvers/hydro/roe.cpp	/^static Real gm1, iso_cs;$/;"	v	typeref:typename:Real	file:
gm1	src/hydro/rsolvers/mhd/roe_mhd.cpp	/^static Real gm1, iso_cs;$/;"	v	typeref:typename:Real	file:
gm1	src/pgen/cpaw.cpp	/^static Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	v	typeref:typename:Real	file:
gm1	src/pgen/hb3.cpp	/^static Real gm1,iso_cs;$/;"	v	typeref:typename:Real	file:
gm1	src/pgen/jeans.cpp	/^static Real cs2,gam,gm1,omega,omega2, gconst;$/;"	v	typeref:typename:Real	file:
gm1	src/pgen/jet.cpp	/^static Real gm1,x2_0,x3_0;$/;"	v	typeref:typename:Real	file:
gm1	src/pgen/linear_wave.cpp	/^static Real gam,gm1,iso_cs,vflow;$/;"	v	typeref:typename:Real	file:
gm1	src/pgen/magnoh.cpp	/^static Real gm1;$/;"	v	typeref:typename:Real	file:
gm1	src/pgen/ssheet.cpp	/^static Real gm1,iso_cs;$/;"	v	typeref:typename:Real	file:
gm_	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real gm_;           \/\/ GM for point mass MUST BE LOCATED AT ORIGIN$/;"	m	class:HydroSourceTerms	typeref:typename:Real
gmma	src/pgen/noh.cpp	/^static Real gmma, gmma1;$/;"	v	typeref:typename:Real	file:
gmma1	src/pgen/noh.cpp	/^static Real gmma, gmma1;$/;"	v	typeref:typename:Real	file:
gmma1	src/pgen/shk_cloud.cpp	/^static Real gmma1,dl,pl,ul;$/;"	v	typeref:typename:Real	file:
grav_acc	src/pgen/rt.cpp	/^static Real grav_acc;$/;"	v	typeref:typename:Real	file:
grav_eps_	src/mesh/mesh.hpp	/^  Real four_pi_G_, grav_eps_, grav_mean_rho_;$/;"	m	class:Mesh	typeref:typename:Real
grav_mean_rho	src/gravity/gravity.hpp	/^  Real grav_mean_rho;$/;"	m	class:Gravity	typeref:typename:Real
grav_mean_rho_	src/mesh/mesh.hpp	/^  Real four_pi_G_, grav_eps_, grav_mean_rho_;$/;"	m	class:Mesh	typeref:typename:Real
gravity_tensor_energy_	src/gravity/gravity.hpp	/^  bool gravity_tensor_energy_;$/;"	m	class:Gravity	typeref:typename:bool
gravity_tensor_momentum_	src/gravity/gravity.hpp	/^  bool gravity_tensor_momentum_;$/;"	m	class:Gravity	typeref:typename:bool
grf	src/gravity/obcgravity.hpp	/^  Real *sigma[6], *sigma_mid[6][2], *sigma_fft[6][2][2], *sigfft[2][2][2], *grf;$/;"	m	class:OBCGravityCar	typeref:typename:Real * [6]* [6][2]* [6][2][2]* [2][2][2]*
grf	src/gravity/obcgravity.hpp	/^  fftw_complex *grf[4][4];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex * [4][4]
gtlist_	src/gravity/fftgravity.hpp	/^  GravitySolverTaskList *gtlist_;$/;"	m	class:FFTGravityDriver	typeref:typename:GravitySolverTaskList *
gtlist_	src/gravity/obcgravity.hpp	/^  GravitySolverTaskList *gtlist_;$/;"	m	class:OBCGravityDriver	typeref:typename:GravitySolverTaskList *
h2f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f,dh2fd1,h31f,h32f,dh31fd1,dh32fd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
h2v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v,dh2vd1,h31v,h32v,dh31vd1,dh32vd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
h31f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f,dh2fd1,h31f,h32f,dh31fd1,dh32fd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
h31v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v,dh2vd1,h31v,h32v,dh31vd1,dh32vd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
h32f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f,dh2fd1,h31f,h32f,dh31fd1,dh32fd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
h32v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v,dh2vd1,h31v,h32v,dh31vd1,dh32vd2;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
hNx2	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
hminus_ratio_i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_i, hminus_ratio_i; \/\/ for curvilinear PPMx1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
hminus_ratio_j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_j, hminus_ratio_j; \/\/ for curvilinear PPMx2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
hminus_ratio_k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_k, hminus_ratio_k; \/\/ for curvilinear PPMx3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
hnx2	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
hplus_ratio_i	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_i, hminus_ratio_i; \/\/ for curvilinear PPMx1$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
hplus_ratio_j	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_j, hminus_ratio_j; \/\/ for curvilinear PPMx2$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
hplus_ratio_k	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_k, hminus_ratio_k; \/\/ for curvilinear PPMx3$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
hr	src/pgen/cylgrav_test.cpp	/^  Hure *hr;$/;"	m	struct:Fparams	typeref:typename:Hure *	file:
hst_BxBy	src/pgen/hb3.cpp	/^static Real hst_BxBy(MeshBlock *pmb, int iout) {$/;"	f	typeref:typename:Real	file:
hst_BxBy	src/pgen/hgb.cpp	/^static Real hst_BxBy(MeshBlock *pmb, int iout) {$/;"	f	typeref:typename:Real	file:
hst_BxBy	src/pgen/strat.cpp	/^static Real hst_BxBy(MeshBlock *pmb, int iout) {$/;"	f	typeref:typename:Real	file:
hst_dBy	src/pgen/hgb.cpp	/^static Real hst_dBy(MeshBlock *pmb, int iout) {$/;"	f	typeref:typename:Real	file:
hst_dVxVy	src/pgen/hgb.cpp	/^static Real hst_dVxVy(MeshBlock *pmb, int iout) {$/;"	f	typeref:typename:Real	file:
hst_dVxVy	src/pgen/strat.cpp	/^static Real hst_dVxVy(MeshBlock *pmb, int iout) {$/;"	f	typeref:typename:Real	file:
hydro_diffusion_defined	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  bool hydro_diffusion_defined;$/;"	m	class:HydroDiffusion	typeref:typename:bool
hydro_sourceterms_defined	src/hydro/srcterms/hydro_srcterms.hpp	/^  bool hydro_sourceterms_defined;$/;"	m	class:HydroSourceTerms	typeref:typename:bool
ie	src/fft/athena_fft.hpp	/^  int nx[3], is[3], ie[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3][3][3]
ie	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
ie	src/mesh/mesh.hpp	/^  int is,ie,js,je,ks,ke;$/;"	m	class:MeshBlock	typeref:typename:int
ifield	src/pgen/hb3.cpp	/^static int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	v	typeref:typename:int	file:
igidlist	src/bvals/bvals.hpp	/^  int *igidlist, *ilidlist, *irnklist, *ilevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int *
ihi	src/fft/plimpton/remap_2d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_2d	typeref:typename:int
ihi	src/fft/plimpton/remap_3d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_3d	typeref:typename:int
ilevlist	src/bvals/bvals.hpp	/^  int *igidlist, *ilidlist, *irnklist, *ilevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int ****
ilidlist	src/bvals/bvals.hpp	/^  int *igidlist, *ilidlist, *irnklist, *ilevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int **
ilo	src/fft/plimpton/remap_2d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_2d	typeref:typename:int
ilo	src/fft/plimpton/remap_3d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_3d	typeref:typename:int
iloc	src/fft/athena_fft.hpp	/^  int iloc[3],ploc[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3]
in2_	src/gravity/obcgravity.hpp	/^  Real *in_, *out_, *buf_, *in2_;$/;"	m	class:OBCGravityCar	typeref:typename:Real ****
in2_	src/gravity/obcgravity.hpp	/^  fftw_complex *in_, *in2_, *out_, *out2_, *buf_;$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex **
in_	src/fft/athena_fft.hpp	/^  AthenaFFTComplex *in_, *out_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTComplex *
in_	src/gravity/obcgravity.hpp	/^  Real *in_, *out_, *buf_, *in2_;$/;"	m	class:OBCGravityCar	typeref:typename:Real *
in_	src/gravity/obcgravity.hpp	/^  fftw_complex *in_, *in2_, *out_, *out2_, *buf_;$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex *
include_ghost_zones	src/outputs/outputs.hpp	/^  bool include_ghost_zones, cartesian_vector;$/;"	m	struct:OutputParameters	typeref:typename:bool
indx_first_task	src/task_list/task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	class:TaskState	typeref:typename:int
initdens	src/pgen/torus.cpp	/^static AthenaArray<Real> initdens;$/;"	v	typeref:typename:AthenaArray<Real>	file:
initial	src/pgen/gr_linear_wave.cpp	/^AthenaArray<Real> initial;    \/\/ initial conditions$/;"	v	typeref:typename:AthenaArray<Real>
initprs	src/pgen/torus.cpp	/^static AthenaArray<Real> initprs;$/;"	v	typeref:typename:AthenaArray<Real>	file:
initvel2	src/pgen/torus.cpp	/^static AthenaArray<Real> initvel2;$/;"	v	typeref:typename:AthenaArray<Real>	file:
inner	src/bvals/bvals.hpp	/^  bool inner, outer; \/\/ inner=true if inner blocks$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:bool
integrator	src/task_list/task_list.hpp	/^  std::string integrator;$/;"	m	class:TimeIntegratorTaskList	typeref:typename:std::string
interp_values	src/pgen/gr_mhd_inflow.cpp	/^static AthenaArray<Real> interp_values;  \/\/ table for analytic solution$/;"	v	typeref:typename:AthenaArray<Real>	file:
ip	src/fft/athena_fft.hpp	/^  int np[3], ip[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3][3]
ipert	src/pgen/hb3.cpp	/^static int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	v	typeref:typename:int	file:
ipert	src/pgen/ssheet.cpp	/^static int ipert; \/\/ initial pattern$/;"	v	typeref:typename:int	file:
iprob	src/pgen/resist.cpp	/^static int iprob;$/;"	v	typeref:typename:int	file:
iprob	src/pgen/visc.cpp	/^static int iprob;$/;"	v	typeref:typename:int	file:
irnklist	src/bvals/bvals.hpp	/^  int *igidlist, *ilidlist, *irnklist, *ilevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int ***
is	src/fft/athena_fft.hpp	/^  int nx[3], is[3], ie[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3][3]
is	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
is	src/mesh/mesh.hpp	/^  int is,ie,js,je,ks,ke;$/;"	m	class:MeshBlock	typeref:typename:int
isfinite	src/eos/adiabatic_mhd_gr.cpp	/^      if (not std::isfinite(lambda_plus) or lambda_plus > 1.0) {$/;"	m	class:EquationOfState::FastMagnetosonicSpeedsSR::std	typeref:typename:not	file:
isfinite	src/eos/adiabatic_mhd_gr.cpp	/^      if (not std::isfinite(rr) or std::abs(rr) > rr_max) {$/;"	m	class:ConservedToPrimitiveNormal::std	typeref:typename:not	file:
isfinite	src/eos/adiabatic_mhd_gr.cpp	/^  if (not std::isfinite(prim(IDN,k,j,i))) {$/;"	m	class:ConservedToPrimitiveNormal::std	typeref:typename:not	file:
isfinite	src/eos/adiabatic_mhd_gr.cpp	/^  if (not std::isfinite(prim(IPR,k,j,i))) {$/;"	m	class:ConservedToPrimitiveNormal::std	typeref:typename:not	file:
isfinite	src/eos/adiabatic_mhd_gr.cpp	/^  if (not std::isfinite(prim(IVX,k,j,i))$/;"	m	class:ConservedToPrimitiveNormal::std	typeref:typename:not	file:
isfinite	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^          if (not std::isfinite(cons_interface[n][m])$/;"	m	class:HLLDTransforming::std	typeref:typename:not	file:
isfinite	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^      if (not std::isfinite(lambda_al[m]) or not std::isfinite(lambda_ar[m]) or$/;"	m	class:HLLDTransforming::std	typeref:typename:not	file:
isfinite	src/hydro/rsolvers/mhd/hlld_rel.cpp	/^      if (not std::isfinite(ptot_init[m]) or ptot_init[m] <= 0.0) {$/;"	m	class:HLLDTransforming::std	typeref:typename:not	file:
isize	src/fft/plimpton/remap_2d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_2d	typeref:typename:int
isize	src/fft/plimpton/remap_3d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_3d	typeref:typename:int
islice	src/outputs/outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters	typeref:typename:int
iso_cs	src/hydro/rsolvers/hydro/roe.cpp	/^static Real gm1, iso_cs;$/;"	v	typeref:typename:Real	file:
iso_cs	src/hydro/rsolvers/mhd/roe_mhd.cpp	/^static Real gm1, iso_cs;$/;"	v	typeref:typename:Real	file:
iso_cs	src/pgen/hb3.cpp	/^static Real gm1,iso_cs;$/;"	v	typeref:typename:Real	file:
iso_cs	src/pgen/linear_wave.cpp	/^static Real gam,gm1,iso_cs,vflow;$/;"	v	typeref:typename:Real	file:
iso_cs	src/pgen/ssheet.cpp	/^static Real gm1,iso_cs;$/;"	v	typeref:typename:Real	file:
iso_sound_speed_	src/eos/eos.hpp	/^  Real iso_sound_speed_, gamma_;         \/\/ isothermal Cs, ratio of specific heats$/;"	m	class:EquationOfState	typeref:typename:Real
isocs2	src/pgen/field_loop_poles.cpp	/^static Real vy0, rho0, isocs2, gamma_gas;$/;"	v	typeref:typename:Real	file:
iuser_mesh_data	src/mesh/mesh.hpp	/^  AthenaArray<int> *iuser_mesh_data;$/;"	m	class:Mesh	typeref:typename:AthenaArray<int> *
iuser_meshblock_data	src/mesh/mesh.hpp	/^  AthenaArray<int> *iuser_meshblock_data;$/;"	m	class:MeshBlock	typeref:typename:AthenaArray<int> *
jcc	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jcc;     \/\/ cell-centered current density (for the integrator)$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
je	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
je	src/mesh/mesh.hpp	/^  int is,ie,js,je,ks,ke;$/;"	m	class:MeshBlock	typeref:typename:int
jedge_	src/field/field_diffusion/field_diffusion.hpp	/^  EdgeField jedge_;       \/\/ curl of B$/;"	m	class:FieldDiffusion	typeref:typename:EdgeField
jfx	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx,jfy,jfz; \/\/ interface current density (for the HLL Riemann solver)$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
jfy	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx,jfy,jfz; \/\/ interface current density (for the HLL Riemann solver)$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
jfz	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx,jfy,jfz; \/\/ interface current density (for the HLL Riemann solver)$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
jhi	src/fft/plimpton/remap_2d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_2d	typeref:typename:int
jhi	src/fft/plimpton/remap_3d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_3d	typeref:typename:int
jlo	src/fft/plimpton/remap_2d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_2d	typeref:typename:int
jlo	src/fft/plimpton/remap_3d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_3d	typeref:typename:int
joverlap_	src/bvals/bvals.hpp	/^  int joverlap_;                \/\/ # of cells the shear runs over one block$/;"	m	class:BoundaryValues	typeref:typename:int
js	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
js	src/mesh/mesh.hpp	/^  int is,ie,js,je,ks,ke;$/;"	m	class:MeshBlock	typeref:typename:int
jsize	src/fft/plimpton/remap_2d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_2d	typeref:typename:int
jsize	src/fft/plimpton/remap_3d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_3d	typeref:typename:int
jslice	src/outputs/outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters	typeref:typename:int
kNx	src/fft/athena_fft.hpp	/^  int kNx[3], knx[3], kdisp[3];$/;"	m	class:FFTBlock	typeref:typename:int[3]
k_adi	src/pgen/gr_bondi.cpp	/^static Real n_adi, k_adi;  \/\/ hydro parameters$/;"	v	typeref:typename:Real	file:
k_adi	src/pgen/gr_torus.cpp	/^static Real gamma_adi, k_adi;                      \/\/ hydro parameters$/;"	v	typeref:typename:Real	file:
k_par	src/pgen/cpaw.cpp	/^static Real lambda, k_par; \/\/ Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
k_par	src/pgen/linear_wave.cpp	/^static Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
kappa	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> kappa; \/\/ conduction array$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
kappa_aniso	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real kappa_iso, kappa_aniso; \/\/ thermal conduction coeff$/;"	m	class:HydroDiffusion	typeref:typename:Real
kappa_iso	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real kappa_iso, kappa_aniso; \/\/ thermal conduction coeff$/;"	m	class:HydroDiffusion	typeref:typename:Real
kappa_tot_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> nu_tot_,kappa_tot_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
kdisp	src/fft/athena_fft.hpp	/^  int kNx[3], knx[3], kdisp[3];$/;"	m	class:FFTBlock	typeref:typename:int[3][3][3]
ke	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
ke	src/mesh/mesh.hpp	/^  int is,ie,js,je,ks,ke;$/;"	m	class:MeshBlock	typeref:typename:int
khi	src/fft/plimpton/remap_3d.h	/^  int klo,khi,ksize;$/;"	m	struct:extent_3d	typeref:typename:int
klo	src/fft/plimpton/remap_3d.h	/^  int klo,khi,ksize;$/;"	m	struct:extent_3d	typeref:typename:int
knx	src/fft/athena_fft.hpp	/^  int kNx[3], knx[3], kdisp[3];$/;"	m	class:FFTBlock	typeref:typename:int[3][3]
ks	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
ks	src/mesh/mesh.hpp	/^  int is,ie,js,je,ks,ke;$/;"	m	class:MeshBlock	typeref:typename:int
ksize	src/fft/plimpton/remap_3d.h	/^  int klo,khi,ksize;$/;"	m	struct:extent_3d	typeref:typename:int
kslice	src/outputs/outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters	typeref:typename:int
kwave	src/pgen/jeans.cpp	/^static Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
l	src/pgen/gr_torus.cpp	/^static Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	v	typeref:typename:Real	file:
lNx1	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
lNx3	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
lambda	src/pgen/cpaw.cpp	/^static Real lambda, k_par; \/\/ Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
lambda	src/pgen/gr_linear_wave.cpp	/^Real lambda;                  \/\/ wavespeed$/;"	v	typeref:typename:Real
lambda	src/pgen/jeans.cpp	/^static Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
lambda	src/pgen/linear_wave.cpp	/^static Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
lambda11_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> lambda1_, lambda2_, lambda3_, lambda11_, lambda22_, lambda33_;$/;"	m	class:OBCGravityCar	typeref:typename:AthenaArray<Real>
lambda1_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> lambda1_, lambda2_, lambda3_, lambda11_, lambda22_, lambda33_;$/;"	m	class:OBCGravityCar	typeref:typename:AthenaArray<Real>
lambda22_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> aa_,bb_,cc_,xx_,rr_,lambda22_,lambda33_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
lambda22_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> lambda1_, lambda2_, lambda3_, lambda11_, lambda22_, lambda33_;$/;"	m	class:OBCGravityCar	typeref:typename:AthenaArray<Real>
lambda2_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> a_,b_,c_,x_,r_,lambda2_,lambda3_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
lambda2_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> lambda1_, lambda2_, lambda3_, lambda11_, lambda22_, lambda33_;$/;"	m	class:OBCGravityCar	typeref:typename:AthenaArray<Real>
lambda33_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> aa_,bb_,cc_,xx_,rr_,lambda22_,lambda33_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
lambda33_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> lambda1_, lambda2_, lambda3_, lambda11_, lambda22_, lambda33_;$/;"	m	class:OBCGravityCar	typeref:typename:AthenaArray<Real>
lambda3_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> a_,b_,c_,x_,r_,lambda2_,lambda3_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
lambda3_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> lambda1_, lambda2_, lambda3_, lambda11_, lambda22_, lambda33_;$/;"	m	class:OBCGravityCar	typeref:typename:AthenaArray<Real>
lambdas_m_l_	src/hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_m_l_;  \/\/ most negative wavespeeds in left state$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
lambdas_m_r_	src/hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_m_r_;  \/\/ most negative wavespeeds in right state$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
lambdas_p_l_	src/hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_p_l_;  \/\/ most positive wavespeeds in left state$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
lambdas_p_r_	src/hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_p_r_;  \/\/ most positive wavespeeds in right state$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
last_ave_	src/multigrid/multigrid.hpp	/^  Real last_ave_;$/;"	m	class:MultigridDriver	typeref:typename:Real
last_filename_	src/parameter_input.hpp	/^  std::string last_filename_;  \/\/ last input file opened, to prevent duplicate reads$/;"	m	class:ParameterInput	typeref:typename:std::string
lem	src/pgen/jeans.cpp	/^static Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	v	typeref:typename:Real[][][][][]	file:
lem	src/pgen/linear_wave.cpp	/^static Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	v	typeref:typename:Real[][][][][]	file:
len_	src/field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_,dx2_,dx3_,len_;$/;"	m	class:FieldDiffusion	typeref:typename:AthenaArray<Real>
length1	src/fft/plimpton/fft_2d.h	/^  int length1,length2;              \/* length of 1st and 2nd FFTs *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
length1	src/fft/plimpton/fft_3d.h	/^  int length1,length2,length3;      \/* length of 1st,2nd,3rd FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
length2	src/fft/plimpton/fft_2d.h	/^  int length1,length2;              \/* length of 1st and 2nd FFTs *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
length2	src/fft/plimpton/fft_3d.h	/^  int length1,length2,length3;      \/* length of 1st,2nd,3rd FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
length3	src/fft/plimpton/fft_3d.h	/^  int length1,length2,length3;      \/* length of 1st,2nd,3rd FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
level	src/athena.hpp	/^  int level;$/;"	m	struct:LogicalLocation	typeref:typename:int
level	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
lid	src/bvals/bvals.hpp	/^  int lid;     \/\/ local ID of neighbor$/;"	m	struct:PolarNeighborBlock	typeref:typename:int
lid	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
lid	src/mesh/mesh.hpp	/^  int gid, lid;$/;"	m	class:MeshBlock	typeref:typename:int
lid_	src/multigrid/multigrid.hpp	/^  int gid_, lid_;$/;"	m	class:Multigrid	typeref:typename:int
loc	src/bvals/bvals.hpp	/^  LogicalLocation loc;$/;"	m	class:BoundaryBase	typeref:typename:LogicalLocation
loc	src/mesh/mesh.hpp	/^  LogicalLocation loc;$/;"	m	class:MeshBlock	typeref:typename:LogicalLocation
loc	src/mesh/meshblock_tree.hpp	/^  LogicalLocation loc;$/;"	m	class:MeshBlockTree	typeref:typename:LogicalLocation
loc_	src/fft/athena_fft.hpp	/^  LogicalLocation loc_;$/;"	m	class:FFTBlock	typeref:typename:LogicalLocation
loc_	src/multigrid/multigrid.hpp	/^  LogicalLocation loc_;$/;"	m	class:Multigrid	typeref:typename:LogicalLocation
loclist	src/mesh/mesh.hpp	/^  LogicalLocation *loclist;$/;"	m	class:Mesh	typeref:typename:LogicalLocation *
log_h_edge	src/pgen/gr_torus.cpp	/^static Real log_h_edge, log_h_peak;                \/\/ calculated torus parameters$/;"	v	typeref:typename:Real	file:
log_h_peak	src/pgen/gr_torus.cpp	/^static Real log_h_edge, log_h_peak;                \/\/ calculated torus parameters$/;"	v	typeref:typename:Real	file:
lx1	src/athena.hpp	/^  int64_t lx1, lx2, lx3;$/;"	m	struct:LogicalLocation	typeref:typename:int64_t
lx2	src/athena.hpp	/^  int64_t lx1, lx2, lx3;$/;"	m	struct:LogicalLocation	typeref:typename:int64_t
lx3	src/athena.hpp	/^  int64_t lx1, lx2, lx3;$/;"	m	struct:LogicalLocation	typeref:typename:int64_t
m	src/pgen/gr_bondi.cpp	/^static Real m, a;          \/\/ black hole mass and spin$/;"	v	typeref:typename:Real	file:
m	src/pgen/gr_mhd_inflow.cpp	/^static Real m;                           \/\/ mass M of black hole$/;"	v	typeref:typename:Real	file:
m	src/pgen/gr_torus.cpp	/^static Real m, a;                                  \/\/ black hole parameters$/;"	v	typeref:typename:Real	file:
main	src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
mask	src/utils/utils.hpp	/^  static sigset_t mask;$/;"	v	namespace:SignalHandler	typeref:typename:sigset_t
max_len_parname	src/parameter_input.hpp	/^  std::size_t max_len_parname;  \/\/ length of longest param_name, for nice-looking output$/;"	m	class:InputBlock	typeref:typename:std::size_t
max_len_parvalue	src/parameter_input.hpp	/^  std::size_t max_len_parvalue; \/\/ length of longest param_value, to format outputs$/;"	m	class:InputBlock	typeref:typename:std::size_t
max_level	src/mesh/mesh.hpp	/^  int root_level, max_level, current_level;$/;"	m	class:Mesh	typeref:typename:int
max_name_length	src/outputs/outputs.hpp	/^  static const int max_name_length = 20;  \/\/ maximum length of names excluding \\0$/;"	m	class:ATHDF5Output	typeref:typename:const int
maxneighbor_	src/bvals/bvals.hpp	/^  static int maxneighbor_;$/;"	m	class:BoundaryBase	typeref:typename:int
maxneighbor_	src/bvals/bvals_base.cpp	/^int BoundaryBase::maxneighbor_ ;$/;"	m	class:BoundaryBase	typeref:typename:int
memory	src/fft/plimpton/remap_2d.h	/^  int memory;                       \/* user provides scratch space or not *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int
memory	src/fft/plimpton/remap_3d.h	/^  int memory;                       \/* user provides scratch space or not *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int
mesh_bcs	src/mesh/mesh.hpp	/^  enum BoundaryFlag mesh_bcs[6];$/;"	m	class:Mesh	typeref:enum:BoundaryFlag[6]
mesh_size	src/mesh/mesh.hpp	/^  RegionSize mesh_size;$/;"	m	class:Mesh	typeref:typename:RegionSize
metric_cell_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_i1_, metric_cell_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_cell_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_i1_, metric_cell_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_cell_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_j1_, metric_cell_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_cell_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_j1_, metric_cell_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_cell_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face1_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_i1_, metric_face1_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face1_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_i1_, metric_face1_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face1_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_j1_, metric_face1_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face1_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_j1_, metric_face1_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face1_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face2_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_i1_, metric_face2_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face2_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_i1_, metric_face2_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face2_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_j1_, metric_face2_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face2_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_j1_, metric_face2_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face2_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face3_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_i1_, metric_face3_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face3_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_i1_, metric_face3_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face3_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_j1_, metric_face3_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face3_j2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_j1_, metric_face3_j2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
metric_face3_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
mgcomm_	src/bvals/bvals_mg.hpp	/^  MPI_Comm mgcomm_;$/;"	m	class:MGBoundaryValues	typeref:typename:MPI_Comm
mgroot_	src/multigrid/multigrid.hpp	/^  Multigrid *mgroot_;$/;"	m	class:MultigridDriver	typeref:typename:Multigrid *
mgtlist_	src/multigrid/multigrid.hpp	/^  MultigridTaskList *mgtlist_;$/;"	m	class:MultigridDriver	typeref:typename:MultigridTaskList *
mid1_plan	src/fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *mid1_plan;      \/* remap from 1st -> 2nd FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:struct:remap_plan_3d *
mid1_target	src/fft/plimpton/fft_3d.h	/^  int mid1_target,mid2_target;$/;"	m	struct:fft_plan_3d	typeref:typename:int
mid2_plan	src/fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *mid2_plan;      \/* remap from 2nd -> 3rd FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:struct:remap_plan_3d *
mid2_target	src/fft/plimpton/fft_3d.h	/^  int mid1_target,mid2_target;$/;"	m	struct:fft_plan_3d	typeref:typename:int
mid_plan	src/fft/plimpton/fft_2d.h	/^  struct remap_plan_2d *mid_plan;       \/* remap from 1st -> 2nd FFTs *\/$/;"	m	struct:fft_plan_2d	typeref:struct:remap_plan_2d *
mid_target	src/fft/plimpton/fft_2d.h	/^  int pre_target,mid_target;        \/* where to put remap results *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
mode_	src/multigrid/multigrid.hpp	/^  int nranks_, nvar_, nrootlevel_, nmblevel_, ntotallevel_, mode_;$/;"	m	class:MultigridDriver	typeref:typename:int
mphi	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
msize_	src/fft/athena_fft.hpp	/^  RegionSize msize_, bsize_;$/;"	m	class:FFTBlock	typeref:typename:RegionSize
multilevel	src/mesh/mesh.hpp	/^  bool adaptive, multilevel;$/;"	m	class:Mesh	typeref:typename:bool
mx	src/hydro/rsolvers/mhd/hlld.cpp	/^  Real d,mx,my,mz,e,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
mx	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d,mx,my,mz,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
my	src/hydro/rsolvers/mhd/hlld.cpp	/^  Real d,mx,my,mz,e,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
my	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d,mx,my,mz,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
my_rank	src/globals.cpp	/^  int my_rank; \/\/ MPI rank of this process, set at start of main()$/;"	v	namespace:Globals	typeref:typename:int
mz	src/hydro/rsolvers/mhd/hlld.cpp	/^  Real d,mx,my,mz,e,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
mz	src/hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d,mx,my,mz,by,bz;$/;"	m	struct:Cons1D	typeref:typename:Real	file:
n_adi	src/pgen/gr_bondi.cpp	/^static Real n_adi, k_adi;  \/\/ hydro parameters$/;"	v	typeref:typename:Real	file:
name	src/outputs/outputs.hpp	/^  std::string name;$/;"	m	struct:OutputData	typeref:typename:std::string
nbdel	src/mesh/mesh.hpp	/^  int nbtotal, nbnew, nbdel;$/;"	m	class:Mesh	typeref:typename:int
nblevel	src/bvals/bvals.hpp	/^  int nblevel[3][3][3];$/;"	m	class:BoundaryBase	typeref:typename:int[3][3][3]
nblist	src/mesh/mesh.hpp	/^  int *nslist, *ranklist, *nblist;$/;"	m	class:Mesh	typeref:typename:int ***
nblist_	src/fft/athena_fft.hpp	/^  int *ranklist_, *nslist_, *nblist_;$/;"	m	class:FFTDriver	typeref:typename:int ***
nblist_	src/multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *ranklist_;$/;"	m	class:MultigridDriver	typeref:typename:int **
nblocks_	src/fft/athena_fft.hpp	/^  int nranks_, nblocks_;$/;"	m	class:FFTDriver	typeref:typename:int
nbmax	src/bvals/bvals.hpp	/^  int nbmax;$/;"	m	struct:BoundaryData	typeref:typename:int
nbmax	src/bvals/bvals_grav.hpp	/^  int nbmax;$/;"	m	struct:GravityBoundaryData	typeref:typename:int
nbmax	src/bvals/bvals_mg.hpp	/^  int nbmax;$/;"	m	struct:MGBoundaryData	typeref:typename:int
nbnew	src/mesh/mesh.hpp	/^  int nbtotal, nbnew, nbdel;$/;"	m	class:Mesh	typeref:typename:int
nbtotal	src/mesh/mesh.hpp	/^  int nbtotal, nbnew, nbdel;$/;"	m	class:Mesh	typeref:typename:int
ncycle	src/mesh/mesh.hpp	/^  int nlim, ncycle, ncycle_out;$/;"	m	class:Mesh	typeref:typename:int
ncycle_out	src/mesh/mesh.hpp	/^  int nlim, ncycle, ncycle_out;$/;"	m	class:Mesh	typeref:typename:int
nderef	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int **
nedge_	src/bvals/bvals.hpp	/^  int nface_, nedge_;$/;"	m	class:BoundaryValues	typeref:typename:int
nedge_fine_	src/bvals/bvals.hpp	/^  int nedge_fine_[12];$/;"	m	class:BoundaryValues	typeref:typename:int[12]
neighbor	src/bvals/bvals.hpp	/^  NeighborBlock neighbor[56];$/;"	m	class:BoundaryBase	typeref:typename:NeighborBlock[56]
neighbor_rflag_	src/mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement	typeref:typename:int
new_block_dt	src/mesh/mesh.hpp	/^  Real new_block_dt;$/;"	m	class:MeshBlock	typeref:typename:Real
next	src/mesh/mesh.hpp	/^  MeshBlock *prev, *next;$/;"	m	class:MeshBlock	typeref:typename:MeshBlock **
next	src/multigrid/multigrid.hpp	/^  Multigrid *next, *prev;$/;"	m	class:Multigrid	typeref:typename:Multigrid *
next_time	src/outputs/outputs.hpp	/^  Real next_time, dt;$/;"	m	struct:OutputParameters	typeref:typename:Real
nface_	src/bvals/bvals.hpp	/^  int nface_, nedge_;$/;"	m	class:BoundaryValues	typeref:typename:int
nfast	src/fft/plimpton/pack_2d.h	/^  int nfast;                 \/* # of elements in fast index *\/$/;"	m	struct:pack_plan_2d	typeref:typename:int
nfast	src/fft/plimpton/pack_3d.h	/^  int nfast;                 \/* # of elements in fast index *\/$/;"	m	struct:pack_plan_3d	typeref:typename:int
ng_	src/gravity/obcgravity.hpp	/^  int ng_, noffset1_, noffset2_, ngh_grf_, pfold_;$/;"	m	class:OBCGravityCyl	typeref:typename:int
ngh_	src/gravity/obcgravity.hpp	/^  int ngh_, ngh_grf_;$/;"	m	class:OBCGravityCar	typeref:typename:int
ngh_	src/multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid	typeref:typename:int
ngh_grf_	src/gravity/obcgravity.hpp	/^  int ng_, noffset1_, noffset2_, ngh_grf_, pfold_;$/;"	m	class:OBCGravityCyl	typeref:typename:int
ngh_grf_	src/gravity/obcgravity.hpp	/^  int ngh_, ngh_grf_;$/;"	m	class:OBCGravityCar	typeref:typename:int
nhigh	src/fft/turbulence.hpp	/^  int nlow,nhigh;$/;"	m	class:TurbulenceDriver	typeref:typename:int
ni	src/bvals/bvals.hpp	/^  static NeighborIndexes ni[56];$/;"	m	class:BoundaryBase	typeref:typename:NeighborIndexes[56]
ni	src/bvals/bvals_base.cpp	/^NeighborIndexes BoundaryBase::ni[56];$/;"	m	class:BoundaryBase	typeref:typename:NeighborIndexes[56]
nint_user_mesh_data_	src/mesh/mesh.hpp	/^  int nreal_user_mesh_data_, nint_user_mesh_data_;$/;"	m	class:Mesh	typeref:typename:int
nint_user_meshblock_data_	src/mesh/mesh.hpp	/^  int nreal_user_meshblock_data_, nint_user_meshblock_data_;$/;"	m	class:MeshBlock	typeref:typename:int
njeans	src/pgen/jeans.cpp	/^static Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	v	typeref:typename:Real	file:
nlevel_	src/multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid	typeref:typename:int
nlim	src/mesh/mesh.hpp	/^  int nlim, ncycle, ncycle_out;$/;"	m	class:Mesh	typeref:typename:int
nlow	src/fft/turbulence.hpp	/^  int nlow,nhigh;$/;"	m	class:TurbulenceDriver	typeref:typename:int
nmb	src/fft/athena_fft.hpp	/^  int npx1,npx2,npx3,nmb;$/;"	m	class:FFTDriver	typeref:typename:int
nmblevel_	src/multigrid/multigrid.hpp	/^  int nranks_, nvar_, nrootlevel_, nmblevel_, ntotallevel_, mode_;$/;"	m	class:MultigridDriver	typeref:typename:int
nmid	src/fft/plimpton/pack_3d.h	/^  int nmid;                  \/* # of elements in mid index *\/$/;"	m	struct:pack_plan_3d	typeref:typename:int
nneighbor	src/bvals/bvals.hpp	/^  int nneighbor;$/;"	m	class:BoundaryBase	typeref:typename:int
noffset1_	src/gravity/obcgravity.hpp	/^  int ng_, noffset1_, noffset2_, ngh_grf_, pfold_;$/;"	m	class:OBCGravityCyl	typeref:typename:int
noffset2_	src/gravity/obcgravity.hpp	/^  int ng_, noffset1_, noffset2_, ngh_grf_, pfold_;$/;"	m	class:OBCGravityCyl	typeref:typename:int
norm	src/fft/plimpton/fft_2d.h	/^  double norm;                      \/* normalization factor for rescaling *\/$/;"	m	struct:fft_plan_2d	typeref:typename:double
norm	src/fft/plimpton/fft_3d.h	/^  double norm;                      \/* normalization factor for rescaling *\/$/;"	m	struct:fft_plan_3d	typeref:typename:double
norm_factor_	src/fft/athena_fft.hpp	/^  Real norm_factor_;$/;"	m	class:FFTBlock	typeref:typename:Real
normal	src/pgen/gr_torus.cpp	/^enum b_configs {vertical, normal, renorm};$/;"	e	enum:b_configs	file:
normal_bb_	src/eos/eos.hpp	/^  AthenaArray<Real> normal_bb_;          \/\/ normal-frame fields, used in GR MHD$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
normal_dd_	src/eos/eos.hpp	/^  AthenaArray<Real> normal_dd_;          \/\/ normal-frame densities, used in GR MHD$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
normal_ee_	src/eos/eos.hpp	/^  AthenaArray<Real> normal_ee_;          \/\/ normal-frame energies, used in GR MHD$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
normal_mm_	src/eos/eos.hpp	/^  AthenaArray<Real> normal_mm_;          \/\/ normal-frame momenta, used in GR MHD$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
normal_tt_	src/eos/eos.hpp	/^  AthenaArray<Real> normal_tt_;          \/\/ normal-frame M.B, used in GR MHD$/;"	m	class:EquationOfState	typeref:typename:AthenaArray<Real>
normnum	src/fft/plimpton/fft_2d.h	/^  int normnum;                      \/* # of values to rescale *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
normnum	src/fft/plimpton/fft_3d.h	/^  int normnum;                      \/* # of values to rescale *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
north	src/bvals/bvals.hpp	/^  bool north;  \/\/ flag that is true for North pole and false for South pole$/;"	m	struct:PolarNeighborBlock	typeref:typename:bool
np	src/fft/athena_fft.hpp	/^  int np[3], ip[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3]
np1	src/gravity/obcgravity.hpp	/^  int np1,np2,np3;$/;"	m	class:OBCGravityCar	typeref:typename:int
np1	src/gravity/obcgravity.hpp	/^  int np1,np2,np3;$/;"	m	class:OBCGravityCyl	typeref:typename:int
np2	src/gravity/obcgravity.hpp	/^  int np1,np2,np3;$/;"	m	class:OBCGravityCar	typeref:typename:int
np2	src/gravity/obcgravity.hpp	/^  int np1,np2,np3;$/;"	m	class:OBCGravityCyl	typeref:typename:int
np3	src/gravity/obcgravity.hpp	/^  int np1,np2,np3;$/;"	m	class:OBCGravityCar	typeref:typename:int
np3	src/gravity/obcgravity.hpp	/^  int np1,np2,np3;$/;"	m	class:OBCGravityCyl	typeref:typename:int
npermute_	src/fft/athena_fft.hpp	/^  int npermute_, swap_;$/;"	m	class:AthenaFFTIndex	typeref:typename:int
npx1	src/fft/athena_fft.hpp	/^  int npx1,npx2,npx3,nmb;$/;"	m	class:FFTDriver	typeref:typename:int
npx2	src/fft/athena_fft.hpp	/^  int npx1,npx2,npx3,nmb;$/;"	m	class:FFTDriver	typeref:typename:int
npx3	src/fft/athena_fft.hpp	/^  int npx1,npx2,npx3,nmb;$/;"	m	class:FFTDriver	typeref:typename:int
nqty	src/fft/plimpton/pack_2d.h	/^  int nqty;                  \/* # of values\/element *\/$/;"	m	struct:pack_plan_2d	typeref:typename:int
nqty	src/fft/plimpton/pack_3d.h	/^  int nqty;                  \/* # of values\/element *\/$/;"	m	struct:pack_plan_3d	typeref:typename:int
nranks	src/globals.cpp	/^  int nranks;  \/\/ total number of MPI ranks, set at start of main()$/;"	v	namespace:Globals	typeref:typename:int
nranks_	src/fft/athena_fft.hpp	/^  int nranks_, nblocks_;$/;"	m	class:FFTDriver	typeref:typename:int
nranks_	src/multigrid/multigrid.hpp	/^  int nranks_, nvar_, nrootlevel_, nmblevel_, ntotallevel_, mode_;$/;"	m	class:MultigridDriver	typeref:typename:int
nrbx1	src/mesh/mesh.hpp	/^  int64_t nrbx1, nrbx2, nrbx3;$/;"	m	class:Mesh	typeref:typename:int64_t
nrbx2	src/mesh/mesh.hpp	/^  int64_t nrbx1, nrbx2, nrbx3;$/;"	m	class:Mesh	typeref:typename:int64_t
nrbx3	src/mesh/mesh.hpp	/^  int64_t nrbx1, nrbx2, nrbx3;$/;"	m	class:Mesh	typeref:typename:int64_t
nreal_user_mesh_data_	src/mesh/mesh.hpp	/^  int nreal_user_mesh_data_, nint_user_mesh_data_;$/;"	m	class:Mesh	typeref:typename:int
nreal_user_meshblock_data_	src/mesh/mesh.hpp	/^  int nreal_user_meshblock_data_, nint_user_meshblock_data_;$/;"	m	class:MeshBlock	typeref:typename:int
nrecv	src/fft/plimpton/remap_2d.h	/^  int nrecv;                        \/* # of recvs from other procs *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int
nrecv	src/fft/plimpton/remap_3d.h	/^  int nrecv;                        \/* # of recvs from other procs *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int
nref	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int *
nrootlevel_	src/multigrid/multigrid.hpp	/^  int nranks_, nvar_, nrootlevel_, nmblevel_, ntotallevel_, mode_;$/;"	m	class:MultigridDriver	typeref:typename:int
nsend	src/fft/plimpton/remap_2d.h	/^  int nsend;                        \/* # of sends to other procs *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int
nsend	src/fft/plimpton/remap_3d.h	/^  int nsend;                        \/* # of sends to other procs *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int
nsignal	src/utils/utils.hpp	/^  const int nsignal = 3;$/;"	v	namespace:SignalHandler	typeref:typename:const int
nslist	src/mesh/mesh.hpp	/^  int *nslist, *ranklist, *nblist;$/;"	m	class:Mesh	typeref:typename:int *
nslist_	src/fft/athena_fft.hpp	/^  int *ranklist_, *nslist_, *nblist_;$/;"	m	class:FFTDriver	typeref:typename:int **
nslist_	src/multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *ranklist_;$/;"	m	class:MultigridDriver	typeref:typename:int *
nslow	src/fft/plimpton/pack_2d.h	/^  int nslow;                 \/* # of elements in slow index *\/$/;"	m	struct:pack_plan_2d	typeref:typename:int
nslow	src/fft/plimpton/pack_3d.h	/^  int nslow;                 \/* # of elements in slow index *\/$/;"	m	struct:pack_plan_3d	typeref:typename:int
nstages	src/task_list/task_list.hpp	/^  int nstages;    \/\/ number of times task list should be repeated per full time step$/;"	m	class:TaskList	typeref:typename:int
nstride	src/fft/plimpton/pack_2d.h	/^  int nstride;               \/* stride between succesive slow indices *\/$/;"	m	struct:pack_plan_2d	typeref:typename:int
nstride_line	src/fft/plimpton/pack_3d.h	/^  int nstride_line;          \/* stride between successive mid indices *\/$/;"	m	struct:pack_plan_3d	typeref:typename:int
nstride_plane	src/fft/plimpton/pack_3d.h	/^  int nstride_plane;         \/* stride between successive slow indices *\/$/;"	m	struct:pack_plan_3d	typeref:typename:int
ntasks	src/task_list/mg_task_list.hpp	/^  int ntasks;     \/\/ number of tasks in this list$/;"	m	class:MultigridTaskList	typeref:typename:int
ntasks	src/task_list/task_list.hpp	/^  int ntasks;     \/\/ number of tasks in this list$/;"	m	class:TaskList	typeref:typename:int
ntotallevel_	src/multigrid/multigrid.hpp	/^  int nranks_, nvar_, nrootlevel_, nmblevel_, ntotallevel_, mode_;$/;"	m	class:MultigridDriver	typeref:typename:int
nu	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> nu; \/\/ viscosity array$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
nu_aniso	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real nu_iso, nu_aniso; \/\/ viscosity coeff$/;"	m	class:HydroDiffusion	typeref:typename:Real
nu_iso	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real nu_iso, nu_aniso; \/\/ viscosity coeff$/;"	m	class:HydroDiffusion	typeref:typename:Real
nu_tot_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> nu_tot_,kappa_tot_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
nuiso	src/pgen/visc.cpp	/^static Real nuiso,gm0;$/;"	v	typeref:typename:Real	file:
num_blocks_global	src/outputs/outputs.hpp	/^  int num_blocks_global;                      \/\/ number of MeshBlocks in simulation$/;"	m	class:ATHDF5Output	typeref:typename:int
num_datasets	src/outputs/outputs.hpp	/^  int num_datasets;                           \/\/ count of datasets to output$/;"	m	class:ATHDF5Output	typeref:typename:int
num_lines	src/pgen/gr_mhd_inflow.cpp	/^static int num_lines;                    \/\/ number of lines in table$/;"	v	typeref:typename:int	file:
num_mesh_threads_	src/mesh/mesh.hpp	/^  int num_mesh_threads_;$/;"	m	class:Mesh	typeref:typename:int
num_north_polar_blocks_	src/bvals/bvals.hpp	/^  int num_north_polar_blocks_, num_south_polar_blocks_;$/;"	m	class:BoundaryValues	typeref:typename:int
num_south_polar_blocks_	src/bvals/bvals.hpp	/^  int num_north_polar_blocks_, num_south_polar_blocks_;$/;"	m	class:BoundaryValues	typeref:typename:int
num_tasks_left	src/task_list/task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	class:TaskState	typeref:typename:int
num_variables	src/outputs/outputs.hpp	/^  int *num_variables;                         \/\/ list of counts of variables per dataset$/;"	m	class:ATHDF5Output	typeref:typename:int *
num_vars_	src/outputs/outputs.hpp	/^  int num_vars_;             \/\/ number of variables in output$/;"	m	class:OutputType	typeref:typename:int
nuser_history_output_	src/mesh/mesh.hpp	/^  int nuser_history_output_;$/;"	m	class:Mesh	typeref:typename:int
nuser_out_var	src/mesh/mesh.hpp	/^  int nuser_out_var;$/;"	m	class:MeshBlock	typeref:typename:int
nvar_	src/multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid	typeref:typename:int
nvar_	src/multigrid/multigrid.hpp	/^  int nranks_, nvar_, nrootlevel_, nmblevel_, ntotallevel_, mode_;$/;"	m	class:MultigridDriver	typeref:typename:int
nvlist_	src/multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *ranklist_;$/;"	m	class:MultigridDriver	typeref:typename:int ***
nvslist_	src/multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *ranklist_;$/;"	m	class:MultigridDriver	typeref:typename:int ****
nwx	src/pgen/hb3.cpp	/^static Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	v	typeref:typename:Real	file:
nwx	src/pgen/ssheet.cpp	/^static Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	v	typeref:typename:Real	file:
nwy	src/pgen/hb3.cpp	/^static Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	v	typeref:typename:Real	file:
nwy	src/pgen/ssheet.cpp	/^static Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	v	typeref:typename:Real	file:
nx	src/fft/athena_fft.hpp	/^  int Nx[3], nx[3], disp[3];$/;"	m	class:FFTBlock	typeref:typename:int[3][3]
nx	src/fft/athena_fft.hpp	/^  int nx[3], is[3], ie[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3]
nx1	src/athena.hpp	/^  int nx1, nx2, nx3;        \/\/ number of active cells (not including ghost zones)$/;"	m	struct:RegionSize	typeref:typename:int
nx1	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
nx1	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3;$/;"	m	class:OBCGravityCar	typeref:typename:int
nx1	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
nx1	src/outputs/outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output	typeref:typename:int
nx1_	src/athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_;$/;"	m	class:AthenaArray	typeref:typename:int
nx2	src/athena.hpp	/^  int nx1, nx2, nx3;        \/\/ number of active cells (not including ghost zones)$/;"	m	struct:RegionSize	typeref:typename:int
nx2	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
nx2	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3;$/;"	m	class:OBCGravityCar	typeref:typename:int
nx2	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
nx2	src/outputs/outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output	typeref:typename:int
nx2_	src/athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_;$/;"	m	class:AthenaArray	typeref:typename:int
nx3	src/athena.hpp	/^  int nx1, nx2, nx3;        \/\/ number of active cells (not including ghost zones)$/;"	m	struct:RegionSize	typeref:typename:int
nx3	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3,lNx1,lNx3,hNx2,hnx2;$/;"	m	class:OBCGravityCyl	typeref:typename:int
nx3	src/gravity/obcgravity.hpp	/^  int Nx1,Nx2,Nx3,nx1,nx2,nx3;$/;"	m	class:OBCGravityCar	typeref:typename:int
nx3	src/gravity/obcgravity.hpp	/^  int is,ie,js,je,ks,ke,nx1,nx2,nx3,block_size;$/;"	m	struct:DomainDecomp	typeref:typename:int
nx3	src/outputs/outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output	typeref:typename:int
nx3_	src/athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_;$/;"	m	class:AthenaArray	typeref:typename:int
nx4_	src/athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_;$/;"	m	class:AthenaArray	typeref:typename:int
nx5_	src/athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_;$/;"	m	class:AthenaArray	typeref:typename:int
ogidlist	src/bvals/bvals.hpp	/^  int *ogidlist, *olidlist, *ornklist, *olevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int *
olevlist	src/bvals/bvals.hpp	/^  int *ogidlist, *olidlist, *ornklist, *olevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int ****
olidlist	src/bvals/bvals.hpp	/^  int *ogidlist, *olidlist, *ornklist, *olevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int **
omega	src/pgen/jeans.cpp	/^static Real cs2,gam,gm1,omega,omega2, gconst;$/;"	v	typeref:typename:Real	file:
omega2	src/pgen/jeans.cpp	/^static Real cs2,gam,gm1,omega,omega2, gconst;$/;"	v	typeref:typename:Real	file:
omega_	src/gravity/mggravity.hpp	/^  const Real omega_;$/;"	m	class:MGGravity	typeref:typename:const Real
omg	src/pgen/torus.cpp	/^static Real omg, omg0;$/;"	v	typeref:typename:Real	file:
omg0	src/pgen/torus.cpp	/^static Real omg, omg0;$/;"	v	typeref:typename:Real	file:
operator () 	src/athena_arrays.hpp	/^  T &operator() (const int m, const int n, const int k, const int j, const int i) {$/;"	f	class:AthenaArray	typeref:typename:T &
operator () 	src/athena_arrays.hpp	/^  T &operator() (const int n) {$/;"	f	class:AthenaArray	typeref:typename:T &
operator () 	src/athena_arrays.hpp	/^  T &operator() (const int n, const int i) {$/;"	f	class:AthenaArray	typeref:typename:T &
operator () 	src/athena_arrays.hpp	/^  T &operator() (const int n, const int j, const int i) {$/;"	f	class:AthenaArray	typeref:typename:T &
operator () 	src/athena_arrays.hpp	/^  T &operator() (const int n, const int k, const int j, const int i) {$/;"	f	class:AthenaArray	typeref:typename:T &
operator () 	src/athena_arrays.hpp	/^  T operator() (const int m, const int n, const int k, const int j, const int i) const {$/;"	f	class:AthenaArray	typeref:typename:T
operator () 	src/athena_arrays.hpp	/^  T operator() (const int n) const {$/;"	f	class:AthenaArray	typeref:typename:T
operator () 	src/athena_arrays.hpp	/^  T operator() (const int n, const int i) const {$/;"	f	class:AthenaArray	typeref:typename:T
operator () 	src/athena_arrays.hpp	/^  T operator() (const int n, const int j, const int i) const {$/;"	f	class:AthenaArray	typeref:typename:T
operator () 	src/athena_arrays.hpp	/^  T operator() (const int n, const int k, const int j, const int i) const {$/;"	f	class:AthenaArray	typeref:typename:T
operator =	src/athena_arrays.hpp	/^AthenaArray<T> &AthenaArray<T>::operator= (const AthenaArray<T> &src) {$/;"	f	class:AthenaArray	typeref:typename:AthenaArray<T> &
operator ==	src/athena.hpp	/^  bool operator==(LogicalLocation &ll)$/;"	f	struct:LogicalLocation	typeref:typename:bool
orig_idx_	src/fft/athena_fft.hpp	/^  AthenaFFTIndex *orig_idx_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTIndex *
ornklist	src/bvals/bvals.hpp	/^  int *ogidlist, *olidlist, *ornklist, *olevlist;$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:int ***
out2_	src/gravity/obcgravity.hpp	/^  fftw_complex *in_, *in2_, *out_, *out2_, *buf_;$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex ****
out_	src/fft/athena_fft.hpp	/^  AthenaFFTComplex *in_, *out_;$/;"	m	class:FFTBlock	typeref:typename:AthenaFFTComplex **
out_	src/gravity/obcgravity.hpp	/^  Real *in_, *out_, *buf_, *in2_;$/;"	m	class:OBCGravityCar	typeref:typename:Real **
out_	src/gravity/obcgravity.hpp	/^  fftw_complex *in_, *in2_, *out_, *out2_, *buf_;$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex ***
out_ie	src/outputs/outputs.hpp	/^  int out_is,out_ie,out_js,out_je,out_ks,out_ke;  \/\/ OutputData array start\/end indices$/;"	m	class:OutputType	typeref:typename:int
out_is	src/outputs/outputs.hpp	/^  int out_is,out_ie,out_js,out_je,out_ks,out_ke;  \/\/ OutputData array start\/end indices$/;"	m	class:OutputType	typeref:typename:int
out_je	src/outputs/outputs.hpp	/^  int out_is,out_ie,out_js,out_je,out_ks,out_ke;  \/\/ OutputData array start\/end indices$/;"	m	class:OutputType	typeref:typename:int
out_js	src/outputs/outputs.hpp	/^  int out_is,out_ie,out_js,out_je,out_ks,out_ke;  \/\/ OutputData array start\/end indices$/;"	m	class:OutputType	typeref:typename:int
out_ke	src/outputs/outputs.hpp	/^  int out_is,out_ie,out_js,out_je,out_ks,out_ke;  \/\/ OutputData array start\/end indices$/;"	m	class:OutputType	typeref:typename:int
out_ks	src/outputs/outputs.hpp	/^  int out_is,out_ie,out_js,out_je,out_ks,out_ke;  \/\/ OutputData array start\/end indices$/;"	m	class:OutputType	typeref:typename:int
outer	src/bvals/bvals.hpp	/^  bool inner, outer; \/\/ inner=true if inner blocks$/;"	m	struct:ShearingBoundaryBlock	typeref:typename:bool
output_params	src/outputs/outputs.hpp	/^  OutputParameters output_params; \/\/ control data read from <output> block$/;"	m	class:OutputType	typeref:typename:OutputParameters
output_slicex1	src/outputs/outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters	typeref:typename:bool
output_slicex2	src/outputs/outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters	typeref:typename:bool
output_slicex3	src/outputs/outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters	typeref:typename:bool
output_sumx1	src/outputs/outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters	typeref:typename:bool
output_sumx2	src/outputs/outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters	typeref:typename:bool
output_sumx3	src/outputs/outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters	typeref:typename:bool
ox1	src/bvals/bvals.hpp	/^  int ox1, ox2, ox3, fi1, fi2;$/;"	m	struct:NeighborIndexes	typeref:typename:int
ox1	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
ox2	src/bvals/bvals.hpp	/^  int ox1, ox2, ox3, fi1, fi2;$/;"	m	struct:NeighborIndexes	typeref:typename:int
ox2	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
ox3	src/bvals/bvals.hpp	/^  int ox1, ox2, ox3, fi1, fi2;$/;"	m	struct:NeighborIndexes	typeref:typename:int
ox3	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
p0	src/pgen/jeans.cpp	/^static Real d0,p0,v0,u0,w0,va,b0;$/;"	v	typeref:typename:Real	file:
p0	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
p0_over_r0	src/pgen/disk.cpp	/^static Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	v	typeref:typename:Real	file:
p_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
p_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
pack	src/fft/plimpton/remap_2d.h	/^  void (*pack)(double *, double *, struct pack_plan_2d *);                   \/* which pack func/;"	m	struct:remap_plan_2d	typeref:typename:void (*)(double *,double *,struct pack_plan_2d *)
pack	src/fft/plimpton/remap_3d.h	/^  void (*pack)(double *, double *, struct pack_plan_3d *);                   \/* which pack func/;"	m	struct:remap_plan_3d	typeref:typename:void (*)(double *,double *,struct pack_plan_3d *)
pack_2d	src/fft/plimpton/pack_2d.cpp	/^void pack_2d(double *data, double *buf, struct pack_plan_2d *plan)$/;"	f	typeref:typename:void
pack_3d	src/fft/plimpton/pack_3d.cpp	/^void pack_3d(double *data, double *buf, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
pack_plan_2d	src/fft/plimpton/pack_2d.h	/^struct pack_plan_2d {$/;"	s
pack_plan_3d	src/fft/plimpton/pack_3d.h	/^struct pack_plan_3d {$/;"	s
packplan	src/fft/plimpton/remap_2d.h	/^  struct pack_plan_2d *packplan;    \/* pack plan for each send message *\/$/;"	m	struct:remap_plan_2d	typeref:struct:pack_plan_2d *
packplan	src/fft/plimpton/remap_3d.h	/^  struct pack_plan_3d *packplan;    \/* pack plan for each send message *\/$/;"	m	struct:remap_plan_3d	typeref:struct:pack_plan_3d *
param_comment	src/parameter_input.hpp	/^  std::string param_comment;$/;"	m	struct:InputLine	typeref:typename:std::string
param_name	src/parameter_input.hpp	/^  std::string param_name;$/;"	m	struct:InputLine	typeref:typename:std::string
param_value	src/parameter_input.hpp	/^  std::string param_value;    \/\/ value of the parameter is stored as a string!$/;"	m	struct:InputLine	typeref:typename:std::string
pblock	src/mesh/mesh.hpp	/^  MeshBlock *pblock;$/;"	m	class:Mesh	typeref:typename:MeshBlock *
pbval	src/mesh/mesh.hpp	/^  BoundaryValues *pbval;$/;"	m	class:MeshBlock	typeref:typename:BoundaryValues *
pco_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Coordinates *pco_;  \/\/ ptr to coordinates class$/;"	m	class:HydroDiffusion	typeref:typename:Coordinates *
pcoarsec	src/mesh/mesh_refinement.hpp	/^  Coordinates *pcoarsec;$/;"	m	class:MeshRefinement	typeref:typename:Coordinates *
pcoeff	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
pcoord	src/mesh/mesh.hpp	/^  Coordinates *pcoord;$/;"	m	class:MeshBlock	typeref:typename:Coordinates *
pdata_	src/athena_arrays.hpp	/^  T *pdata_;$/;"	m	class:AthenaArray	typeref:typename:T *
pdim_	src/fft/athena_fft.hpp	/^  int decomp_,pdim_;$/;"	m	class:FFTBlock	typeref:typename:int
pdim_	src/fft/athena_fft.hpp	/^  int decomp_,pdim_;$/;"	m	class:FFTDriver	typeref:typename:int
peos	src/mesh/mesh.hpp	/^  EquationOfState *peos;$/;"	m	class:MeshBlock	typeref:typename:EquationOfState *
permute0_	src/fft/athena_fft.hpp	/^  int permute0_, permute1_, permute2_;$/;"	m	class:FFTBlock	typeref:typename:int
permute1_	src/fft/athena_fft.hpp	/^  int permute0_, permute1_, permute2_;$/;"	m	class:FFTBlock	typeref:typename:int
permute2_	src/fft/athena_fft.hpp	/^  int permute0_, permute1_, permute2_;$/;"	m	class:FFTBlock	typeref:typename:int
pert_amp	src/pgen/gr_torus.cpp	/^static Real pert_amp, pert_kr, pert_kz;            \/\/ parameters for initial perturbations$/;"	v	typeref:typename:Real	file:
pert_kr	src/pgen/gr_torus.cpp	/^static Real pert_amp, pert_kr, pert_kz;            \/\/ parameters for initial perturbations$/;"	v	typeref:typename:Real	file:
pert_kz	src/pgen/gr_torus.cpp	/^static Real pert_amp, pert_kr, pert_kz;            \/\/ parameters for initial perturbations$/;"	v	typeref:typename:Real	file:
perturb	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
pfdif	src/field/field.hpp	/^  FieldDiffusion *pfdif;$/;"	m	class:Field	typeref:typename:FieldDiffusion *
pfgrd	src/mesh/mesh.hpp	/^  FFTGravityDriver *pfgrd;$/;"	m	class:Mesh	typeref:typename:FFTGravityDriver *
pfield	src/mesh/mesh.hpp	/^  Field *pfield;$/;"	m	class:MeshBlock	typeref:typename:Field *
pfirst_block	src/parameter_input.hpp	/^  InputBlock* pfirst_block;   \/\/ pointer to first input block in linked list$/;"	m	class:ParameterInput	typeref:typename:InputBlock *
pfirst_data_	src/outputs/outputs.hpp	/^  OutputData *pfirst_data_;  \/\/ ptr to first OutputData in linked list$/;"	m	class:OutputType	typeref:typename:OutputData *
pfirst_type_	src/outputs/outputs.hpp	/^  OutputType *pfirst_type_; \/\/ ptr to first OutputType in linked list$/;"	m	class:Outputs	typeref:typename:OutputType *
pfloor	src/pgen/strat.cpp	/^static Real dfloor,pfloor;$/;"	v	typeref:typename:Real	file:
pflux	src/field/field_diffusion/field_diffusion.hpp	/^  FaceField pflux;        \/\/ face-centered energy (Poynting) flux$/;"	m	class:FieldDiffusion	typeref:typename:FaceField
pfold_	src/gravity/obcgravity.hpp	/^  int ng_, noffset1_, noffset2_, ngh_grf_, pfold_;$/;"	m	class:OBCGravityCyl	typeref:typename:int
pgas	src/pgen/gr_linear_wave.cpp	/^Real rho, pgas;               \/\/ thermodynamic quantities$/;"	v	typeref:typename:Real
pgas_min	src/pgen/gr_torus.cpp	/^static Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	v	typeref:typename:Real	file:
pgas_min_	src/eos/eos.hpp	/^  Real pgas_min_, pgas_pow_;             \/\/ variables to control power-law pressure floor$/;"	m	class:EquationOfState	typeref:typename:Real
pgas_over_rho_peak	src/pgen/gr_torus.cpp	/^static Real pgas_over_rho_peak, rho_peak;          \/\/ more calculated torus parameters$/;"	v	typeref:typename:Real	file:
pgas_pow	src/pgen/gr_torus.cpp	/^static Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	v	typeref:typename:Real	file:
pgas_pow_	src/eos/eos.hpp	/^  Real pgas_min_, pgas_pow_;             \/\/ variables to control power-law pressure floor$/;"	m	class:EquationOfState	typeref:typename:Real
pgbval	src/mesh/mesh.hpp	/^  GravityBoundaryValues *pgbval;$/;"	m	class:MeshBlock	typeref:typename:GravityBoundaryValues *
pgrav	src/mesh/mesh.hpp	/^  Gravity *pgrav;$/;"	m	class:MeshBlock	typeref:typename:Gravity *
phdif	src/hydro/hydro.hpp	/^  HydroDiffusion *phdif;$/;"	m	class:Hydro	typeref:typename:HydroDiffusion *
phi	src/gravity/gravity.hpp	/^  AthenaArray<Real> phi;  \/\/ gravitational potential$/;"	m	class:Gravity	typeref:typename:AthenaArray<Real>
phi	src/pgen/cylgrav_test.cpp	/^  double phi;$/;"	m	struct:Fparams	typeref:typename:double	file:
phi_max	src/pgen/gr_torus.cpp	/^static Real phi_min, phi_max;                      \/\/ limits in phi for 3D samples$/;"	v	typeref:typename:Real	file:
phi_min	src/pgen/gr_torus.cpp	/^static Real phi_min, phi_max;                      \/\/ limits in phi for 3D samples$/;"	v	typeref:typename:Real	file:
phy_src1_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> phy_src1_i_, phy_src2_i_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
phy_src2_i_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> phy_src1_i_, phy_src2_i_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
phydro	src/mesh/mesh.hpp	/^  Hydro *phydro;$/;"	m	class:MeshBlock	typeref:typename:Hydro *
pl	src/pgen/shk_cloud.cpp	/^static Real gmma1,dl,pl,ul;$/;"	v	typeref:typename:Real	file:
plan	src/fft/athena_fft.hpp	/^  fftw_plan plan;$/;"	m	struct:AthenaFFTPlan	typeref:typename:fftw_plan
plan	src/fft/athena_fft.hpp	/^  void *plan;$/;"	m	struct:AthenaFFTPlan	typeref:typename:void *
plan2d	src/fft/athena_fft.hpp	/^  struct fft_plan_2d *plan2d;$/;"	m	struct:AthenaFFTPlan	typeref:struct:fft_plan_2d *
plan3d	src/fft/athena_fft.hpp	/^  struct fft_plan_3d *plan3d;$/;"	m	struct:AthenaFFTPlan	typeref:struct:fft_plan_3d *
plan_fast_backward	src/fft/plimpton/fft_2d.h	/^  fftw_plan plan_fast_backward;$/;"	m	struct:fft_plan_2d	typeref:typename:fftw_plan
plan_fast_backward	src/fft/plimpton/fft_3d.h	/^  fftw_plan plan_fast_backward;$/;"	m	struct:fft_plan_3d	typeref:typename:fftw_plan
plan_fast_forward	src/fft/plimpton/fft_2d.h	/^  fftw_plan plan_fast_forward;$/;"	m	struct:fft_plan_2d	typeref:typename:fftw_plan
plan_fast_forward	src/fft/plimpton/fft_3d.h	/^  fftw_plan plan_fast_forward;$/;"	m	struct:fft_plan_3d	typeref:typename:fftw_plan
plan_mid_backward	src/fft/plimpton/fft_3d.h	/^  fftw_plan plan_mid_backward;$/;"	m	struct:fft_plan_3d	typeref:typename:fftw_plan
plan_mid_forward	src/fft/plimpton/fft_3d.h	/^  fftw_plan plan_mid_forward;$/;"	m	struct:fft_plan_3d	typeref:typename:fftw_plan
plan_slow_backward	src/fft/plimpton/fft_2d.h	/^  fftw_plan plan_slow_backward;$/;"	m	struct:fft_plan_2d	typeref:typename:fftw_plan
plan_slow_backward	src/fft/plimpton/fft_3d.h	/^  fftw_plan plan_slow_backward;$/;"	m	struct:fft_plan_3d	typeref:typename:fftw_plan
plan_slow_forward	src/fft/plimpton/fft_2d.h	/^  fftw_plan plan_slow_forward;$/;"	m	struct:fft_plan_2d	typeref:typename:fftw_plan
plan_slow_forward	src/fft/plimpton/fft_3d.h	/^  fftw_plan plan_slow_forward;$/;"	m	struct:fft_plan_3d	typeref:typename:fftw_plan
plast_data_	src/outputs/outputs.hpp	/^  OutputData *plast_data_;   \/\/ ptr to last OutputData in linked list$/;"	m	class:OutputType	typeref:typename:OutputData *
pleaf	src/mesh/meshblock_tree.hpp	/^  MeshBlockTree* pleaf[2][2][2];$/;"	m	class:MeshBlockTree	typeref:typename:MeshBlockTree * [2][2][2]
pline	src/parameter_input.hpp	/^  InputLine *pline;             \/\/ pointer to first InputLine in this block$/;"	m	class:InputBlock	typeref:typename:InputLine *
ploc	src/fft/athena_fft.hpp	/^  int iloc[3],ploc[3];$/;"	m	class:AthenaFFTIndex	typeref:typename:int[3][3]
pmb_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  MeshBlock *pmb_;    \/\/ ptr to meshblock containing this HydroDiffusion$/;"	m	class:HydroDiffusion	typeref:typename:MeshBlock *
pmg_	src/multigrid/multigrid.hpp	/^  Multigrid *pmg_;$/;"	m	class:MultigridDriver	typeref:typename:Multigrid *
pmgbval	src/multigrid/multigrid.hpp	/^  MGBoundaryValues *pmgbval;$/;"	m	class:Multigrid	typeref:typename:MGBoundaryValues *
pmgrd	src/mesh/mesh.hpp	/^  MGGravityDriver *pmgrd;$/;"	m	class:Mesh	typeref:typename:MGGravityDriver *
pmr	src/mesh/mesh.hpp	/^  MeshRefinement *pmr;$/;"	m	class:MeshBlock	typeref:typename:MeshRefinement *
pmy_block	src/coordinates/coordinates.hpp	/^  MeshBlock *pmy_block;  \/\/ ptr to MeshBlock containing this Coordinates$/;"	m	class:Coordinates	typeref:typename:MeshBlock *
pmy_block	src/field/field.hpp	/^  MeshBlock* pmy_block;  \/\/ ptr to MeshBlock containing this Field$/;"	m	class:Field	typeref:typename:MeshBlock *
pmy_block	src/field/field_diffusion/field_diffusion.hpp	/^  MeshBlock* pmy_block;$/;"	m	class:FieldDiffusion	typeref:typename:MeshBlock *
pmy_block	src/gravity/gravity.hpp	/^  MeshBlock* pmy_block;  \/\/ ptr to MeshBlock containing this Field$/;"	m	class:Gravity	typeref:typename:MeshBlock *
pmy_block	src/hydro/hydro.hpp	/^  MeshBlock* pmy_block;    \/\/ ptr to MeshBlock containing this Hydro$/;"	m	class:Hydro	typeref:typename:MeshBlock *
pmy_block_	src/bvals/bvals.hpp	/^  MeshBlock *pmy_block_;  \/\/ ptr to MeshBlock containing this BVals$/;"	m	class:BoundaryValues	typeref:typename:MeshBlock *
pmy_block_	src/bvals/bvals_grav.hpp	/^  MeshBlock *pmy_block_;$/;"	m	class:GravityBoundaryValues	typeref:typename:MeshBlock *
pmy_block_	src/eos/eos.hpp	/^  MeshBlock *pmy_block_;                 \/\/ ptr to MeshBlock containing this EOS$/;"	m	class:EquationOfState	typeref:typename:MeshBlock *
pmy_block_	src/mesh/mesh_refinement.hpp	/^  MeshBlock *pmy_block_;$/;"	m	class:MeshRefinement	typeref:typename:MeshBlock *
pmy_block_	src/reconstruct/reconstruction.hpp	/^  MeshBlock* pmy_block_;  \/\/ ptr to MeshBlock containing this Reconstruction$/;"	m	class:Reconstruction	typeref:typename:MeshBlock *
pmy_driver_	src/fft/athena_fft.hpp	/^  FFTDriver *pmy_driver_;$/;"	m	class:FFTBlock	typeref:typename:FFTDriver *
pmy_driver_	src/gravity/obcgravity.hpp	/^  OBCGravityDriver *pmy_driver_;$/;"	m	class:OBCGravityCar	typeref:typename:OBCGravityDriver *
pmy_driver_	src/gravity/obcgravity.hpp	/^  OBCGravityDriver *pmy_driver_;$/;"	m	class:OBCGravityCyl	typeref:typename:OBCGravityDriver *
pmy_driver_	src/multigrid/multigrid.hpp	/^  MultigridDriver *pmy_driver_;$/;"	m	class:Multigrid	typeref:typename:MultigridDriver *
pmy_fb	src/fft/athena_fft.hpp	/^  FFTBlock *pmy_fb;$/;"	m	class:FFTDriver	typeref:typename:FFTBlock *
pmy_hydro_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Hydro *pmy_hydro_;  \/\/ ptr to Hydro containing this HydroDiffusion$/;"	m	class:HydroDiffusion	typeref:typename:Hydro *
pmy_hydro_	src/hydro/srcterms/hydro_srcterms.hpp	/^  Hydro *pmy_hydro_;  \/\/ ptr to Hydro containing this HydroSourceTerms$/;"	m	class:HydroSourceTerms	typeref:typename:Hydro *
pmy_mesh	src/mesh/mesh.hpp	/^  Mesh *pmy_mesh;  \/\/ ptr to Mesh containing this MeshBlock$/;"	m	class:MeshBlock	typeref:typename:Mesh *
pmy_mesh_	src/bvals/bvals.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:BoundaryBase	typeref:typename:Mesh *
pmy_mesh_	src/fft/athena_fft.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:FFTDriver	typeref:typename:Mesh *
pmy_mesh_	src/gravity/obcgravity.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:OBCGravityDriver	typeref:typename:Mesh *
pmy_mesh_	src/multigrid/multigrid.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:MultigridDriver	typeref:typename:Mesh *
pmy_mesh_	src/task_list/task_list.hpp	/^  Mesh* pmy_mesh_;$/;"	m	class:TaskList	typeref:typename:Mesh *
pmy_mg_	src/bvals/bvals_mg.hpp	/^  Multigrid *pmy_mg_;$/;"	m	class:MGBoundaryValues	typeref:typename:Multigrid *
pmy_mgdriver_	src/task_list/mg_task_list.hpp	/^  MultigridDriver* pmy_mgdriver_;$/;"	m	class:MultigridTaskList	typeref:typename:MultigridDriver *
pmy_og_car	src/gravity/obcgravity.hpp	/^  OBCGravityCar *pmy_og_car;$/;"	m	class:OBCGravityDriver	typeref:typename:OBCGravityCar *
pmy_og_cyl	src/gravity/obcgravity.hpp	/^  OBCGravityCyl *pmy_og_cyl;$/;"	m	class:OBCGravityDriver	typeref:typename:OBCGravityCyl *
pnext	src/outputs/outputs.hpp	/^  struct OutputData *pnext, *pprev; \/\/ ptrs to next and previous nodes in list$/;"	m	struct:OutputData	typeref:struct:OutputData *
pnext	src/parameter_input.hpp	/^  InputBlock *pnext;            \/\/ pointer to the next node$/;"	m	class:InputBlock	typeref:typename:InputBlock *
pnext	src/parameter_input.hpp	/^  struct InputLine *pnext;    \/\/ pointer to the next node$/;"	m	struct:InputLine	typeref:struct:InputLine *
pnext_type	src/outputs/outputs.hpp	/^  OutputType *pnext_type;         \/\/ ptr to next node in linked list of OutputTypes$/;"	m	class:OutputType	typeref:typename:OutputType *
pogrd	src/mesh/mesh.hpp	/^  OBCGravityDriver *pogrd;$/;"	m	class:Mesh	typeref:typename:OBCGravityDriver *
polar	src/bvals/bvals.hpp	/^  bool polar; \/\/ flag indicating boundary is across a pole$/;"	m	struct:NeighborBlock	typeref:typename:bool
polar_neighbor_north	src/bvals/bvals.hpp	/^  PolarNeighborBlock *polar_neighbor_north, *polar_neighbor_south;$/;"	m	class:BoundaryBase	typeref:typename:PolarNeighborBlock *
polar_neighbor_south	src/bvals/bvals.hpp	/^  PolarNeighborBlock *polar_neighbor_north, *polar_neighbor_south;$/;"	m	class:BoundaryBase	typeref:typename:PolarNeighborBlock **
post_plan	src/fft/plimpton/fft_2d.h	/^  struct remap_plan_2d *post_plan;      \/* remap from 2nd FFTs -> output *\/$/;"	m	struct:fft_plan_2d	typeref:struct:remap_plan_2d *
post_plan	src/fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *post_plan;      \/* remap from 3rd FFTs -> output *\/$/;"	m	struct:fft_plan_3d	typeref:struct:remap_plan_3d *
potential_cutoff	src/pgen/gr_torus.cpp	/^static Real potential_cutoff;                      \/\/ sets region of torus to magnetize$/;"	v	typeref:typename:Real	file:
potential_r_pow	src/pgen/gr_torus.cpp	/^static Real potential_r_pow, potential_rho_pow;    \/\/ set how vector potential scales$/;"	v	typeref:typename:Real	file:
potential_rho_pow	src/pgen/gr_torus.cpp	/^static Real potential_r_pow, potential_rho_pow;    \/\/ set how vector potential scales$/;"	v	typeref:typename:Real	file:
pparent	src/mesh/meshblock_tree.hpp	/^  MeshBlockTree* pparent;$/;"	m	class:MeshBlockTree	typeref:typename:MeshBlockTree *
pprev	src/outputs/outputs.hpp	/^  struct OutputData *pnext, *pprev; \/\/ ptrs to next and previous nodes in list$/;"	m	struct:OutputData	typeref:struct:OutputData **
pre_plan	src/fft/plimpton/fft_2d.h	/^  struct remap_plan_2d *pre_plan;       \/* remap from input -> 1st FFTs *\/$/;"	m	struct:fft_plan_2d	typeref:struct:remap_plan_2d *
pre_plan	src/fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *pre_plan;       \/* remap from input -> 1st FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:struct:remap_plan_3d *
pre_target	src/fft/plimpton/fft_2d.h	/^  int pre_target,mid_target;        \/* where to put remap results *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
pre_target	src/fft/plimpton/fft_3d.h	/^  int pre_target;                   \/* where to put remap results *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
precon	src/mesh/mesh.hpp	/^  Reconstruction *precon;$/;"	m	class:MeshBlock	typeref:typename:Reconstruction *
pres	src/pgen/cpaw.cpp	/^static Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	v	typeref:typename:Real	file:
pres	src/pgen/hb3.cpp	/^static Real beta,B0,pres;$/;"	v	typeref:typename:Real	file:
pressure_floor_	src/eos/eos.hpp	/^  Real density_floor_, pressure_floor_;  \/\/ density and pressure floors$/;"	m	class:EquationOfState	typeref:typename:Real
prev	src/mesh/mesh.hpp	/^  MeshBlock *prev, *next;$/;"	m	class:MeshBlock	typeref:typename:MeshBlock *
prev	src/multigrid/multigrid.hpp	/^  Multigrid *next, *prev;$/;"	m	class:Multigrid	typeref:typename:Multigrid **
psi	src/gravity/obcgravity.hpp	/^  Real *psi[4], *psi2[4], *sigma[4];$/;"	m	class:OBCGravityCyl	typeref:typename:Real * [4]
psi	src/pgen/gr_torus.cpp	/^static Real psi, sin_psi, cos_psi;                 \/\/ tilt parameters$/;"	v	typeref:typename:Real	file:
psi2	src/gravity/obcgravity.hpp	/^  Real *psi[4], *psi2[4], *sigma[4];$/;"	m	class:OBCGravityCyl	typeref:typename:Real * [4]* [4]
psi_fft	src/gravity/obcgravity.hpp	/^  fftw_complex *sigma_fft[4], *psi_fft[4], *sigma_fft_v[4], *sigma_fft_r[4];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex * [4]* [4]
pslope	src/pgen/disk.cpp	/^static Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	v	typeref:typename:Real	file:
psrc	src/hydro/hydro.hpp	/^  HydroSourceTerms *psrc;$/;"	m	class:Hydro	typeref:typename:HydroSourceTerms *
ptrbd	src/mesh/mesh.hpp	/^  TurbulenceDriver *ptrbd;$/;"	m	class:Mesh	typeref:typename:TurbulenceDriver *
qshear	src/pgen/hb3.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
qshear	src/pgen/hgb.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
qshear	src/pgen/ssheet.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
qshear	src/pgen/strat.cpp	/^static Real Omega_0,qshear;$/;"	v	typeref:typename:Real	file:
qshear_	src/bvals/bvals.hpp	/^  Real Omega_0_, qshear_;       \/\/ orbital freq and shear rate$/;"	m	class:BoundaryValues	typeref:typename:Real
qshear_	src/hydro/srcterms/hydro_srcterms.hpp	/^  Real Omega_0_, qshear_; \/\/ Orbital freq and shear rate$/;"	m	class:HydroSourceTerms	typeref:typename:Real
r0	src/pgen/disk.cpp	/^static Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	v	typeref:typename:Real	file:
r_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> a_,b_,c_,x_,r_,lambda2_,lambda3_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
r_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
r_crit	src/pgen/gr_bondi.cpp	/^static Real r_crit;        \/\/ sonic point radius$/;"	v	typeref:typename:Real	file:
r_edge	src/pgen/gr_torus.cpp	/^static Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	v	typeref:typename:Real	file:
r_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
r_max	src/pgen/gr_torus.cpp	/^static Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	v	typeref:typename:Real	file:
r_min	src/pgen/gr_torus.cpp	/^static Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	v	typeref:typename:Real	file:
r_peak	src/pgen/gr_torus.cpp	/^static Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	v	typeref:typename:Real	file:
ran2	src/utils/ran2.cpp	/^double ran2(int64_t *idum) {$/;"	f	typeref:typename:double
rank	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
rank	src/bvals/bvals.hpp	/^  int rank;    \/\/ MPI rank of neighbor$/;"	m	struct:PolarNeighborBlock	typeref:typename:int
ranklist	src/mesh/mesh.hpp	/^  int *nslist, *ranklist, *nblist;$/;"	m	class:Mesh	typeref:typename:int **
ranklist_	src/fft/athena_fft.hpp	/^  int *ranklist_, *nslist_, *nblist_;$/;"	m	class:FFTDriver	typeref:typename:int *
ranklist_	src/multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *ranklist_;$/;"	m	class:MultigridDriver	typeref:typename:int *****
rat	src/gravity/obcgravity.hpp	/^  Real rat, dx2_, dx3_;$/;"	m	class:OBCGravityCyl	typeref:typename:Real
rdisp	src/mesh/mesh.hpp	/^  int *nref, *nderef, *bnref, *bnderef, *rdisp, *brdisp, *ddisp, *bddisp;$/;"	m	class:Mesh	typeref:typename:int *****
rdx_	src/multigrid/multigrid.hpp	/^  Real rdx_, rdy_, rdz_;$/;"	m	class:Multigrid	typeref:typename:Real
rdy_	src/multigrid/multigrid.hpp	/^  Real rdx_, rdy_, rdz_;$/;"	m	class:Multigrid	typeref:typename:Real
rdz_	src/multigrid/multigrid.hpp	/^  Real rdx_, rdy_, rdz_;$/;"	m	class:Multigrid	typeref:typename:Real
reading_	src/parameter_input.hpp	/^  int reading_;$/;"	m	class:ParameterInput	typeref:typename:int
recv	src/bvals/bvals.hpp	/^  Real *send[56], *recv[56];$/;"	m	struct:BoundaryData	typeref:typename:Real * [56]* [56]
recv	src/bvals/bvals_grav.hpp	/^  Real *send[56], *recv[56];$/;"	m	struct:GravityBoundaryData	typeref:typename:Real * [56]* [56]
recv	src/bvals/bvals_mg.hpp	/^  Real *send[56], *recv[56];$/;"	m	struct:MGBoundaryData	typeref:typename:Real * [56]* [56]
recv_bufloc	src/fft/plimpton/remap_2d.h	/^  int *recv_bufloc;                 \/* offset in scratch buf for each recv *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int *
recv_bufloc	src/fft/plimpton/remap_3d.h	/^  int *recv_bufloc;                 \/* offset in scratch buf for each recv *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int *
recv_inner_gid_	src/bvals/bvals.hpp	/^  int  send_inner_gid_[4], recv_inner_gid_[4]; \/\/ gid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_inner_lid_	src/bvals/bvals.hpp	/^  int  send_inner_lid_[4], recv_inner_lid_[4]; \/\/ lid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_inner_rank_	src/bvals/bvals.hpp	/^  int send_inner_rank_[4],recv_inner_rank_[4]; \/\/ rank of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_innerbuf_emf_	src/bvals/bvals.hpp	/^  Real *send_innerbuf_emf_[4], *recv_innerbuf_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]* [4]
recv_innerbuf_field_	src/bvals/bvals.hpp	/^  Real *send_innerbuf_field_[4], *recv_innerbuf_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]* [4]
recv_innerbuf_hydro_	src/bvals/bvals.hpp	/^  Real *send_innerbuf_hydro_[4], *recv_innerbuf_hydro_[4]; \/\/ send and recv buffers$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]* [4]
recv_innersize_emf_	src/bvals/bvals.hpp	/^  int  send_innersize_emf_[4], recv_innersize_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_innersize_field_	src/bvals/bvals.hpp	/^  int  send_innersize_field_[4], recv_innersize_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_innersize_hydro_	src/bvals/bvals.hpp	/^  int  send_innersize_hydro_[4], recv_innersize_hydro_[4]; \/\/ buffer sizes$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_offset	src/fft/plimpton/remap_2d.h	/^  int *recv_offset;                 \/* insertion loc for each recv *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int *
recv_offset	src/fft/plimpton/remap_3d.h	/^  int *recv_offset;                 \/* insertion loc for each recv *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int *
recv_outer_gid_	src/bvals/bvals.hpp	/^  int  send_outer_gid_[4], recv_outer_gid_[4]; \/\/ gid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_outer_lid_	src/bvals/bvals.hpp	/^  int  send_outer_lid_[4], recv_outer_lid_[4]; \/\/ lid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_outer_rank_	src/bvals/bvals.hpp	/^  int send_outer_rank_[4],recv_outer_rank_[4]; \/\/ rank of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_outerbuf_emf_	src/bvals/bvals.hpp	/^  Real *send_outerbuf_emf_[4], *recv_outerbuf_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]* [4]
recv_outerbuf_field_	src/bvals/bvals.hpp	/^  Real *send_outerbuf_field_[4], *recv_outerbuf_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]* [4]
recv_outerbuf_hydro_	src/bvals/bvals.hpp	/^  Real *send_outerbuf_hydro_[4], *recv_outerbuf_hydro_[4]; \/\/ send and recv buffers$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]* [4]
recv_outersize_emf_	src/bvals/bvals.hpp	/^  int  send_outersize_emf_[4], recv_outersize_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_outersize_field_	src/bvals/bvals.hpp	/^  int  send_outersize_field_[4], recv_outersize_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_outersize_hydro_	src/bvals/bvals.hpp	/^  int  send_outersize_hydro_[4], recv_outersize_hydro_[4]; \/\/ buffer sizes$/;"	m	class:BoundaryValues	typeref:typename:int[4][4]
recv_proc	src/fft/plimpton/remap_2d.h	/^  int *recv_proc;                   \/* proc to recv each message from *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int *
recv_proc	src/fft/plimpton/remap_3d.h	/^  int *recv_proc;                   \/* proc to recv each message from *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int *
recv_size	src/fft/plimpton/remap_2d.h	/^  int *recv_size;                   \/* size of each recv message *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int *
recv_size	src/fft/plimpton/remap_3d.h	/^  int *recv_size;                   \/* size of each recv message *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int *
refine_flag_	src/mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement	typeref:typename:int
rem	src/pgen/jeans.cpp	/^static Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	v	typeref:typename:Real[][][]	file:
rem	src/pgen/linear_wave.cpp	/^static Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	v	typeref:typename:Real[][][]	file:
remap_2d	src/fft/plimpton/remap_2d.cpp	/^void remap_2d(double *in, double *out, double *buf,$/;"	f	typeref:typename:void
remap_2d_	src/fft/plimpton/remap_2d.h	/^#define remap_2d_ /;"	d
remap_2d_collide	src/fft/plimpton/remap_2d.cpp	/^int remap_2d_collide(struct extent_2d *block1, struct extent_2d *block2,$/;"	f	typeref:typename:int
remap_2d_create_plan	src/fft/plimpton/remap_2d.cpp	/^struct remap_plan_2d *remap_2d_create_plan($/;"	f	typeref:struct:remap_plan_2d *
remap_2d_create_plan_	src/fft/plimpton/remap_2d.h	/^#define remap_2d_create_plan_ /;"	d
remap_2d_destroy_plan	src/fft/plimpton/remap_2d.cpp	/^void remap_2d_destroy_plan(struct remap_plan_2d *plan)$/;"	f	typeref:typename:void
remap_2d_destroy_plan_	src/fft/plimpton/remap_2d.h	/^#define remap_2d_destroy_plan_ /;"	d
remap_3d	src/fft/plimpton/remap_3d.cpp	/^void remap_3d(double *in, double *out, double *buf,$/;"	f	typeref:typename:void
remap_3d_	src/fft/plimpton/remap_3d.h	/^#define remap_3d_ /;"	d
remap_3d_collide	src/fft/plimpton/remap_3d.cpp	/^int remap_3d_collide(struct extent_3d *block1, struct extent_3d *block2,$/;"	f	typeref:typename:int
remap_3d_create_plan	src/fft/plimpton/remap_3d.cpp	/^struct remap_plan_3d *remap_3d_create_plan($/;"	f	typeref:struct:remap_plan_3d *
remap_3d_create_plan_	src/fft/plimpton/remap_3d.h	/^#define remap_3d_create_plan_ /;"	d
remap_3d_destroy_plan	src/fft/plimpton/remap_3d.cpp	/^void remap_3d_destroy_plan(struct remap_plan_3d *plan)$/;"	f	typeref:typename:void
remap_3d_destroy_plan_	src/fft/plimpton/remap_3d.h	/^#define remap_3d_destroy_plan_ /;"	d
remap_plan_2d	src/fft/plimpton/remap_2d.h	/^struct remap_plan_2d {$/;"	s
remap_plan_3d	src/fft/plimpton/remap_3d.h	/^struct remap_plan_3d {$/;"	s
renorm	src/pgen/gr_torus.cpp	/^enum b_configs {vertical, normal, renorm};$/;"	e	enum:b_configs	file:
req_emf_north_recv_	src/bvals/bvals.hpp	/^  MPI_Request *req_emf_north_send_, *req_emf_north_recv_;$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request **
req_emf_north_send_	src/bvals/bvals.hpp	/^  MPI_Request *req_emf_north_send_, *req_emf_north_recv_;$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request *
req_emf_south_recv_	src/bvals/bvals.hpp	/^  MPI_Request *req_emf_south_send_, *req_emf_south_recv_;$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request **
req_emf_south_send_	src/bvals/bvals.hpp	/^  MPI_Request *req_emf_south_send_, *req_emf_south_recv_;$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request *
req_recv	src/bvals/bvals.hpp	/^  MPI_Request req_send[56], req_recv[56];$/;"	m	struct:BoundaryData	typeref:typename:MPI_Request[56][56]
req_recv	src/bvals/bvals_grav.hpp	/^  MPI_Request req_send[56], req_recv[56];$/;"	m	struct:GravityBoundaryData	typeref:typename:MPI_Request[56][56]
req_recv	src/bvals/bvals_mg.hpp	/^  MPI_Request req_send[56], req_recv[56];$/;"	m	struct:MGBoundaryData	typeref:typename:MPI_Request[56][56]
req_send	src/bvals/bvals.hpp	/^  MPI_Request req_send[56], req_recv[56];$/;"	m	struct:BoundaryData	typeref:typename:MPI_Request[56]
req_send	src/bvals/bvals_grav.hpp	/^  MPI_Request req_send[56], req_recv[56];$/;"	m	struct:GravityBoundaryData	typeref:typename:MPI_Request[56]
req_send	src/bvals/bvals_mg.hpp	/^  MPI_Request req_send[56], req_recv[56];$/;"	m	struct:MGBoundaryData	typeref:typename:MPI_Request[56]
request	src/fft/plimpton/remap_2d.h	/^  MPI_Request *request;             \/* MPI request for each posted recv *\/$/;"	m	struct:remap_plan_2d	typeref:typename:MPI_Request *
request	src/fft/plimpton/remap_3d.h	/^  MPI_Request *request;             \/* MPI request for each posted recv *\/$/;"	m	struct:remap_plan_3d	typeref:typename:MPI_Request *
rho	src/pgen/gr_linear_wave.cpp	/^Real rho, pgas;               \/\/ thermodynamic quantities$/;"	v	typeref:typename:Real
rho0	src/pgen/disk.cpp	/^static Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	v	typeref:typename:Real	file:
rho0	src/pgen/field_loop_poles.cpp	/^static Real vy0, rho0, isocs2, gamma_gas;$/;"	v	typeref:typename:Real	file:
rho0	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
rho0_	src/pgen/cylgrav_test.cpp	/^  double four_pi_G_, rho0_;$/;"	m	class:Hure	typeref:typename:double	file:
rho_max	src/pgen/gr_torus.cpp	/^static Real r_edge, r_peak, l, rho_max;            \/\/ fixed torus parameters$/;"	v	typeref:typename:Real	file:
rho_min	src/pgen/gr_torus.cpp	/^static Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	v	typeref:typename:Real	file:
rho_min_	src/eos/eos.hpp	/^  Real rho_min_, rho_pow_;               \/\/ variables to control power-law denity floor$/;"	m	class:EquationOfState	typeref:typename:Real
rho_peak	src/pgen/gr_torus.cpp	/^static Real pgas_over_rho_peak, rho_peak;          \/\/ more calculated torus parameters$/;"	v	typeref:typename:Real	file:
rho_pow	src/pgen/gr_torus.cpp	/^static Real rho_min, rho_pow, pgas_min, pgas_pow;  \/\/ background parameters$/;"	v	typeref:typename:Real	file:
rho_pow_	src/eos/eos.hpp	/^  Real rho_min_, rho_pow_;               \/\/ variables to control power-law denity floor$/;"	m	class:EquationOfState	typeref:typename:Real
rlock_	src/parameter_input.hpp	/^  omp_lock_t rlock_, wlock_;$/;"	m	class:ParameterInput	typeref:typename:omp_lock_t
rmbrg	src/pgen/cylgrav_test.cpp	/^  gsl_integration_romberg_workspace *rmbrg;$/;"	m	class:Hure	typeref:typename:gsl_integration_romberg_workspace *	file:
root_flag_	src/multigrid/multigrid.hpp	/^  bool root_flag_;$/;"	m	class:Multigrid	typeref:typename:bool
root_level	src/mesh/mesh.hpp	/^  int root_level, max_level, current_level;$/;"	m	class:Mesh	typeref:typename:int
rootbuf_	src/multigrid/multigrid.hpp	/^  Real *rootbuf_;$/;"	m	class:MultigridDriver	typeref:typename:Real *
rootsrc_	src/multigrid/multigrid.hpp	/^  AthenaArray<Real> rootsrc_;$/;"	m	class:MultigridDriver	typeref:typename:AthenaArray<Real>
rq_innerrecv_emf_	src/bvals/bvals.hpp	/^  MPI_Request rq_innersend_emf_[4],  rq_innerrecv_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4][4]
rq_innerrecv_field_	src/bvals/bvals.hpp	/^  MPI_Request rq_innersend_field_[4], rq_innerrecv_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4][4]
rq_innerrecv_hydro_	src/bvals/bvals.hpp	/^  MPI_Request rq_innersend_hydro_[4], rq_innerrecv_hydro_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4][4]
rq_innersend_emf_	src/bvals/bvals.hpp	/^  MPI_Request rq_innersend_emf_[4],  rq_innerrecv_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4]
rq_innersend_field_	src/bvals/bvals.hpp	/^  MPI_Request rq_innersend_field_[4], rq_innerrecv_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4]
rq_innersend_hydro_	src/bvals/bvals.hpp	/^  MPI_Request rq_innersend_hydro_[4], rq_innerrecv_hydro_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4]
rq_outerrecv_emf_	src/bvals/bvals.hpp	/^  MPI_Request rq_outersend_emf_[4],  rq_outerrecv_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4][4]
rq_outerrecv_field_	src/bvals/bvals.hpp	/^  MPI_Request rq_outersend_field_[4], rq_outerrecv_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4][4]
rq_outerrecv_hydro_	src/bvals/bvals.hpp	/^  MPI_Request rq_outersend_hydro_[4], rq_outerrecv_hydro_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4][4]
rq_outersend_emf_	src/bvals/bvals.hpp	/^  MPI_Request rq_outersend_emf_[4],  rq_outerrecv_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4]
rq_outersend_field_	src/bvals/bvals.hpp	/^  MPI_Request rq_outersend_field_[4], rq_outerrecv_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4]
rq_outersend_hydro_	src/bvals/bvals.hpp	/^  MPI_Request rq_outersend_hydro_[4], rq_outerrecv_hydro_[4];$/;"	m	class:BoundaryValues	typeref:typename:MPI_Request[4]
rr_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> aa_,bb_,cc_,xx_,rr_,lambda22_,lambda33_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
rseed	src/fft/turbulence.hpp	/^  int64_t rseed;$/;"	m	class:TurbulenceDriver	typeref:typename:int64_t
rseed	src/pgen/turb.cpp	/^int64_t rseed; \/\/ seed for turbulence power spectrum$/;"	v	typeref:typename:int64_t
ruser_mesh_data	src/mesh/mesh.hpp	/^  AthenaArray<Real> *ruser_mesh_data;$/;"	m	class:Mesh	typeref:typename:AthenaArray<Real> *
ruser_meshblock_data	src/mesh/mesh.hpp	/^  AthenaArray<Real> *ruser_meshblock_data;$/;"	m	class:MeshBlock	typeref:typename:AthenaArray<Real> *
rwmode	src/outputs/io_wrapper.hpp	/^enum rwmode {IO_WRAPPER_READ_MODE, IO_WRAPPER_WRITE_MODE};$/;"	g
sample_cutoff	src/pgen/gr_torus.cpp	/^static Real sample_cutoff;                         \/\/ density cutoff for sample grid$/;"	v	typeref:typename:Real	file:
sample_n_phi	src/pgen/gr_torus.cpp	/^static int sample_n_phi;                           \/\/ number of cells in 3D sample grid$/;"	v	typeref:typename:int	file:
sample_n_r	src/pgen/gr_torus.cpp	/^static int sample_n_r, sample_n_theta;             \/\/ number of cells in 2D sample grid$/;"	v	typeref:typename:int	file:
sample_n_theta	src/pgen/gr_torus.cpp	/^static int sample_n_r, sample_n_theta;             \/\/ number of cells in 2D sample grid$/;"	v	typeref:typename:int	file:
sample_r_rat	src/pgen/gr_torus.cpp	/^static Real sample_r_rat;                          \/\/ sample grid geometric spacing ratio$/;"	v	typeref:typename:Real	file:
sarea_	src/bvals/bvals.hpp	/^  AthenaArray<Real> sarea_[2];$/;"	m	class:BoundaryBase	typeref:typename:AthenaArray<Real>[2]
sarea_x1_	src/mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement	typeref:typename:AthenaArray<Real>[2][2][2][2]
sarea_x2_	src/mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement	typeref:typename:AthenaArray<Real>[2][2][2][2][2][3]
sarea_x3_	src/mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement	typeref:typename:AthenaArray<Real>[2][2][2][2][2][3][3][2]
scaled	src/fft/plimpton/fft_2d.h	/^  int scaled;                       \/* whether to scale FFT results *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
scaled	src/fft/plimpton/fft_3d.h	/^  int scaled;                       \/* whether to scale FFT results *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
scopy_	src/athena_arrays.hpp	/^  bool scopy_;  \/\/ true if shallow copy (prevents source from being deleted)$/;"	m	class:AthenaArray	typeref:typename:bool
scr01_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_,scr02_i_,scr03_i_,scr04_i_,scr05_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr02_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_,scr02_i_,scr03_i_,scr04_i_,scr05_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr03_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_,scr02_i_,scr03_i_,scr04_i_,scr05_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr04_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_,scr02_i_,scr03_i_,scr04_i_,scr05_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr05_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_,scr02_i_,scr03_i_,scr04_i_,scr05_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr06_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_,scr07_i_,scr08_i_,scr09_i_,scr10_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr07_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_,scr07_i_,scr08_i_,scr09_i_,scr10_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr08_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_,scr07_i_,scr08_i_,scr09_i_,scr10_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr09_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_,scr07_i_,scr08_i_,scr09_i_,scr10_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr10_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_,scr07_i_,scr08_i_,scr09_i_,scr10_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr11_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_,scr12_i_,scr13_i_,scr14_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr12_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_,scr12_i_,scr13_i_,scr14_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr13_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_,scr12_i_,scr13_i_,scr14_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr14_i_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_,scr12_i_,scr13_i_,scr14_i_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr1_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr2_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr3_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr4_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr5_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr6_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_, scr7_ni_, scr8_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr7_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_, scr7_ni_, scr8_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scr8_ni_	src/reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_, scr7_ni_, scr8_ni_;$/;"	m	class:Reconstruction	typeref:typename:AthenaArray<Real>
scratch	src/fft/plimpton/fft_2d.h	/^  FFT_DATA *scratch;                \/* scratch space for remaps *\/$/;"	m	struct:fft_plan_2d	typeref:typename:FFT_DATA *
scratch	src/fft/plimpton/fft_3d.h	/^  FFT_DATA *scratch;                \/* scratch space for remaps *\/$/;"	m	struct:fft_plan_3d	typeref:typename:FFT_DATA *
scratch	src/fft/plimpton/remap_2d.h	/^  double *scratch;                  \/* scratch buffer for MPI recvs *\/$/;"	m	struct:remap_plan_2d	typeref:typename:double *
scratch	src/fft/plimpton/remap_3d.h	/^  double *scratch;                  \/* scratch buffer for MPI recvs *\/$/;"	m	struct:remap_plan_3d	typeref:typename:double *
self	src/fft/plimpton/remap_2d.h	/^  int self;                         \/* whether I send\/recv with myself *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int
self	src/fft/plimpton/remap_3d.h	/^  int self;                         \/* whether I send\/recv with myself *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int
send	src/bvals/bvals.hpp	/^  Real *send[56], *recv[56];$/;"	m	struct:BoundaryData	typeref:typename:Real * [56]
send	src/bvals/bvals_grav.hpp	/^  Real *send[56], *recv[56];$/;"	m	struct:GravityBoundaryData	typeref:typename:Real * [56]
send	src/bvals/bvals_mg.hpp	/^  Real *send[56], *recv[56];$/;"	m	struct:MGBoundaryData	typeref:typename:Real * [56]
send_inner_gid_	src/bvals/bvals.hpp	/^  int  send_inner_gid_[4], recv_inner_gid_[4]; \/\/ gid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_inner_lid_	src/bvals/bvals.hpp	/^  int  send_inner_lid_[4], recv_inner_lid_[4]; \/\/ lid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_inner_rank_	src/bvals/bvals.hpp	/^  int send_inner_rank_[4],recv_inner_rank_[4]; \/\/ rank of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_innerbuf_emf_	src/bvals/bvals.hpp	/^  Real *send_innerbuf_emf_[4], *recv_innerbuf_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]
send_innerbuf_field_	src/bvals/bvals.hpp	/^  Real *send_innerbuf_field_[4], *recv_innerbuf_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]
send_innerbuf_hydro_	src/bvals/bvals.hpp	/^  Real *send_innerbuf_hydro_[4], *recv_innerbuf_hydro_[4]; \/\/ send and recv buffers$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]
send_innersize_emf_	src/bvals/bvals.hpp	/^  int  send_innersize_emf_[4], recv_innersize_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_innersize_field_	src/bvals/bvals.hpp	/^  int  send_innersize_field_[4], recv_innersize_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_innersize_hydro_	src/bvals/bvals.hpp	/^  int  send_innersize_hydro_[4], recv_innersize_hydro_[4]; \/\/ buffer sizes$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_offset	src/fft/plimpton/remap_2d.h	/^  int *send_offset;                 \/* extraction loc for each send *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int *
send_offset	src/fft/plimpton/remap_3d.h	/^  int *send_offset;                 \/* extraction loc for each send *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int *
send_outer_gid_	src/bvals/bvals.hpp	/^  int  send_outer_gid_[4], recv_outer_gid_[4]; \/\/ gid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_outer_lid_	src/bvals/bvals.hpp	/^  int  send_outer_lid_[4], recv_outer_lid_[4]; \/\/ lid of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_outer_rank_	src/bvals/bvals.hpp	/^  int send_outer_rank_[4],recv_outer_rank_[4]; \/\/ rank of meshblocks for communication$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_outerbuf_emf_	src/bvals/bvals.hpp	/^  Real *send_outerbuf_emf_[4], *recv_outerbuf_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]
send_outerbuf_field_	src/bvals/bvals.hpp	/^  Real *send_outerbuf_field_[4], *recv_outerbuf_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]
send_outerbuf_hydro_	src/bvals/bvals.hpp	/^  Real *send_outerbuf_hydro_[4], *recv_outerbuf_hydro_[4]; \/\/ send and recv buffers$/;"	m	class:BoundaryValues	typeref:typename:Real * [4]
send_outersize_emf_	src/bvals/bvals.hpp	/^  int  send_outersize_emf_[4], recv_outersize_emf_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_outersize_field_	src/bvals/bvals.hpp	/^  int  send_outersize_field_[4], recv_outersize_field_[4];$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_outersize_hydro_	src/bvals/bvals.hpp	/^  int  send_outersize_hydro_[4], recv_outersize_hydro_[4]; \/\/ buffer sizes$/;"	m	class:BoundaryValues	typeref:typename:int[4]
send_proc	src/fft/plimpton/remap_2d.h	/^  int *send_proc;                   \/* proc to send each message to *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int *
send_proc	src/fft/plimpton/remap_3d.h	/^  int *send_proc;                   \/* proc to send each message to *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int *
send_size	src/fft/plimpton/remap_2d.h	/^  int *send_size;                   \/* size of each send message *\/$/;"	m	struct:remap_plan_2d	typeref:typename:int *
send_size	src/fft/plimpton/remap_3d.h	/^  int *send_size;                   \/* size of each send message *\/$/;"	m	struct:remap_plan_3d	typeref:typename:int *
sendbuf	src/fft/plimpton/remap_2d.h	/^  double *sendbuf;                  \/* buffer for MPI sends *\/$/;"	m	struct:remap_plan_2d	typeref:typename:double *
sendbuf	src/fft/plimpton/remap_3d.h	/^  double *sendbuf;                  \/* buffer for MPI sends *\/$/;"	m	struct:remap_plan_3d	typeref:typename:double *
sflag	src/bvals/bvals_grav.hpp	/^  enum BoundaryStatus flag[56], sflag[56];$/;"	m	struct:GravityBoundaryData	typeref:enum:BoundaryStatus[56][56]
sflag	src/bvals/bvals_mg.hpp	/^  enum BoundaryStatus flag[56], sflag[56];$/;"	m	struct:MGBoundaryData	typeref:enum:BoundaryStatus[56][56]
shbb_	src/bvals/bvals.hpp	/^  ShearingBoundaryBlock shbb_;  \/\/ shearing block properties: lists etc.$/;"	m	class:BoundaryValues	typeref:typename:ShearingBoundaryBlock
shbox_inner_emf_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus shbox_inner_emf_flag_[5], shbox_outer_emf_flag_[5];$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus[5]
shbox_inner_field_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus shbox_inner_field_flag_[4], shbox_outer_field_flag_[4];$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus[4]
shbox_inner_hydro_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus shbox_inner_hydro_flag_[4], shbox_outer_hydro_flag_[4];$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus[4]
shbox_outer_emf_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus shbox_inner_emf_flag_[5], shbox_outer_emf_flag_[5];$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus[5][5]
shbox_outer_field_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus shbox_inner_field_flag_[4], shbox_outer_field_flag_[4];$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus[4][4]
shbox_outer_hydro_flag_	src/bvals/bvals.hpp	/^  enum BoundaryStatus shbox_inner_hydro_flag_[4], shbox_outer_hydro_flag_[4];$/;"	m	class:BoundaryValues	typeref:enum:BoundaryStatus[4][4]
shboxcoord	src/pgen/ssheet.cpp	/^static int shboxcoord;$/;"	v	typeref:typename:int	file:
shboxmap_inner_emf_	src/bvals/bvals.hpp	/^  EdgeField shboxmap_inner_emf_, shboxmap_outer_emf_;$/;"	m	class:BoundaryValues	typeref:typename:EdgeField
shboxmap_outer_emf_	src/bvals/bvals.hpp	/^  EdgeField shboxmap_inner_emf_, shboxmap_outer_emf_;$/;"	m	class:BoundaryValues	typeref:typename:EdgeField
shboxvar_inner_emf_	src/bvals/bvals.hpp	/^  EdgeField shboxvar_inner_emf_, shboxvar_outer_emf_;$/;"	m	class:BoundaryValues	typeref:typename:EdgeField
shboxvar_inner_field_	src/bvals/bvals.hpp	/^  FaceField shboxvar_inner_field_, shboxvar_outer_field_;$/;"	m	class:BoundaryValues	typeref:typename:FaceField
shboxvar_inner_hydro_	src/bvals/bvals.hpp	/^  AthenaArray<Real>  shboxvar_inner_hydro_, shboxvar_outer_hydro_;$/;"	m	class:BoundaryValues	typeref:typename:AthenaArray<Real>
shboxvar_outer_emf_	src/bvals/bvals.hpp	/^  EdgeField shboxvar_inner_emf_, shboxvar_outer_emf_;$/;"	m	class:BoundaryValues	typeref:typename:EdgeField
shboxvar_outer_field_	src/bvals/bvals.hpp	/^  FaceField shboxvar_inner_field_, shboxvar_outer_field_;$/;"	m	class:BoundaryValues	typeref:typename:FaceField
shboxvar_outer_hydro_	src/bvals/bvals.hpp	/^  AthenaArray<Real>  shboxvar_inner_hydro_, shboxvar_outer_hydro_;$/;"	m	class:BoundaryValues	typeref:typename:AthenaArray<Real>
shear	src/bvals/bvals.hpp	/^  bool shear; \/\/ flag indicating boundary is attaching shearing periodic boundaries.$/;"	m	struct:NeighborBlock	typeref:typename:bool
sigfft	src/gravity/obcgravity.hpp	/^  Real *sigma[6], *sigma_mid[6][2], *sigma_fft[6][2][2], *sigfft[2][2][2], *grf;$/;"	m	class:OBCGravityCar	typeref:typename:Real * [6]* [6][2]* [6][2][2]* [2][2][2]
sigma	src/gravity/obcgravity.hpp	/^  Real *psi[4], *psi2[4], *sigma[4];$/;"	m	class:OBCGravityCyl	typeref:typename:Real * [4]* [4]* [4]
sigma	src/gravity/obcgravity.hpp	/^  Real *sigma[6], *sigma_mid[6][2], *sigma_fft[6][2][2], *sigfft[2][2][2], *grf;$/;"	m	class:OBCGravityCar	typeref:typename:Real * [6]
sigma_fft	src/gravity/obcgravity.hpp	/^  Real *sigma[6], *sigma_mid[6][2], *sigma_fft[6][2][2], *sigfft[2][2][2], *grf;$/;"	m	class:OBCGravityCar	typeref:typename:Real * [6]* [6][2]* [6][2][2]
sigma_fft	src/gravity/obcgravity.hpp	/^  fftw_complex *sigma_fft[4], *psi_fft[4], *sigma_fft_v[4], *sigma_fft_r[4];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex * [4]
sigma_fft_r	src/gravity/obcgravity.hpp	/^  fftw_complex *sigma_fft[4], *psi_fft[4], *sigma_fft_v[4], *sigma_fft_r[4];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex * [4]* [4]* [4]* [4]
sigma_fft_v	src/gravity/obcgravity.hpp	/^  fftw_complex *sigma_fft[4], *psi_fft[4], *sigma_fft_v[4], *sigma_fft_r[4];$/;"	m	class:OBCGravityCyl	typeref:typename:fftw_complex * [4]* [4]* [4]
sigma_max_	src/eos/eos.hpp	/^  Real sigma_max_, beta_min_;            \/\/ limits on ratios of gas quantities to pmag$/;"	m	class:EquationOfState	typeref:typename:Real
sigma_mid	src/gravity/obcgravity.hpp	/^  Real *sigma[6], *sigma_mid[6][2], *sigma_fft[6][2][2], *sigfft[2][2][2], *grf;$/;"	m	class:OBCGravityCar	typeref:typename:Real * [6]* [6][2]
signalflag	src/utils/utils.hpp	/^  static volatile int signalflag[nsignal];$/;"	v	namespace:SignalHandler	typeref:typename:volatile int[]
sin_a2	src/pgen/cpaw.cpp	/^static Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
sin_a2	src/pgen/jeans.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
sin_a2	src/pgen/linear_wave.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
sin_a3	src/pgen/cpaw.cpp	/^static Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
sin_a3	src/pgen/jeans.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
sin_a3	src/pgen/linear_wave.cpp	/^static Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	v	typeref:typename:Real	file:
sin_psi	src/pgen/gr_torus.cpp	/^static Real psi, sin_psi, cos_psi;                 \/\/ tilt parameters$/;"	v	typeref:typename:Real	file:
size_	src/multigrid/multigrid.hpp	/^  RegionSize size_;$/;"	m	class:Multigrid	typeref:typename:RegionSize
src_	src/multigrid/multigrid.hpp	/^  AthenaArray<Real> *u_, *def_, *src_;$/;"	m	class:Multigrid	typeref:typename:AthenaArray<Real> ***
srcterm	src/gravity/gravity.hpp	/^  bool srcterm;$/;"	m	class:Gravity	typeref:typename:bool
ssize_	src/bvals/bvals.hpp	/^  Real ssize_;                  \/\/ # of ghost cells in x-z plane$/;"	m	class:BoundaryValues	typeref:typename:Real
stage_abscissae	src/mesh/mesh.hpp	/^  Real stage_abscissae[MAX_NSTAGE][MAX_NREGISTER];$/;"	m	class:MeshBlock	typeref:typename:Real[][]
stage_wghts	src/task_list/task_list.hpp	/^  struct IntegratorWeight stage_wghts[MAX_NSTAGE];$/;"	m	class:TimeIntegratorTaskList	typeref:struct:IntegratorWeight[]
start_time	src/mesh/mesh.hpp	/^  Real start_time, tlim, cfl_number, time, dt;$/;"	m	class:Mesh	typeref:typename:Real
swap1_	src/fft/athena_fft.hpp	/^  bool swap1_,swap2_;$/;"	m	class:FFTBlock	typeref:typename:bool
swap2_	src/fft/athena_fft.hpp	/^  bool swap1_,swap2_;$/;"	m	class:FFTBlock	typeref:typename:bool
swap_	src/fft/athena_fft.hpp	/^  int npermute_, swap_;$/;"	m	class:AthenaFFTIndex	typeref:typename:int
t0	src/pgen/resist.cpp	/^static Real amp,x0,t0,eta;$/;"	v	typeref:typename:Real	file:
t0	src/pgen/visc.cpp	/^static Real v0,t0;$/;"	v	typeref:typename:Real	file:
t1	src/pgen/cylgrav_test.cpp	/^  double t1;$/;"	m	struct:Fparams	typeref:typename:double	file:
t1_	src/pgen/cylgrav_test.cpp	/^  double a1_,a2_,t1_,t2_,z1_,z2_;$/;"	m	class:Hure	typeref:typename:double	file:
t2	src/pgen/cylgrav_test.cpp	/^  double t2;$/;"	m	struct:Fparams	typeref:typename:double	file:
t2_	src/pgen/cylgrav_test.cpp	/^  double a1_,a2_,t1_,t2_,z1_,z2_;$/;"	m	class:Hure	typeref:typename:double	file:
targetid	src/bvals/bvals.hpp	/^  int rank, level, gid, lid, ox1, ox2, ox3, fi1, fi2, bufid, eid, targetid;$/;"	m	struct:NeighborBlock	typeref:typename:int
task_id	src/task_list/mg_task_list.hpp	/^  uint64_t task_id;      \/\/ encodes task using bit positions in MultigridTaskNames$/;"	m	struct:MGTask	typeref:typename:uint64_t
task_id	src/task_list/task_list.hpp	/^  uint64_t task_id;      \/\/ encodes task using bit positions in HydroIntegratorTaskNames$/;"	m	struct:Task	typeref:typename:uint64_t
task_list_	src/task_list/mg_task_list.hpp	/^  struct MGTask task_list_[64];$/;"	m	class:MultigridTaskList	typeref:struct:MGTask[64]
task_list_	src/task_list/task_list.hpp	/^  struct Task task_list_[64];$/;"	m	class:TaskList	typeref:struct:Task[64]
tasks	src/mesh/mesh.hpp	/^  TaskState tasks;$/;"	m	class:MeshBlock	typeref:typename:TaskState
tdrive	src/fft/turbulence.hpp	/^  Real dtdrive,tdrive;$/;"	m	class:TurbulenceDriver	typeref:typename:Real
temperature	src/pgen/gr_mhd_inflow.cpp	/^static Real temperature;                 \/\/ temperature pgas\/rho$/;"	v	typeref:typename:Real	file:
theta_max	src/pgen/gr_torus.cpp	/^static Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	v	typeref:typename:Real	file:
theta_min	src/pgen/gr_torus.cpp	/^static Real r_min, r_max, theta_min, theta_max;    \/\/ limits in r,theta for 2D samples$/;"	v	typeref:typename:Real	file:
time	src/mesh/mesh.hpp	/^  Real start_time, tlim, cfl_number, time, dt;$/;"	m	class:Mesh	typeref:typename:Real
tlim	src/mesh/mesh.hpp	/^  Real start_time, tlim, cfl_number, time, dt;$/;"	m	class:Mesh	typeref:typename:Real
total1	src/fft/plimpton/fft_2d.h	/^  int total1,total2;                \/* # of 1st and 2nd FFTs (times length) *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
total1	src/fft/plimpton/fft_3d.h	/^  int total1,total2,total3;         \/* # of 1st,2nd,3rd FFTs (times length) *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
total2	src/fft/plimpton/fft_2d.h	/^  int total1,total2;                \/* # of 1st and 2nd FFTs (times length) *\/$/;"	m	struct:fft_plan_2d	typeref:typename:int
total2	src/fft/plimpton/fft_3d.h	/^  int total1,total2,total3;         \/* # of 1st,2nd,3rd FFTs (times length) *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
total3	src/fft/plimpton/fft_3d.h	/^  int total1,total2,total3;         \/* # of 1st,2nd,3rd FFTs (times length) *\/$/;"	m	struct:fft_plan_3d	typeref:typename:int
trans_face1_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_i1_, trans_face1_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_i1_, trans_face1_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_j1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_ji1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_ji1_, trans_face1_ji2_, trans_face1_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_ji2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_ji1_, trans_face1_ji2_, trans_face1_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_ji3_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_ji1_, trans_face1_ji2_, trans_face1_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_ji4_	src/coordinates/coordinates.hpp	/^      trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_ji5_	src/coordinates/coordinates.hpp	/^      trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_ji6_	src/coordinates/coordinates.hpp	/^      trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_ji7_	src/coordinates/coordinates.hpp	/^      trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face1_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_i1_, trans_face2_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_i1_, trans_face2_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_j1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_ji1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_ji1_, trans_face2_ji2_, trans_face2_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_ji2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_ji1_, trans_face2_ji2_, trans_face2_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_ji3_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_ji1_, trans_face2_ji2_, trans_face2_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_ji4_	src/coordinates/coordinates.hpp	/^      trans_face2_ji4_, trans_face2_ji5_, trans_face2_ji6_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_ji5_	src/coordinates/coordinates.hpp	/^      trans_face2_ji4_, trans_face2_ji5_, trans_face2_ji6_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_ji6_	src/coordinates/coordinates.hpp	/^      trans_face2_ji4_, trans_face2_ji5_, trans_face2_ji6_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face2_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_i1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_i1_, trans_face3_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_i2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_i1_, trans_face3_i2_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_j1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_j1_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_ji1_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_ji1_, trans_face3_ji2_, trans_face3_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_ji2_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_ji1_, trans_face3_ji2_, trans_face3_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_ji3_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_ji1_, trans_face3_ji2_, trans_face3_ji3_,$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_ji4_	src/coordinates/coordinates.hpp	/^      trans_face3_ji4_, trans_face3_ji5_, trans_face3_ji6_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_ji5_	src/coordinates/coordinates.hpp	/^      trans_face3_ji4_, trans_face3_ji5_, trans_face3_ji6_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_ji6_	src/coordinates/coordinates.hpp	/^      trans_face3_ji4_, trans_face3_ji5_, trans_face3_ji6_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
trans_face3_kji_	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_kji_;$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
tree	src/mesh/mesh.hpp	/^  MeshBlockTree tree;$/;"	m	class:Mesh	typeref:typename:MeshBlockTree
tridag	src/gravity/obcgravity.cpp	/^void tridag(AthenaArray<Real> &a, AthenaArray<Real> &b, AthenaArray<Real> &c,$/;"	f	typeref:typename:void
ts_	src/multigrid/multigrid.hpp	/^  TaskState ts_;$/;"	m	class:Multigrid	typeref:typename:TaskState
turb_flag	src/mesh/mesh.hpp	/^  int turb_flag; \/\/ turbulence flag$/;"	m	class:Mesh	typeref:typename:int
type	src/bvals/bvals.hpp	/^  enum NeighborType type;$/;"	m	struct:NeighborBlock	typeref:enum:NeighborType
type	src/bvals/bvals.hpp	/^  enum NeighborType type;$/;"	m	struct:NeighborIndexes	typeref:enum:NeighborType
type	src/outputs/outputs.hpp	/^  std::string type;        \/\/ one of (SCALARS,VECTORS) used for vtk outputs$/;"	m	struct:OutputData	typeref:typename:std::string
u	src/hydro/hydro.hpp	/^  AthenaArray<Real> u,w;      \/\/ time-integrator memory register #1$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
u	src/pgen/gr_linear_wave.cpp	/^Real u[4], b[4];              \/\/ contravariant quantities$/;"	v	typeref:typename:Real[4]
u0	src/pgen/jeans.cpp	/^static Real d0,p0,v0,u0,w0,va,b0;$/;"	v	typeref:typename:Real	file:
u0	src/pgen/linear_wave.cpp	/^static Real d0,p0,u0,bx0, by0, bz0, dby, dbz;$/;"	v	typeref:typename:Real	file:
u1	src/hydro/hydro.hpp	/^  AthenaArray<Real> u1,w1;    \/\/ time-integrator memory register #2$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
u2	src/hydro/hydro.hpp	/^  AthenaArray<Real> u2;       \/\/ time-integrator memory register #3$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
u_	src/multigrid/multigrid.hpp	/^  AthenaArray<Real> *u_, *def_, *src_;$/;"	m	class:Multigrid	typeref:typename:AthenaArray<Real> *
ul	src/pgen/shk_cloud.cpp	/^static Real gmma1,dl,pl,ul;$/;"	v	typeref:typename:Real	file:
uniform_limiter	src/reconstruct/reconstruction.hpp	/^  bool uniform_limiter[3]; \/\/ TRUE to use the PLM or PPM limiter option w\/o coord terms$/;"	m	class:Reconstruction	typeref:typename:bool[3]
unpack	src/fft/plimpton/remap_2d.h	/^  void (*unpack)(double *, double *, struct pack_plan_2d *);                 \/* which unpack fu/;"	m	struct:remap_plan_2d	typeref:typename:void (*)(double *,double *,struct pack_plan_2d *)
unpack	src/fft/plimpton/remap_3d.h	/^  void (*unpack)(double *, double *, struct pack_plan_3d *);                 \/* which unpack fu/;"	m	struct:remap_plan_3d	typeref:typename:void (*)(double *,double *,struct pack_plan_3d *)
unpack_2d	src/fft/plimpton/pack_2d.cpp	/^void unpack_2d(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f	typeref:typename:void
unpack_2d_permute_1	src/fft/plimpton/pack_2d.cpp	/^void unpack_2d_permute_1(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f	typeref:typename:void
unpack_2d_permute_2	src/fft/plimpton/pack_2d.cpp	/^void unpack_2d_permute_2(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f	typeref:typename:void
unpack_2d_permute_n	src/fft/plimpton/pack_2d.cpp	/^void unpack_2d_permute_n(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f	typeref:typename:void
unpack_3d	src/fft/plimpton/pack_3d.cpp	/^void unpack_3d(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
unpack_3d_permute1_1	src/fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute1_1(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
unpack_3d_permute1_2	src/fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute1_2(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
unpack_3d_permute1_n	src/fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute1_n(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
unpack_3d_permute2_1	src/fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute2_1(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
unpack_3d_permute2_2	src/fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute2_2(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
unpack_3d_permute2_n	src/fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute2_n(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f	typeref:typename:void
unpackplan	src/fft/plimpton/remap_2d.h	/^  struct pack_plan_2d *unpackplan;  \/* unpack plan for each recv message *\/$/;"	m	struct:remap_plan_2d	typeref:struct:pack_plan_2d *
unpackplan	src/fft/plimpton/remap_3d.h	/^  struct pack_plan_3d *unpackplan;  \/* unpack plan for each recv message *\/$/;"	m	struct:remap_plan_3d	typeref:struct:pack_plan_3d *
use_uniform_meshgen_fn_	src/mesh/mesh.hpp	/^  bool use_uniform_meshgen_fn_[3];$/;"	m	class:Mesh	typeref:typename:bool[3]
user_history_func_	src/mesh/mesh.hpp	/^  HistoryOutputFunc_t *user_history_func_;$/;"	m	class:Mesh	typeref:typename:HistoryOutputFunc_t *
user_history_output_names_	src/mesh/mesh.hpp	/^  std::string *user_history_output_names_;$/;"	m	class:Mesh	typeref:typename:std::string *
user_out_var	src/mesh/mesh.hpp	/^  AthenaArray<Real> user_out_var;$/;"	m	class:MeshBlock	typeref:typename:AthenaArray<Real>
user_out_var_names_	src/mesh/mesh.hpp	/^  std::string *user_out_var_names_;$/;"	m	class:MeshBlock	typeref:typename:std::string *
v0	src/pgen/jeans.cpp	/^static Real d0,p0,v0,u0,w0,va,b0;$/;"	v	typeref:typename:Real	file:
v0	src/pgen/visc.cpp	/^static Real v0,t0;$/;"	v	typeref:typename:Real	file:
v_par	src/pgen/cpaw.cpp	/^static Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	v	typeref:typename:Real	file:
v_perp	src/pgen/cpaw.cpp	/^static Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	v	typeref:typename:Real	file:
va	src/pgen/jeans.cpp	/^static Real d0,p0,v0,u0,w0,va,b0;$/;"	v	typeref:typename:Real	file:
variable	src/outputs/outputs.hpp	/^  std::string variable;$/;"	m	struct:OutputParameters	typeref:typename:std::string
variable_names	src/outputs/outputs.hpp	/^  char (*variable_names)[max_name_length+1];  \/\/ array of C-string names of variables$/;"	m	class:ATHDF5Output	typeref:typename:char (*)[]
vel	src/fft/turbulence.hpp	/^  AthenaArray<Real> *vel;$/;"	m	class:TurbulenceDriver	typeref:typename:AthenaArray<Real> *
vertical	src/pgen/gr_torus.cpp	/^enum b_configs {vertical, normal, renorm};$/;"	e	enum:b_configs	file:
vflow	src/pgen/kh.cpp	/^Real vflow;$/;"	v	typeref:typename:Real
vflow	src/pgen/linear_wave.cpp	/^static Real gam,gm1,iso_cs,vflow;$/;"	v	typeref:typename:Real	file:
visflx	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> visflx[3]; \/\/ viscous stress tensor$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>[3]
vol_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> vol_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
volume	src/pgen/gr_linear_wave.cpp	/^AthenaArray<Real> volume;     \/\/ 1D array of volumes$/;"	v	typeref:typename:AthenaArray<Real>
volume	src/pgen/hb3.cpp	/^AthenaArray<Real> volume; \/\/ 1D array of volumes$/;"	v	typeref:typename:AthenaArray<Real>
volume	src/pgen/ssheet.cpp	/^AthenaArray<Real> volume; \/\/ 1D array of volumes$/;"	v	typeref:typename:AthenaArray<Real>
vr	src/pgen/magnoh.cpp	/^static Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	v	typeref:typename:Real	file:
vx	src/pgen/gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	v	typeref:typename:Real
vx_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
vx_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
vy	src/pgen/gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	v	typeref:typename:Real
vy0	src/pgen/field_loop_poles.cpp	/^static Real vy0, rho0, isocs2, gamma_gas;$/;"	v	typeref:typename:Real	file:
vy_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
vy_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
vz	src/pgen/gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	v	typeref:typename:Real
vz_amb	src/pgen/jet.cpp	/^static Real r_amb,d_amb,p_amb,vx_amb,vy_amb,vz_amb,bx_amb,by_amb,bz_amb;$/;"	v	typeref:typename:Real	file:
vz_jet	src/pgen/jet.cpp	/^static Real r_jet,d_jet,p_jet,vx_jet,vy_jet,vz_jet,bx_jet,by_jet,bz_jet;$/;"	v	typeref:typename:Real	file:
w	src/hydro/hydro.hpp	/^  AthenaArray<Real> u,w;      \/\/ time-integrator memory register #1$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
w0	src/pgen/jeans.cpp	/^static Real d0,p0,v0,u0,w0,va,b0;$/;"	v	typeref:typename:Real	file:
w1	src/hydro/hydro.hpp	/^  AthenaArray<Real> u1,w1;    \/\/ time-integrator memory register #2$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
wave_flag	src/pgen/linear_wave.cpp	/^static int wave_flag;$/;"	v	typeref:typename:int	file:
wavenumber	src/pgen/gr_linear_wave.cpp	/^Real wavenumber;              \/\/ wavenumber$/;"	v	typeref:typename:Real
wght	src/field/field.hpp	/^  FaceField wght; \/\/ weights used to integrate E to corner using GS algorithm$/;"	m	class:Field	typeref:typename:FaceField
wl_	src/hydro/hydro.hpp	/^  AthenaArray<Real> wl_, wr_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
wlock_	src/parameter_input.hpp	/^  omp_lock_t rlock_, wlock_;$/;"	m	class:ParameterInput	typeref:typename:omp_lock_t
wr_	src/hydro/hydro.hpp	/^  AthenaArray<Real> wl_, wr_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
x0	src/pgen/resist.cpp	/^static Real amp,x0,t0,eta;$/;"	v	typeref:typename:Real	file:
x1_max	src/pgen/gr_torus.cpp	/^static Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	v	typeref:typename:Real	file:
x1_min	src/pgen/gr_torus.cpp	/^static Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	v	typeref:typename:Real	file:
x1_slice	src/outputs/outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters	typeref:typename:Real
x1area_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_,x2area_,x2area_p1_,x3area_,x3area_p1_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
x1comm	src/gravity/obcgravity.hpp	/^  MPI_Comm bndcomm[4],x1comm,x3comm;$/;"	m	class:OBCGravityCyl	typeref:typename:MPI_Comm[4]
x1comm	src/gravity/obcgravity.hpp	/^  MPI_Comm bndcomm[6],x1comm,x2comm,x3comm;$/;"	m	class:OBCGravityCar	typeref:typename:MPI_Comm[6]
x1comm_size	src/gravity/obcgravity.hpp	/^  int x1rank, x3rank, x1comm_size, x3comm_size;$/;"	m	class:OBCGravityCyl	typeref:typename:int
x1comm_size	src/gravity/obcgravity.hpp	/^  int x1rank,x2rank,x3rank,x1comm_size,x2comm_size,x3comm_size;$/;"	m	class:OBCGravityCar	typeref:typename:int
x1e	src/athena.hpp	/^  AthenaArray<Real> x1e,x2e,x3e;$/;"	m	struct:EdgeField	typeref:typename:AthenaArray<Real>
x1f	src/athena.hpp	/^  AthenaArray<Real> x1f,x2f,x3f;$/;"	m	struct:FaceField	typeref:typename:AthenaArray<Real>
x1f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f; \/\/ face   spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x1f2_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f2_, dx1f2_, x1v2_, dx1v2_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
x1f_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f_, dx1f_, x1v_, dx1v_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
x1face_area_	src/hydro/hydro.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
x1max	src/athena.hpp	/^  Real x1max, x2max, x3max;$/;"	m	struct:RegionSize	typeref:typename:Real
x1min	src/athena.hpp	/^  Real x1min, x2min, x3min;$/;"	m	struct:RegionSize	typeref:typename:Real
x1rank	src/gravity/obcgravity.hpp	/^  int x1rank, x3rank, x1comm_size, x3comm_size;$/;"	m	class:OBCGravityCyl	typeref:typename:int
x1rank	src/gravity/obcgravity.hpp	/^  int x1rank,x2rank,x3rank,x1comm_size,x2comm_size,x3comm_size;$/;"	m	class:OBCGravityCar	typeref:typename:int
x1rat	src/athena.hpp	/^  Real x1rat, x2rat, x3rat; \/\/ ratio of x(i)\/x(i-1)$/;"	m	struct:RegionSize	typeref:typename:Real
x1s2	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged posn for AMR$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x1s3	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged posn for AMR$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x1size	src/pgen/hb3.cpp	/^static Real x1size,x2size,x3size;$/;"	v	typeref:typename:Real	file:
x1size	src/pgen/ssheet.cpp	/^static Real x1size,x2size,x3size;$/;"	v	typeref:typename:Real	file:
x1size_	src/bvals/bvals.hpp	/^  Real x1size_,x2size_,x3size_; \/\/ mesh_size.x1max-mesh_size.x1min etc. [Lx,Ly,Lz]$/;"	m	class:BoundaryValues	typeref:typename:Real
x1v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v; \/\/ volume spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x1v2_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f2_, dx1f2_, x1v2_, dx1v2_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
x1v_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> x1f_, dx1f_, x1v_, dx1v_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
x2_0	src/pgen/jet.cpp	/^static Real gm1,x2_0,x3_0;$/;"	v	typeref:typename:Real	file:
x2_max	src/pgen/gr_torus.cpp	/^static Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	v	typeref:typename:Real	file:
x2_min	src/pgen/gr_torus.cpp	/^static Real x1_min, x1_max, x2_min, x2_max;        \/\/ 2D limits in chosen coordinates$/;"	v	typeref:typename:Real	file:
x2_slice	src/outputs/outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters	typeref:typename:Real
x2area_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_,x2area_,x2area_p1_,x3area_,x3area_p1_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
x2area_p1_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_,x2area_,x2area_p1_,x3area_,x3area_p1_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
x2comm	src/gravity/obcgravity.hpp	/^  MPI_Comm bndcomm[6],x1comm,x2comm,x3comm;$/;"	m	class:OBCGravityCar	typeref:typename:MPI_Comm[6]
x2comm_size	src/gravity/obcgravity.hpp	/^  int x1rank,x2rank,x3rank,x1comm_size,x2comm_size,x3comm_size;$/;"	m	class:OBCGravityCar	typeref:typename:int
x2e	src/athena.hpp	/^  AthenaArray<Real> x1e,x2e,x3e;$/;"	m	struct:EdgeField	typeref:typename:AthenaArray<Real>
x2f	src/athena.hpp	/^  AthenaArray<Real> x1f,x2f,x3f;$/;"	m	struct:FaceField	typeref:typename:AthenaArray<Real>
x2f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f; \/\/ face   spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x2face_area_	src/hydro/hydro.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
x2face_area_p1_	src/hydro/hydro.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
x2max	src/athena.hpp	/^  Real x1max, x2max, x3max;$/;"	m	struct:RegionSize	typeref:typename:Real
x2min	src/athena.hpp	/^  Real x1min, x2min, x3min;$/;"	m	struct:RegionSize	typeref:typename:Real
x2rank	src/gravity/obcgravity.hpp	/^  int x1rank,x2rank,x3rank,x1comm_size,x2comm_size,x3comm_size;$/;"	m	class:OBCGravityCar	typeref:typename:int
x2rat	src/athena.hpp	/^  Real x1rat, x2rat, x3rat; \/\/ ratio of x(i)\/x(i-1)$/;"	m	struct:RegionSize	typeref:typename:Real
x2s1	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged posn for AMR$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x2s3	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged posn for AMR$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x2size	src/pgen/hb3.cpp	/^static Real x1size,x2size,x3size;$/;"	v	typeref:typename:Real	file:
x2size	src/pgen/ssheet.cpp	/^static Real x1size,x2size,x3size;$/;"	v	typeref:typename:Real	file:
x2size_	src/bvals/bvals.hpp	/^  Real x1size_,x2size_,x3size_; \/\/ mesh_size.x1max-mesh_size.x1min etc. [Lx,Ly,Lz]$/;"	m	class:BoundaryValues	typeref:typename:Real
x2v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v; \/\/ volume spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x3_0	src/pgen/jet.cpp	/^static Real gm1,x2_0,x3_0;$/;"	v	typeref:typename:Real	file:
x3_max	src/pgen/gr_torus.cpp	/^static Real x3_min, x3_max;                        \/\/ 3D limits in chosen coordinates$/;"	v	typeref:typename:Real	file:
x3_min	src/pgen/gr_torus.cpp	/^static Real x3_min, x3_max;                        \/\/ 3D limits in chosen coordinates$/;"	v	typeref:typename:Real	file:
x3_slice	src/outputs/outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters	typeref:typename:Real
x3area_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_,x2area_,x2area_p1_,x3area_,x3area_p1_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
x3area_p1_	src/hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_,x2area_,x2area_p1_,x3area_,x3area_p1_;$/;"	m	class:HydroDiffusion	typeref:typename:AthenaArray<Real>
x3comm	src/gravity/obcgravity.hpp	/^  MPI_Comm bndcomm[4],x1comm,x3comm;$/;"	m	class:OBCGravityCyl	typeref:typename:MPI_Comm[4]
x3comm	src/gravity/obcgravity.hpp	/^  MPI_Comm bndcomm[6],x1comm,x2comm,x3comm;$/;"	m	class:OBCGravityCar	typeref:typename:MPI_Comm[6]
x3comm_size	src/gravity/obcgravity.hpp	/^  int x1rank, x3rank, x1comm_size, x3comm_size;$/;"	m	class:OBCGravityCyl	typeref:typename:int
x3comm_size	src/gravity/obcgravity.hpp	/^  int x1rank,x2rank,x3rank,x1comm_size,x2comm_size,x3comm_size;$/;"	m	class:OBCGravityCar	typeref:typename:int
x3e	src/athena.hpp	/^  AthenaArray<Real> x1e,x2e,x3e;$/;"	m	struct:EdgeField	typeref:typename:AthenaArray<Real>
x3f	src/athena.hpp	/^  AthenaArray<Real> x1f,x2f,x3f;$/;"	m	struct:FaceField	typeref:typename:AthenaArray<Real>
x3f	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f; \/\/ face   spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x3face_area_	src/hydro/hydro.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
x3face_area_p1_	src/hydro/hydro.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:Hydro	typeref:typename:AthenaArray<Real>
x3max	src/athena.hpp	/^  Real x1max, x2max, x3max;$/;"	m	struct:RegionSize	typeref:typename:Real
x3min	src/athena.hpp	/^  Real x1min, x2min, x3min;$/;"	m	struct:RegionSize	typeref:typename:Real
x3rank	src/gravity/obcgravity.hpp	/^  int x1rank, x3rank, x1comm_size, x3comm_size;$/;"	m	class:OBCGravityCyl	typeref:typename:int
x3rank	src/gravity/obcgravity.hpp	/^  int x1rank,x2rank,x3rank,x1comm_size,x2comm_size,x3comm_size;$/;"	m	class:OBCGravityCar	typeref:typename:int
x3rat	src/athena.hpp	/^  Real x1rat, x2rat, x3rat; \/\/ ratio of x(i)\/x(i-1)$/;"	m	struct:RegionSize	typeref:typename:Real
x3s1	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged posn for AMR$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x3s2	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged posn for AMR$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x3size	src/pgen/hb3.cpp	/^static Real x1size,x2size,x3size;$/;"	v	typeref:typename:Real	file:
x3size	src/pgen/ssheet.cpp	/^static Real x1size,x2size,x3size;$/;"	v	typeref:typename:Real	file:
x3size_	src/bvals/bvals.hpp	/^  Real x1size_,x2size_,x3size_; \/\/ mesh_size.x1max-mesh_size.x1min etc. [Lx,Ly,Lz]$/;"	m	class:BoundaryValues	typeref:typename:Real
x3v	src/coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v; \/\/ volume spacing and positions$/;"	m	class:Coordinates	typeref:typename:AthenaArray<Real>
x_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> a_,b_,c_,x_,r_,lambda2_,lambda3_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
x_decomp	src/fft/athena_fft.hpp	/^  const unsigned int x_decomp = 1<<0;$/;"	v	namespace:DecompositionNames	typeref:typename:const unsigned int
xc	src/pgen/field_loop_poles.cpp	/^static Real xc, yc, zc, beta, b0;$/;"	v	typeref:typename:Real	file:
xorder	src/reconstruct/reconstruction.hpp	/^  int xorder;   \/\/ order of hydro reconstruction$/;"	m	class:Reconstruction	typeref:typename:int
xx_	src/gravity/obcgravity.hpp	/^  AthenaArray<Real> aa_,bb_,cc_,xx_,rr_,lambda22_,lambda33_;$/;"	m	class:OBCGravityCyl	typeref:typename:AthenaArray<Real>
xy_decomp	src/fft/athena_fft.hpp	/^  const unsigned int xy_decomp = x_decomp | y_decomp;$/;"	v	namespace:DecompositionNames	typeref:typename:const unsigned int
xyz_decomp	src/fft/athena_fft.hpp	/^  const unsigned int xyz_decomp = x_decomp | y_decomp | z_decomp;$/;"	v	namespace:DecompositionNames	typeref:typename:const unsigned int
xz_decomp	src/fft/athena_fft.hpp	/^  const unsigned int xz_decomp = x_decomp | z_decomp;$/;"	v	namespace:DecompositionNames	typeref:typename:const unsigned int
y_decomp	src/fft/athena_fft.hpp	/^  const unsigned int y_decomp = 1<<1;$/;"	v	namespace:DecompositionNames	typeref:typename:const unsigned int
yc	src/pgen/field_loop_poles.cpp	/^static Real xc, yc, zc, beta, b0;$/;"	v	typeref:typename:Real	file:
yz_decomp	src/fft/athena_fft.hpp	/^  const unsigned int yz_decomp = y_decomp | z_decomp;$/;"	v	namespace:DecompositionNames	typeref:typename:const unsigned int
z	src/pgen/cylgrav_test.cpp	/^  double z;$/;"	m	struct:Fparams	typeref:typename:double	file:
z1	src/pgen/cylgrav_test.cpp	/^  double z1;$/;"	m	struct:Fparams	typeref:typename:double	file:
z1_	src/pgen/cylgrav_test.cpp	/^  double a1_,a2_,t1_,t2_,z1_,z2_;$/;"	m	class:Hure	typeref:typename:double	file:
z2	src/pgen/cylgrav_test.cpp	/^  double z2;$/;"	m	struct:Fparams	typeref:typename:double	file:
z2_	src/pgen/cylgrav_test.cpp	/^  double a1_,a2_,t1_,t2_,z1_,z2_;$/;"	m	class:Hure	typeref:typename:double	file:
z_decomp	src/fft/athena_fft.hpp	/^  const unsigned int z_decomp = 1<<2;$/;"	v	namespace:DecompositionNames	typeref:typename:const unsigned int
zc	src/pgen/field_loop_poles.cpp	/^static Real xc, yc, zc, beta, b0;$/;"	v	typeref:typename:Real	file:
~ATHDF5Output	src/outputs/outputs.hpp	/^  ~ATHDF5Output() {}$/;"	f	class:ATHDF5Output
~AthenaArray	src/athena_arrays.hpp	/^AthenaArray<T>::~AthenaArray() {$/;"	f	class:AthenaArray
~AthenaFFTIndex	src/fft/athena_fft.cpp	/^AthenaFFTIndex::~AthenaFFTIndex() {$/;"	f	class:AthenaFFTIndex
~BoundaryBase	src/bvals/bvals_base.cpp	/^BoundaryBase::~BoundaryBase() {$/;"	f	class:BoundaryBase
~BoundaryValues	src/bvals/bvals.cpp	/^BoundaryValues::~BoundaryValues() {$/;"	f	class:BoundaryValues
~Cartesian	src/coordinates/cartesian.cpp	/^Cartesian::~Cartesian() {$/;"	f	class:Cartesian
~Coordinates	src/coordinates/coordinates.cpp	/^Coordinates::~Coordinates() {$/;"	f	class:Coordinates
~Cylindrical	src/coordinates/cylindrical.cpp	/^Cylindrical::~Cylindrical() {$/;"	f	class:Cylindrical
~EquationOfState	src/eos/adiabatic_hydro.cpp	/^EquationOfState::~EquationOfState() {$/;"	f	class:EquationOfState
~EquationOfState	src/eos/adiabatic_hydro_gr.cpp	/^EquationOfState::~EquationOfState() {$/;"	f	class:EquationOfState
~EquationOfState	src/eos/adiabatic_hydro_sr.cpp	/^EquationOfState::~EquationOfState() {}$/;"	f	class:EquationOfState
~EquationOfState	src/eos/adiabatic_mhd.cpp	/^EquationOfState::~EquationOfState() {$/;"	f	class:EquationOfState
~EquationOfState	src/eos/adiabatic_mhd_gr.cpp	/^EquationOfState::~EquationOfState() {$/;"	f	class:EquationOfState
~EquationOfState	src/eos/adiabatic_mhd_sr.cpp	/^EquationOfState::~EquationOfState() {}$/;"	f	class:EquationOfState
~EquationOfState	src/eos/isothermal_hydro.cpp	/^EquationOfState::~EquationOfState() {$/;"	f	class:EquationOfState
~EquationOfState	src/eos/isothermal_mhd.cpp	/^EquationOfState::~EquationOfState() {$/;"	f	class:EquationOfState
~FFTBlock	src/fft/athena_fft.cpp	/^FFTBlock::~FFTBlock() {$/;"	f	class:FFTBlock
~FFTDriver	src/fft/fft_driver.cpp	/^FFTDriver::~FFTDriver() {$/;"	f	class:FFTDriver
~FFTGravity	src/gravity/fftgravity.hpp	/^  ~FFTGravity() {}$/;"	f	class:FFTGravity
~FFTGravityDriver	src/gravity/fftgravity.cpp	/^FFTGravityDriver::~FFTGravityDriver() {$/;"	f	class:FFTGravityDriver
~Field	src/field/field.cpp	/^Field::~Field() {$/;"	f	class:Field
~FieldDiffusion	src/field/field_diffusion/field_diffusion.cpp	/^FieldDiffusion::~FieldDiffusion() {$/;"	f	class:FieldDiffusion
~FormattedTableOutput	src/outputs/outputs.hpp	/^  ~FormattedTableOutput() {}$/;"	f	class:FormattedTableOutput
~GRUser	src/coordinates/gr_user.cpp	/^GRUser::~GRUser() {$/;"	f	class:GRUser
~Gravity	src/gravity/gravity.cpp	/^Gravity::~Gravity() {$/;"	f	class:Gravity
~GravityBoundaryValues	src/bvals/bvals_grav.cpp	/^GravityBoundaryValues::~GravityBoundaryValues() {$/;"	f	class:GravityBoundaryValues
~GravitySolverTaskList	src/task_list/grav_task_list.hpp	/^  ~GravitySolverTaskList() {}$/;"	f	class:GravitySolverTaskList
~HistoryOutput	src/outputs/outputs.hpp	/^  ~HistoryOutput() {}$/;"	f	class:HistoryOutput
~Hure	src/pgen/cylgrav_test.cpp	/^Hure::~Hure()$/;"	f	class:Hure
~Hydro	src/hydro/hydro.cpp	/^Hydro::~Hydro() {$/;"	f	class:Hydro
~HydroDiffusion	src/hydro/hydro_diffusion/hydro_diffusion.cpp	/^HydroDiffusion::~HydroDiffusion() {$/;"	f	class:HydroDiffusion
~HydroSourceTerms	src/hydro/srcterms/hydro_srcterms.cpp	/^HydroSourceTerms::~HydroSourceTerms() {$/;"	f	class:HydroSourceTerms
~IOWrapper	src/outputs/io_wrapper.hpp	/^  ~IOWrapper() {}$/;"	f	class:IOWrapper
~InputBlock	src/parameter_input.cpp	/^InputBlock::~InputBlock() {$/;"	f	class:InputBlock
~KerrSchild	src/coordinates/kerr-schild.cpp	/^KerrSchild::~KerrSchild() {$/;"	f	class:KerrSchild
~MGBoundaryValues	src/bvals/bvals_mg.cpp	/^MGBoundaryValues::~MGBoundaryValues() {$/;"	f	class:MGBoundaryValues
~MGGravity	src/gravity/mggravity.hpp	/^  ~MGGravity() {}$/;"	f	class:MGGravity
~MGGravityDriver	src/gravity/mggravity.hpp	/^  ~MGGravityDriver() {}$/;"	f	class:MGGravityDriver
~Mesh	src/mesh/mesh.cpp	/^Mesh::~Mesh() {$/;"	f	class:Mesh
~MeshBlock	src/mesh/meshblock.cpp	/^MeshBlock::~MeshBlock() {$/;"	f	class:MeshBlock
~MeshBlockTree	src/mesh/meshblock_tree.cpp	/^MeshBlockTree::~MeshBlockTree() {$/;"	f	class:MeshBlockTree
~MeshRefinement	src/mesh/mesh_refinement.cpp	/^MeshRefinement::~MeshRefinement() {$/;"	f	class:MeshRefinement
~Minkowski	src/coordinates/minkowski.cpp	/^Minkowski::~Minkowski() {$/;"	f	class:Minkowski
~Multigrid	src/multigrid/multigrid.cpp	/^Multigrid::~Multigrid() {$/;"	f	class:Multigrid
~MultigridDriver	src/multigrid/multigrid_driver.cpp	/^MultigridDriver::~MultigridDriver() {$/;"	f	class:MultigridDriver
~MultigridTaskList	src/task_list/mg_task_list.hpp	/^  ~MultigridTaskList() {}$/;"	f	class:MultigridTaskList
~OBCGravityCar	src/gravity/obcgravity.cpp	/^OBCGravityCar::~OBCGravityCar()$/;"	f	class:OBCGravityCar
~OBCGravityCyl	src/gravity/obcgravity.cpp	/^OBCGravityCyl::~OBCGravityCyl()$/;"	f	class:OBCGravityCyl
~OBCGravityDriver	src/gravity/obcgravity.cpp	/^OBCGravityDriver::~OBCGravityDriver()$/;"	f	class:OBCGravityDriver
~OutputType	src/outputs/outputs.cpp	/^OutputType::~OutputType() {$/;"	f	class:OutputType
~Outputs	src/outputs/outputs.cpp	/^Outputs::~Outputs() {$/;"	f	class:Outputs
~ParameterInput	src/parameter_input.cpp	/^ParameterInput::~ParameterInput() {$/;"	f	class:ParameterInput
~Reconstruction	src/reconstruct/reconstruction.cpp	/^Reconstruction::~Reconstruction() {$/;"	f	class:Reconstruction
~RestartOutput	src/outputs/outputs.hpp	/^  ~RestartOutput() {}$/;"	f	class:RestartOutput
~Schwarzschild	src/coordinates/schwarzschild.cpp	/^Schwarzschild::~Schwarzschild() {$/;"	f	class:Schwarzschild
~SphericalPolar	src/coordinates/spherical_polar.cpp	/^SphericalPolar::~SphericalPolar() {$/;"	f	class:SphericalPolar
~TaskList	src/task_list/task_list.cpp	/^TaskList::~TaskList() {$/;"	f	class:TaskList
~TimeIntegratorTaskList	src/task_list/task_list.hpp	/^  ~TimeIntegratorTaskList() {}$/;"	f	class:TimeIntegratorTaskList
~TurbulenceDriver	src/fft/turbulence.cpp	/^TurbulenceDriver::~TurbulenceDriver() {$/;"	f	class:TurbulenceDriver
~VTKOutput	src/outputs/outputs.hpp	/^  ~VTKOutput() {}$/;"	f	class:VTKOutput
